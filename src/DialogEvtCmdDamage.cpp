// -*- C++ -*-
//
// generated by wxGlade not found
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "DialogEvtCmdDamage.h"

// begin wxGlade: ::extracode
// end wxGlade


DialogEvtCmdDamage::DialogEvtCmdDamage(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxRESIZE_BORDER)
{
    // begin wxGlade: DialogEvtCmdDamage::DialogEvtCmdDamage
    szAttack_staticbox = new wxStaticBox(this, wxID_ANY, _("Attack"));
    szDefense_staticbox = new wxStaticBox(this, wxID_ANY, _("Defense influence"));
    szIntelligence_staticbox = new wxStaticBox(this, wxID_ANY, _("Intelligence influence"));
    szAttack2_staticbox = new wxStaticBox(this, wxID_ANY, _("Attack"));
    szVariable_staticbox = new wxStaticBox(this, wxID_ANY, _("Variable"));
    szTarget_staticbox = new wxStaticBox(this, wxID_ANY, _("Target"));
    rbtnTargetParty = new wxRadioButton(this, wxID_ANY, _("Whole group"));
    rbtnTargetFixed = new wxRadioButton(this, wxID_ANY, _("Fixed"));
    const wxString chTargetFixed_choices[] = {
        _("<set by wxGlade>"),
    };
    chTargetFixed = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chTargetFixed_choices);
    rbtnTargetVariable = new wxRadioButton(this, wxID_ANY, _("Variable"));
    tcTargetVariable = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnTargetVariable = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    spinAttack = new wxSpinCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinDefense = new wxSpinCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stDefense = new wxStaticText(this, wxID_ANY, _("%"));
    spinIntelligence = new wxSpinCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stInteligence = new wxStaticText(this, wxID_ANY, _("%"));
    spinAttack2 = new wxSpinCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    chbVariableEnable = new wxCheckBox(this, wxID_ANY, _("Enable"));
    tcVariable = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnVariable = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnOK = new wxButton(this, wxID_OK, wxEmptyString);
    btnCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
    btnHelp = new wxButton(this, wxID_HELP, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


void DialogEvtCmdDamage::set_properties()
{
    // begin wxGlade: DialogEvtCmdDamage::set_properties
    SetTitle(_("Take damage"));
    chTargetFixed->SetMinSize(wxSize(50, -1));
    chTargetFixed->SetSelection(0);
    tcTargetVariable->SetMinSize(wxSize(50, -1));
    spinAttack->SetMinSize(wxSize(50, -1));
    spinDefense->SetMinSize(wxSize(50, -1));
    spinIntelligence->SetMinSize(wxSize(50, -1));
    spinAttack2->SetMinSize(wxSize(50, -1));
    tcVariable->SetMinSize(wxSize(50, -1));
    btnOK->SetDefault();
    // end wxGlade
}


void DialogEvtCmdDamage::do_layout()
{
    // begin wxGlade: DialogEvtCmdDamage::do_layout
    wxBoxSizer* szDamage = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szMiddleBottom = new wxBoxSizer(wxHORIZONTAL);
    szVariable_staticbox->Lower();
    wxStaticBoxSizer* szVariable = new wxStaticBoxSizer(szVariable_staticbox, wxHORIZONTAL);
    szAttack2_staticbox->Lower();
    wxStaticBoxSizer* szAttack2 = new wxStaticBoxSizer(szAttack2_staticbox, wxHORIZONTAL);
    wxBoxSizer* szMiddleTop = new wxBoxSizer(wxHORIZONTAL);
    szIntelligence_staticbox->Lower();
    wxStaticBoxSizer* szIntelligence = new wxStaticBoxSizer(szIntelligence_staticbox, wxHORIZONTAL);
    szDefense_staticbox->Lower();
    wxStaticBoxSizer* szDefense = new wxStaticBoxSizer(szDefense_staticbox, wxHORIZONTAL);
    szAttack_staticbox->Lower();
    wxStaticBoxSizer* szAttack = new wxStaticBoxSizer(szAttack_staticbox, wxHORIZONTAL);
    szTarget_staticbox->Lower();
    wxStaticBoxSizer* szTarget = new wxStaticBoxSizer(szTarget_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszTarget = new wxFlexGridSizer(3, 2, 2, 2);
    wxBoxSizer* szTargetVariable = new wxBoxSizer(wxHORIZONTAL);
    gszTarget->Add(rbtnTargetParty, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszTarget->Add(0, 0, 1, wxEXPAND, 0);
    gszTarget->Add(rbtnTargetFixed, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszTarget->Add(chTargetFixed, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszTarget->Add(rbtnTargetVariable, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    szTargetVariable->Add(tcTargetVariable, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTargetVariable->Add(btnTargetVariable, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszTarget->Add(szTargetVariable, 1, wxEXPAND, 0);
    gszTarget->AddGrowableCol(1);
    szTarget->Add(gszTarget, 1, wxEXPAND, 0);
    szDamage->Add(szTarget, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAttack->Add(spinAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    szMiddleTop->Add(szAttack, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szDefense->Add(spinDefense, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szDefense->Add(stDefense, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szMiddleTop->Add(szDefense, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szIntelligence->Add(spinIntelligence, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szIntelligence->Add(stInteligence, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szMiddleTop->Add(szIntelligence, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szDamage->Add(szMiddleTop, 0, wxEXPAND, 0);
    szAttack2->Add(spinAttack2, 1, 0, 0);
    szMiddleBottom->Add(szAttack2, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szVariable->Add(chbVariableEnable, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szVariable->Add(tcVariable, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szVariable->Add(btnVariable, 0, wxALIGN_CENTER_VERTICAL, 0);
    szMiddleBottom->Add(szVariable, 1, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szDamage->Add(szMiddleBottom, 0, wxEXPAND, 0);
    szBottom->Add(btnOK, 0, wxALIGN_BOTTOM|wxALL, 1);
    szBottom->Add(btnCancel, 0, wxALIGN_BOTTOM|wxALL, 1);
    szBottom->Add(btnHelp, 0, wxALIGN_BOTTOM|wxALL, 1);
    szDamage->Add(szBottom, 1, wxALIGN_RIGHT|wxBOTTOM|wxRIGHT, 3);
    SetSizer(szDamage);
    szDamage->Fit(this);
    Layout();
    // end wxGlade
}

