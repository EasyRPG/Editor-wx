// -*- C++ -*-
//
// generated by wxGlade not found
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "DialogDb.h"

// begin wxGlade: ::extracode
// end wxGlade


DialogDb::DialogDb(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxRESIZE_BORDER)
{
    // begin wxGlade: DialogDb::DialogDb
    nbDb = new wxNotebook(this, wxID_ANY);
    pnCommonEvent = new wxPanel(nbDb, wxID_ANY);
    pnSystem = new wxPanel(nbDb, wxID_ANY);
    pnText = new wxPanel(nbDb, wxID_ANY);
    nbText = new wxNotebook(pnText, wxID_ANY);
    pnTextParametersAndOther = new wxPanel(nbText, wxID_ANY);
    pnTextCommerceAndInn = new wxPanel(nbText, wxID_ANY);
    pnTextCommerceMessages = new wxPanel(nbText, wxID_ANY);
    pnTextBattleMessages3And4 = new wxPanel(nbText, wxID_ANY);
    pnTextBattleMessages1And2 = new wxPanel(nbText, wxID_ANY);
    pnTileset = new wxPanel(nbDb, wxID_ANY);
    nbTileset = new wxNotebook(pnTileset, wxID_ANY);
    nbTilesetUpperLayer = new wxPanel(nbTileset, wxID_ANY);
    nbTilesetLowerLayer = new wxPanel(nbTileset, wxID_ANY);
    pnTerrain = new wxPanel(nbDb, wxID_ANY);
    pnAnimation = new wxPanel(nbDb, wxID_ANY);
    pnState = new wxPanel(nbDb, wxID_ANY);
    pnAttribute = new wxPanel(nbDb, wxID_ANY);
    pnTroop = new wxPanel(nbDb, wxID_ANY);
    nbTroopBattleEvents = new wxNotebook(pnTroop, wxID_ANY);
    pnTroopBattleEvents = new wxPanel(nbTroopBattleEvents, wxID_ANY);
    pnEnemy = new wxPanel(nbDb, wxID_ANY);
    pnItem = new wxPanel(nbDb, wxID_ANY);
    pnSkill = new wxPanel(nbDb, wxID_ANY);
    pnActor = new wxPanel(nbDb, wxID_ANY);
    szActorTitle_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Title"));
    szActorWalkingGraphic_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Walking graphic"));
    szActorInitialLevel_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Initial level"));
    szActorMaxLevel_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Max level"));
    szActorCriticalHitRate_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Critical hit rate"));
    szActorInitialEquipment_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Initial equipment"));
    szActorFaceGraphic_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Face graphic"));
    szActorOptions_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Options"));
    szActorMaxHP_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Max HP"));
    szActorMaxMP_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Max MP"));
    szActorAttack_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Attack"));
    szActorDefense_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Defense"));
    szActorIntelligence_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Intelligence"));
    szActorAgility_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Agility"));
    szActorCapacityCurves_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Capacity curves"));
    szActorExperienceCurve_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Experience curve"));
    szActorAnimationWithoutWeapons_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Animation without weapons"));
    szActorSkills_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Skills"));
    szActorStateRates_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("State rates"));
    szActorAttributeRates_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Attribute rates"));
    szSkillName_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Name"));
    szSkillType_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Type"));
    szSkillMPCost_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("MP cost"));
    szSkillDescription_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Description"));
    szSkillTarget_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Target"));
    szSkillCastMessage_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Cast message"));
    szSkillFailMessage_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Fail message"));
    szSkillAnimation_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Animation"));
    szSkillAttackInfluence_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Attack influence"));
    szSkillMagicInfluence_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Magic influence"));
    szSkillVariance_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Variance"));
    szSkillEffectRate_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Effect rate"));
    szSkillAffectCapacities_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Affect capacities"));
    szSkillSuccessRate_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Success rate"));
    szSkillChangeStates_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Change states"));
    szSkillAttributes_staticbox = new wxStaticBox(pnSkill, wxID_ANY, _("Attributes"));
    szItemName_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Name"));
    szItemType_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Type"));
    szItemCost_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Cost"));
    szItemTimesUsed_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Times used"));
    szItemDescription_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Description"));
    szItemCanBeUsedBy_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Can be used by"));
    szItemChangeStates_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Change states"));
    szItemHPRecover_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("HP recover"));
    szItemMPRecover_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("MP recover"));
    szItemOptions_staticbox = new wxStaticBox(pnItem, wxID_ANY, _("Options"));
    szEnemyName_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Name"));
    szEnemyMaxHP_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Max HP"));
    szEnemyAttack_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Attack"));
    szEnemyIntelligence_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Intelligence"));
    szEnemyMaxMP_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Max MP"));
    szEnemyDefense_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Defense"));
    szEnemyAgility_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Agility"));
    szEnemyParameters_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Parameters"));
    szEnemyGraphic_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Enemy graphic"));
    szEnemyGetEXP_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Get EXP"));
    szEnemyGetMoney_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Get money"));
    szEnemyGetItem_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Get item"));
    szEnemyGetItemChance_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Get item chance"));
    szEnemyOnSuccess_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("On success"));
    szCriticalHitRate_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Critical hit rate"));
    szEnemyOptions_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Options"));
    szEnemyActions_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Actions"));
    szAttributesResistance_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("Attribute resistance"));
    szStatesResistance_staticbox = new wxStaticBox(pnEnemy, wxID_ANY, _("States resistance"));
    szTroopName_staticbox = new wxStaticBox(pnTroop, wxID_ANY, _("Name"));
    szTroopEncountersOn_staticbox = new wxStaticBox(pnTroop, wxID_ANY, _("Encounters on"));
    szTroopBattleEvents_staticbox = new wxStaticBox(pnTroop, wxID_ANY, _("Battle events"));
    szAttributeName_staticbox = new wxStaticBox(pnAttribute, wxID_ANY, _("Name"));
    szAttributeEffectRate_staticbox = new wxStaticBox(pnAttribute, wxID_ANY, _("Effect rate"));
    szStateName_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Name"));
    szStateType_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Type"));
    szStateColor_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Color"));
    szStatePriority_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Priority"));
    szStateActionRange_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Action range"));
    szStateEffectRate_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Effect Rate"));
    szStateNaturalHealing_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Natural healing"));
    szStateAfterHitHealing_staticbox = new wxStaticBox(pnState, wxID_ANY, _("After hit healing"));
    szStateHealMethod_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Heal method"));
    szStateDecreaseCapacities_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Decrease capacities"));
    szStateAttackChance_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Attack chance"));
    szStateSkillExceptions_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Skill exceptions"));
    szStateMessageActorHit_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Actor hit"));
    szStateMessageEnemyHit_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Enemy hit"));
    szStateMessageAlreadyInState_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Message if already in this state"));
    szStateMessageNormalState_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Normal state by one"));
    szStateMessageRecover_staticbox = new wxStaticBox(pnState, wxID_ANY, _("Recover message"));
    szStateHPReductionInEveryTurn_staticbox = new wxStaticBox(pnState, wxID_ANY, _("HP reduction in every turn"));
    szStateHPReductionOnMove_staticbox = new wxStaticBox(pnState, wxID_ANY, _("HP reduction on move"));
    szStateHPReduction_staticbox = new wxStaticBox(pnState, wxID_ANY, _("HP reduction"));
    szStateMPReductionInEveryTurn_staticbox = new wxStaticBox(pnState, wxID_ANY, _("MP reduction in every turn"));
    szStateMPReductionOnMove_staticbox = new wxStaticBox(pnState, wxID_ANY, _("MP reduction on move"));
    szStateMPReduction_staticbox = new wxStaticBox(pnState, wxID_ANY, _("MP reduction"));
    szAnimationName_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Name"));
    szAnimationGraphic_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Animation graphic"));
    szEnemyTargetTest_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Enemy target (for testing)"));
    szAnimationNumberOfFrames_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("# of frames"));
    szAnimationFrames_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Frames"));
    szAnimationTimeline_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Sounds, shaking and blinking timeline"));
    szAnimationRange_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Range"));
    szAnimationYordinate_staticbox = new wxStaticBox(pnAnimation, wxID_ANY, _("Y ordinate"));
    szTerrainName_staticbox = new wxStaticBox(pnTerrain, wxID_ANY, _("Name"));
    szTerrainDamage_staticbox = new wxStaticBox(pnTerrain, wxID_ANY, _("Damage"));
    szTerrainEncounterRate_staticbox = new wxStaticBox(pnTerrain, wxID_ANY, _("Encounter %"));
    szTerrainBattleBackgroundGraphic_staticbox = new wxStaticBox(pnTerrain, wxID_ANY, _("Battle background graphic"));
    szTerrainVehiclePermissions_staticbox = new wxStaticBox(pnTerrain, wxID_ANY, _("Vehicle permissions"));
    szTilesetName_staticbox = new wxStaticBox(pnTileset, wxID_ANY, _("Name"));
    szTilesetGraphic_staticbox = new wxStaticBox(pnTileset, wxID_ANY, _("Tileset graphic"));
    szTilesetLowerLayerModify_staticbox = new wxStaticBox(nbTilesetLowerLayer, wxID_ANY, _("Modify"));
    szTilesetWaterAnimation_staticbox = new wxStaticBox(nbTilesetLowerLayer, wxID_ANY, _("Water animation"));
    szTilesetLowerLayerTerrain_staticbox = new wxStaticBox(nbTilesetLowerLayer, wxID_ANY, _("Terrain"));
    szTileseUpperLayerModify_staticbox = new wxStaticBox(nbTilesetUpperLayer, wxID_ANY, _("Modify"));
    szTextBattleStartBattle_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Start battle"));
    szTextBattlePriorityAttack_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Priority attack"));
    szTextBattleSuccessfulEscape_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Successful escape"));
    szTextBattleFailedEscape_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Failed escape"));
    szTextBattleVictory_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Victory"));
    szTextBattleDeadGroup_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Dead group"));
    szTextBattleExperience_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Experience"));
    szTextBattleObtainedMoney_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Obtained money"));
    szTextBattleObtainedObject_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Obtained object"));
    szTextBattleMessages1_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Battle messages 1"));
    szTextBattleNormalAttack_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Normal attack"));
    szTextBattleActorDeath_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Actor death"));
    szTextBattleEnemyDeath_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Enemy death"));
    szTextBattleDefense_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Defense"));
    szTextBattleStateControl_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("State control"));
    szTextBattleStrengthGain_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Strength gain"));
    szTextBattleAutodestruction_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Autodestruction"));
    szTextBattleEnemyEscape_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Enemy escape"));
    szTextBattleTransformation_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Transformation"));
    szTextBattleMessages2_staticbox = new wxStaticBox(pnTextBattleMessages1And2, wxID_ANY, _("Battle messages 2"));
    szTextBattleActorAttack_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Actor attack"));
    szTextBattleFailedActorAttack_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Failed actor attack"));
    szTextBattleEnemyAttack_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Enemy attack"));
    szTextBattleFailedEnemyAttack_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Failed enemy attack"));
    szTextBattleFailedSkillA_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Failed skill A"));
    szTextBattleFailedSkillB_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Failed skill B"));
    szTextBattleFailedSkillC_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Failed skill C"));
    szTextBattleEvadePsysicalAttack_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Evade physical attack"));
    szTextBattleUseItem_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Use item"));
    szTextBattleMessages3_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Battle messages 3"));
    szTextBattleRecoverHP_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Recover HP"));
    szTextBattleParameterUp_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Parameter up"));
    szTextBattleParameterDown_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Parameter down"));
    szTextBattleParameterAbsorptionAllied_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Parameter absorption (allied)"));
    szTextBattleParameterAbsorptionEnemy_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Parameter absorption (enemy)"));
    szTextBattleDefenseUp_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Defense up"));
    szTextBattleDefenseDown_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Defense down"));
    szTextBattleLevelUp_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Level up"));
    szTextBattleLearnSkill_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Learn skill"));
    szTextBattleMessages4_staticbox = new wxStaticBox(pnTextBattleMessages3And4, wxID_ANY, _("Battle messages 4"));
    szTextCommerceMessagesABuySelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy selection"));
    szTextCommerceMessagesABuySelectionSecondTimeAndLater_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy selection (second time and later)"));
    szTextCommerceMessagesABuy_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy"));
    szTextCommerceMessagesASell_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Sell"));
    szTextCommerceMessagesAExit_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Exit"));
    szTextCommerceMessagesAItemToBuySelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to buy selection"));
    szTextCommerceMessagesAItemToBuyNumberSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to buy number selection"));
    szTextCommerceMessagesABuyCompleted_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy completed"));
    szTextCommerceMessagesAItemToSellSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to sell selection"));
    szTextCommerceMessagesAItemToSellNumberSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to sell number selection"));
    szTextCommerceMessagesASellCompleted_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Sell completed"));
    szTextCommerceMessagesA_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Commerce messages type A"));
    szTextCommerceMessagesBBuySelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy selection"));
    szTextCommerceMessagesBBuySelectionSecondTimeAndLater_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy selection (second time and later)"));
    szTextCommerceMessagesBBuy_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy"));
    szTextCommerceMessagesBSell_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Sell"));
    szTextCommerceMessagesBExit_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Exit"));
    szTextCommerceMessagesBItemToBuySelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to buy selection"));
    szTextCommerceMessagesBItemToBuyNumberSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to buy number selection"));
    szTextCommerceMessagesBBuyCompleted_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Buy completed"));
    szTextCommerceMessagesBItemToSellSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to sell selection"));
    szTextCommerceMessagesBItemToSellNumberSelection_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Item to sell number selection"));
    szTextCommerceMessagesBSellCompleted_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Sell completed"));
    szTextCommerceMessagesB_staticbox = new wxStaticBox(pnTextCommerceMessages, wxID_ANY, _("Commerce messages type B"));
    szTextCommerceMessagesCBuySelection_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Buy selection"));
    szTextCommerceMessagesCBuySelectionSecondTimeAndLater_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Buy selection (second time and later)"));
    szTextCommerceMessagesCBuy_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Buy"));
    szTextCommerceMessagesCSell_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Sell"));
    szTextCommerceMessagesCExit_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Exit"));
    szTextCommerceMessagesCItemToBuySelection_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Item to buy selection"));
    szTextCommerceMessagesCItemToBuyNumberSelection_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Item to buy number selection"));
    szTextCommerceMessagesCBuyCompleted_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Buy completed"));
    szTextCommerceMessagesCItemToSellSelection_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Item to sell selection"));
    szTextCommerceMessagesCItemToSellNumberSelection_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Item to sell number selection"));
    szTextCommerceMessagesCSellCompleted_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Sell completed"));
    szTextCommerceMessagesC_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Commerce messages type C"));
    szTextInnMessagesASelectedInn_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Selected inn"));
    szTextInnMessagesAStay_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Stay"));
    szTextInnMessagesADontStay_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Don't stay"));
    szTextInnMessagesA_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Inn messages type A"));
    szTextInnMessagesBSelectedInn_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Selected inn"));
    szTextInnMessagesBStay_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Stay"));
    szTextInnMessagesBDontStay_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Don't stay"));
    szTextInnMessagesB_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Inn messages type B"));
    szTextCommercePossessedItems_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Possessed items"));
    szTextCommerceEquipedItems_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Equipped items"));
    szTextCommerceCurrency_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Currency"));
    szTextCommerceVocabulary_staticbox = new wxStaticBox(pnTextCommerceAndInn, wxID_ANY, _("Commerce vocabulary"));
    szTextLevel_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Level"));
    szTextLevelShorter_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Level (shorter)"));
    szTextHP_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("HP"));
    szTextHPShorter_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("HP (shorter)"));
    szTextMP_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("MP"));
    szTextMPShorter_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("MP (shorter)"));
    szTextNormal_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Normal"));
    szTextEXPShorter_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("EXP (shorter)"));
    szTextMPCost_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("MP cost"));
    szTextWeapons_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Weapons"));
    szTextAttack_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Attack"));
    szTextShield_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Shield"));
    szTextDefense_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Defense"));
    szTextArmor_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Armor"));
    szTextIntelligence_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Intelligence"));
    szTextHelmet_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Helmet"));
    szTextAgility_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Agility"));
    szTextOther_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Other"));
    szTextArmorsAndEquipment_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Armors, equipment, etc."));
    szTextCommandFight_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Fight"));
    szTextCommandAttack_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Attack"));
    szTextCommandEquipment_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Equipment"));
    szTextCommandNewGame_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("New game"));
    szTextCommandAutomatic_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Automatic"));
    szTextCommandDefense_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Defense"));
    szTextCommandSave_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Save"));
    szTextCommandLoad_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Load"));
    szTextCommandEscape_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Escape"));
    szTextCommandObjects_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Objects"));
    szTextCommandExit_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Exit"));
    szTextCommandEnd_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("End"));
    szTextCommandSkills_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Skills"));
    szTextCommands_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Commands"));
    szTextSaveSlotSelection_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Save slot selection"));
    szTextLoadSlotSelection_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Load slot selection"));
    szTextConfirmExit_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Confirm exit"));
    szTextFile_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("File"));
    szTextOK_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("OK"));
    szTextCancel_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Cancel"));
    szTextSaveLoadExit_staticbox = new wxStaticBox(pnTextParametersAndOther, wxID_ANY, _("Save, load, exit"));
    szVehicleGraphicSmallShip_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Small ship"));
    szVehicleGraphicBigShip_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Big ship"));
    szVehicleGraphicAirship_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Airship"));
    szSystemVehicleGraphic_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Vehicle graphic"));
    szSystemTitleGraphic_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Title graphic"));
    szSystemGameOverGraphic_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Game over graphic"));
    szSystemStartingPartyActor1_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Actor 1"));
    szSystemStartingPartyActor2_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Actor 2"));
    szSystemStartingPartyActor3_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Actor 3"));
    szSystemStartingPartyActor4_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Actor 4"));
    szSystemStartingParty_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Starting party"));
    szSystemMusicTitle_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Title"));
    szSystemMusicSmallShip_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Small ship"));
    szSystemMusicBattle_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Battle"));
    szSystemMusicBigShip_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Big ship"));
    szSystemMusicVictory_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Victory"));
    szSystemMusicAirship_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Airship"));
    szSystemMusicInn_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Inn"));
    szSystemMusicGameOver_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Game over"));
    szSystemMusic_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("System music"));
    szSystemSoundCursor_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Cursor"));
    szSystemSoundStartBattle_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Start battle"));
    szSystemSoundActorDamage_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Actor damage"));
    szSystemSoundOK_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("OK"));
    szSystemSoundEscape_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Escape"));
    szSystemSoundDodge_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Dodge"));
    szSystemSoundCancel_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Cancel"));
    szSystemSoundEnemyAttack_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Enemy attack"));
    szSystemSoundEnemyDeath_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Enemy death"));
    szSystemSoundError_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Error"));
    szSystemSoundEnemyDamage_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Enemy damage"));
    szSystemSoundUseObject_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Use object"));
    szSystemSounds_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("System sounds"));
    szSystemGraphic_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("System graphic"));
    szSystemTransitionTypeEraseScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Erase screen"));
    szSystemTransitionTypeShowScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Show screen"));
    szSystemTransitionType_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Transition type"));
    szSystemStartBattleEraseScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Erase screen"));
    szSystemStartBattleShowScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Show screen"));
    szSystemStartBattle_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Start battle"));
    szSystemEndBattleEraseScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Erase screen"));
    szSystemEndBattleShowScreen_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("Show screen"));
    szSystemEndBattle_staticbox = new wxStaticBox(pnSystem, wxID_ANY, _("End battle"));
    szCommonEventName_staticbox = new wxStaticBox(pnCommonEvent, wxID_ANY, _("Name"));
    szCommonEventActivationConditions_staticbox = new wxStaticBox(pnCommonEvent, wxID_ANY, _("Activation conditions"));
    szCommonEventConditionActivationSwitch_staticbox = new wxStaticBox(pnCommonEvent, wxID_ANY, _("Condition event activation switch"));
    szCommonEventExecutionContents_staticbox = new wxStaticBox(pnCommonEvent, wxID_ANY, _("Event execution contents"));
    szActorName_staticbox = new wxStaticBox(pnActor, wxID_ANY, _("Name"));
    stActor = new wxStaticText(pnActor, wxID_ANY, _("Actors"));
    const wxString listActor_choices[] = {
        _("<set by wxGlade>"),
    };
    listActor = new wxListBox(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listActor_choices, wxLB_SINGLE);
    btnActorMaxNumber = new wxButton(pnActor, wxID_ANY, _("Max number..."));
    tcActorName = new wxTextCtrl(pnActor, wxID_ANY, wxEmptyString);
    tcActorTitle = new wxTextCtrl(pnActor, wxID_ANY, wxEmptyString);
    bmpWalkingGraphic = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    chbActorWalkingGraphicTranslucent = new wxCheckBox(pnActor, wxID_ANY, _("Translucent"));
    btnActorWalkingGraphic = new wxButton(pnActor, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    spinActorInitialLevel = new wxSpinCtrl(pnActor, wxID_ANY, wxT("1"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 50);
    spinActorMaxLevel = new wxSpinCtrl(pnActor, wxID_ANY, wxT("50"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 50);
    chbActorCriticalHitRate = new wxCheckBox(pnActor, wxID_ANY, _("1 /"));
    spinActorCriticalHitRate = new wxSpinCtrl(pnActor, wxID_ANY, wxT("30"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 100);
    stActorInitialWeapon = new wxStaticText(pnActor, wxID_ANY, _("Weapon:"));
    const wxString chActorInitialWeapon_choices[] = {
        _("(None)"),
    };
    chActorInitialWeapon = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorInitialWeapon_choices);
    stActorInitialShield = new wxStaticText(pnActor, wxID_ANY, _("Shield:"));
    const wxString chActorInitialShield_choices[] = {
        _("(None)"),
    };
    chActorInitialShield = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorInitialShield_choices);
    stActorInitialArmor = new wxStaticText(pnActor, wxID_ANY, _("Armor:"));
    const wxString chActorInitialArmor_choices[] = {
        _("(None)"),
    };
    chActorInitialArmor = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorInitialArmor_choices);
    stActorInitialHelmet = new wxStaticText(pnActor, wxID_ANY, _("Helmet:"));
    const wxString chActorInitialHelmet_choices[] = {
        _("(None)"),
    };
    chActorInitialHelmet = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorInitialHelmet_choices);
    stActorInitialAccessory = new wxStaticText(pnActor, wxID_ANY, _("Accessory:"));
    const wxString chActorInitialAccessory_choices[] = {
        _("(None)"),
    };
    chActorInitialAccessory = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorInitialAccessory_choices);
    bmpActorFaceGraphic = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnActorFaceGraphic = new wxButton(pnActor, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    chbActorOptionsUse2Weapons = new wxCheckBox(pnActor, wxID_ANY, _("Use 2 weapons"));
    chbActorOptionsFixedEquipment = new wxCheckBox(pnActor, wxID_ANY, _("Fixed equipment"));
    chbActorOptionsControlledByAI = new wxCheckBox(pnActor, wxID_ANY, _("Controlled by AI"));
    chbActorOptionsArmored = new wxCheckBox(pnActor, wxID_ANY, _("Armored"));
    bmpActorMaxHP = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    bmpActorMaxMP = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    bmpActorAttack = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    bmpActorDefense = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    bmpActorIntelligence = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    bmpActorAgility = new wxStaticBitmap(pnActor, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    tcActorExperienceCurve = new wxTextCtrl(pnActor, wxID_ANY, wxEmptyString);
    btnActorExperienceCurve = new wxButton(pnActor, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString chActorAnimationWithoutWeapons_choices[] = {
        _("<set by wxGlade>"),
    };
    chActorAnimationWithoutWeapons = new wxChoice(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActorAnimationWithoutWeapons_choices);
    lcActorSkills = new wxListCtrl(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxLC_REPORT);
    chbActorSkillsBattleCommand = new wxCheckBox(pnActor, wxID_ANY, _("Battle command:"));
    tcActorSkillsBattleCommand = new wxTextCtrl(pnActor, wxID_ANY, wxEmptyString);
    const wxString listActorStateRates_choices[] = {
        _("<set by wxGlade>"),
    };
    listActorStateRates = new wxListBox(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listActorStateRates_choices, wxLB_SINGLE);
    const wxString listActorAttributeRates_choices[] = {
        _("<set by wxGlade>"),
    };
    listActorAttributeRates = new wxListBox(pnActor, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listActorAttributeRates_choices, wxLB_SINGLE);
    stSkill = new wxStaticText(pnSkill, wxID_ANY, _("Skills"));
    const wxString listSkill_choices[] = {
        _("<set by wxGlade>"),
    };
    listSkill = new wxListBox(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listSkill_choices, wxLB_SINGLE);
    btnSkillMaxNumber = new wxButton(pnSkill, wxID_ANY, _("Max number..."));
    stSkillName = new wxTextCtrl(pnSkill, wxID_ANY, wxEmptyString);
    const wxString chSkillType_choices[] = {
        _("Normal"),
        _("Teleport"),
        _("Escape"),
        _("Switch"),
    };
    chSkillType = new wxChoice(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 4, chSkillType_choices);
    spinSkillMPCost = new wxSpinCtrl(pnSkill, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 999);
    tcSkillDescription = new wxTextCtrl(pnSkill, wxID_ANY, wxEmptyString);
    const wxString chSkillTarget_choices[] = {
        _("Single enemy"),
        _("All enemies"),
        _("Itself"),
        _("Single allied"),
        _("All allied"),
    };
    chSkillTarget = new wxChoice(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 5, chSkillTarget_choices);
    stSkillCastMessageCharacterName = new wxStaticText(pnSkill, wxID_ANY, _("(Character name)"));
    tcSkillCastMessage1 = new wxTextCtrl(pnSkill, wxID_ANY, wxEmptyString);
    tcSkillCastMessage2 = new wxTextCtrl(pnSkill, wxID_ANY, wxEmptyString);
    btnSkillCastMessageCast = new wxButton(pnSkill, wxID_ANY, _("Cast"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnSkillCastMessageThrow = new wxButton(pnSkill, wxID_ANY, _("Throw"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnSkillCastMessageUse = new wxButton(pnSkill, wxID_ANY, _("Use"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stSkillFailMessageCharacterName = new wxStaticText(pnSkill, wxID_ANY, _("(Character name)"));
    tcSkillFailMessage = new wxTextCtrl(pnSkill, wxID_ANY, wxEmptyString);
    bmpSkillAnimation = new wxStaticBitmap(pnSkill, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    const wxString chSkillAnimation_choices[] = {
        _("<set by wxGlade>"),
    };
    chSkillAnimation = new wxChoice(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSkillAnimation_choices);
    slSkillAttackInfluence = new wxSlider(pnSkill, wxID_ANY, 0, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_AUTOTICKS|wxSL_HORIZONTAL|wxSL_LABELS);
    slSkillMagicInfluence = new wxSlider(pnSkill, wxID_ANY, 3, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_AUTOTICKS|wxSL_HORIZONTAL|wxSL_LABELS);
    slSkillVariance = new wxSlider(pnSkill, wxID_ANY, 4, 0, 10, wxDefaultPosition, wxDefaultSize, wxSL_AUTOTICKS|wxSL_HORIZONTAL|wxSL_LABELS);
    spinSkillEffectRate = new wxSpinCtrl(pnSkill, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 999);
    chbSkillAffectHP = new wxCheckBox(pnSkill, wxID_ANY, _("HP"));
    chbSkillAffectMP = new wxCheckBox(pnSkill, wxID_ANY, _("MP"));
    chbSkillAffectAttack = new wxCheckBox(pnSkill, wxID_ANY, _("Attack"));
    chbSkillAffectDefense = new wxCheckBox(pnSkill, wxID_ANY, _("Defense"));
    chbSkillAffectIntelligence = new wxCheckBox(pnSkill, wxID_ANY, _("Intelligence"));
    chbSkillAffectAgility = new wxCheckBox(pnSkill, wxID_ANY, _("Agility"));
    chbSkillAffectAbsorbHPMP = new wxCheckBox(pnSkill, wxID_ANY, _("Absorb HP/MP"));
    chbSkillAffectArmorBypass = new wxCheckBox(pnSkill, wxID_ANY, _("Armor bypass"));
    spinSkillSuccessRate = new wxSpinCtrl(pnSkill, wxID_ANY, wxT("100"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stSkillSuccessRate = new wxStaticText(pnSkill, wxID_ANY, _("%"));
    const wxString listSkillChangeStatus_choices[] = {
        _("<set by wxGlade>"),
    };
    listSkillChangeStatus = new wxListBox(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listSkillChangeStatus_choices, wxLB_SINGLE);
    const wxString listSkillAttributes_choices[] = {
        _("<set by wxGlade>"),
    };
    listSkillAttributes = new wxListBox(pnSkill, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listSkillAttributes_choices, wxLB_SINGLE);
    chbSkillAttributesDefenseUpDown = new wxCheckBox(pnSkill, wxID_ANY, _("Defense up/down"));
    stItem = new wxStaticText(pnItem, wxID_ANY, _("Items"));
    const wxString listItem_choices[] = {
        _("<set by wxGlade>"),
    };
    listItem = new wxListBox(pnItem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listItem_choices, wxLB_SINGLE);
    btnItemMaxNumber = new wxButton(pnItem, wxID_ANY, _("Max number..."));
    tcItemName = new wxTextCtrl(pnItem, wxID_ANY, wxEmptyString);
    const wxString chItemType_choices[] = {
        _("<set by wxGlade>"),
    };
    chItemType = new wxChoice(pnItem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chItemType_choices);
    spinItemCost = new wxSpinCtrl(pnItem, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    const wxString chItemTimesUsed_choices[] = {
        _("<set by wxGlade>"),
    };
    chItemTimesUsed = new wxChoice(pnItem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chItemTimesUsed_choices);
    tcItemDescription = new wxTextCtrl(pnItem, wxID_ANY, wxEmptyString);
    const wxString rbxActionRange_choices[] = {
        _("One character"),
        _("Whole group"),
    };
    rbxActionRange = new wxRadioBox(pnItem, wxID_ANY, _("Action range"), wxDefaultPosition, wxDefaultSize, 2, rbxActionRange_choices, 2, wxRA_SPECIFY_COLS);
    const wxString listItemCanBeUsedBy_choices[] = {
        _("<set by wxGlade>"),
    };
    listItemCanBeUsedBy = new wxListBox(pnItem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listItemCanBeUsedBy_choices, wxLB_SINGLE);
    const wxString listItemChangeStates_choices[] = {
        _("<set by wxGlade>"),
    };
    listItemChangeStates = new wxListBox(pnItem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listItemChangeStates_choices, wxLB_SINGLE);
    stItemHPRecoverMax = new wxStaticText(pnItem, wxID_ANY, _("Max"));
    spinItemHPRecoverPercent = new wxSpinCtrl(pnItem, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stItemHPRecoverPercentPlus = new wxStaticText(pnItem, wxID_ANY, _("% +"));
    spinItemHPRecoverPoints = new wxSpinCtrl(pnItem, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stItemHPRecoverHP = new wxStaticText(pnItem, wxID_ANY, _("HP"));
    stItemMPRecoverMax = new wxStaticText(pnItem, wxID_ANY, _("Max"));
    spinItemMPRecoverPercent = new wxSpinCtrl(pnItem, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stItemMPRecoverPercentPlus = new wxStaticText(pnItem, wxID_ANY, _("% +"));
    spinItemMPRecoverPoints = new wxSpinCtrl(pnItem, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stItemMPRecoverMP = new wxStaticText(pnItem, wxID_ANY, _("MP"));
    chbItemOptionsDisabledInBattle = new wxCheckBox(pnItem, wxID_ANY, _("Disabled in battle"));
    chbItemOptionsOnlySuitableInFallenCharacters = new wxCheckBox(pnItem, wxID_ANY, _("Only usable on fallen characters"));
    stEnemy = new wxStaticText(pnEnemy, wxID_ANY, _("Enemies"));
    const wxString listEnemy_choices[] = {
        _("<set by wxGlade>"),
    };
    listEnemy = new wxListBox(pnEnemy, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listEnemy_choices, wxLB_SINGLE);
    btnEnemyMaxNumber = new wxButton(pnEnemy, wxID_ANY, _("Max number..."));
    tcEnemyName = new wxTextCtrl(pnEnemy, wxID_ANY, wxEmptyString);
    spinEnemyMaxHP = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyAttack = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyIntelligence = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyMaxMP = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyDefense = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyAgility = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    bmpEnemyGraphic = new wxStaticBitmap(pnEnemy, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    chbEnemyGraphicTransparent = new wxCheckBox(pnEnemy, wxID_ANY, _("Transparent"));
    chbEnemyGraphicFlying = new wxCheckBox(pnEnemy, wxID_ANY, _("Flying"));
    btnEnemyGraphic = new wxButton(pnEnemy, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    spinEnemyGetEXP = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinEnemyGetMoney = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    const wxString chEnemyGetItem_choices[] = {
        _("<set by wxGlade>"),
    };
    chEnemyGetItem = new wxChoice(pnEnemy, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chEnemyGetItem_choices);
    spinEnemyGetItemChance = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stEnemyGetItemChance = new wxStaticText(pnEnemy, wxID_ANY, _("%"));
    chbEnemyCriticalHitRate = new wxCheckBox(pnEnemy, wxID_ANY, _("1 /"));
    spinEnemyCriticalHitRate = new wxSpinCtrl(pnEnemy, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    chbEnemyFailOften = new wxCheckBox(pnEnemy, wxID_ANY, _("Fails often"));
    lcEnemyActions = new wxListCtrl(pnEnemy, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxLC_REPORT);
    const wxString listAttributesResistance_choices[] = {
        _("<set by wxGlade>"),
    };
    listAttributesResistance = new wxListBox(pnEnemy, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listAttributesResistance_choices, wxLB_SINGLE);
    const wxString listStatesResistance_choices[] = {
        _("<set by wxGlade>"),
    };
    listStatesResistance = new wxListBox(pnEnemy, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listStatesResistance_choices, wxLB_SINGLE);
    stTroop = new wxStaticText(pnTroop, wxID_ANY, _("Troops"));
    const wxString listTroop_choices[] = {
        _("<set by wxGlade>"),
    };
    listTroop = new wxListBox(pnTroop, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTroop_choices, wxLB_SINGLE);
    btnTroopMaxNumber = new wxButton(pnTroop, wxID_ANY, _("Max number..."));
    tcTroopName = new wxTextCtrl(pnTroop, wxID_ANY, wxEmptyString);
    btnTroopAutocomplete = new wxButton(pnTroop, wxID_ANY, _("Autocomplete"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnTroopTestBattle = new wxButton(pnTroop, wxID_ANY, _("Test battle..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnTroopChangeBackground = new wxButton(pnTroop, wxID_ANY, _("Change background..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpTroop = new wxStaticBitmap(pnTroop, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnTroopAdd = new wxButton(pnTroop, wxID_ANY, _("Add"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnTroopRemove = new wxButton(pnTroop, wxID_ANY, _("Remove"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnTroopEmpty = new wxButton(pnTroop, wxID_ANY, _("Empty"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnTroopAlign = new wxButton(pnTroop, wxID_ANY, _("Align"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString listTroopMonster_choices[] = {
        _("<set by wxGlade>"),
    };
    listTroopMonster = new wxListBox(pnTroop, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTroopMonster_choices, wxLB_SINGLE);
    const wxString listTroopEncountersOn_choices[] = {
        _("<set by wxGlade>"),
    };
    listTroopEncountersOn = new wxListBox(pnTroop, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTroopEncountersOn_choices, wxLB_SINGLE);
    szTroopBattleEventsNewPage = new wxButton(pnTroop, wxID_ANY, _("New page"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    szTroopBattleEventsCopyPage = new wxButton(pnTroop, wxID_ANY, _("Copy"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    szTroopBattleEventsPastePage = new wxButton(pnTroop, wxID_ANY, _("Paste"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    szTroopBattleEventsDeletePage = new wxButton(pnTroop, wxID_ANY, _("Delete"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stTroopBattleEventsConditions = new wxStaticText(pnTroopBattleEvents, wxID_ANY, _("Conditions"));
    tcTroopBattleEventsConditions = new wxTextCtrl(pnTroopBattleEvents, wxID_ANY, wxEmptyString);
    btnTroopBattleEventsConditions = new wxButton(pnTroopBattleEvents, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString listTroopBattleEvents_choices[] = {
        _("<set by wxGlade>"),
    };
    listTroopBattleEvents = new wxListBox(pnTroopBattleEvents, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTroopBattleEvents_choices, wxLB_SINGLE);
    stAttribute = new wxStaticText(pnAttribute, wxID_ANY, _("Attributes"));
    const wxString listAttribute_choices[] = {
        _("<set by wxGlade>"),
    };
    listAttribute = new wxListBox(pnAttribute, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listAttribute_choices, wxLB_SINGLE);
    btnAttributeMaxNumber = new wxButton(pnAttribute, wxID_ANY, _("Max number..."));
    tcAttributeName = new wxTextCtrl(pnAttribute, wxID_ANY, wxEmptyString);
    const wxString rbAttributeClassification_choices[] = {
        _("Weapon attribute"),
        _("Magic attribute"),
    };
    rbAttributeClassification = new wxRadioBox(pnAttribute, wxID_ANY, _("Classification"), wxDefaultPosition, wxDefaultSize, 2, rbAttributeClassification_choices, 1, wxRA_SPECIFY_COLS);
    szAttributeEffectRateA = new wxStaticText(pnAttribute, wxID_ANY, _("A"));
    SpinAttributeEffectRateA = new wxSpinCtrl(pnAttribute, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAttributeEffectRateAPercent = new wxStaticText(pnAttribute, wxID_ANY, _("%"));
    szAttributeEffectRateB = new wxStaticText(pnAttribute, wxID_ANY, _("B"));
    SpinAttributeEffectRateB = new wxSpinCtrl(pnAttribute, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAttributeEffectRateBPercent = new wxStaticText(pnAttribute, wxID_ANY, _("%"));
    szAttributeEffectRateC = new wxStaticText(pnAttribute, wxID_ANY, _("C"));
    SpinAttributeEffectRateC = new wxSpinCtrl(pnAttribute, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAttributeEffectRateCPercent = new wxStaticText(pnAttribute, wxID_ANY, _("%"));
    szAttributeEffectRateD = new wxStaticText(pnAttribute, wxID_ANY, _("D"));
    SpinAttributeEffectRateD = new wxSpinCtrl(pnAttribute, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAttributeEffectRateDPercent = new wxStaticText(pnAttribute, wxID_ANY, _("%"));
    szAttributeEffectRateE = new wxStaticText(pnAttribute, wxID_ANY, _("E"));
    SpinAttributeEffectRateE = new wxSpinCtrl(pnAttribute, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAttributeEffectRateEPercent = new wxStaticText(pnAttribute, wxID_ANY, _("%"));
    stState = new wxStaticText(pnState, wxID_ANY, _("States"));
    const wxString listState_choices[] = {
        _("<set by wxGlade>"),
    };
    listState = new wxListBox(pnState, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listState_choices, wxLB_SINGLE);
    btnStateMaxNumber = new wxButton(pnState, wxID_ANY, _("Max Number..."));
    tcStateName = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    const wxString chStateType_choices[] = {
        _("<set by wxGlade>"),
    };
    chStateType = new wxChoice(pnState, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chStateType_choices);
    const wxString chStateColor_choices[] = {
        _("<set by wxGlade>"),
    };
    chStateColor = new wxChoice(pnState, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chStateColor_choices);
    spinStatePriority = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    const wxString chStateActionRange_choices[] = {
        _("<set by wxGlade>"),
    };
    chStateActionRange = new wxChoice(pnState, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chStateActionRange_choices);
    stStateEffectRateA = new wxStaticText(pnState, wxID_ANY, _("A"));
    spinStateEffectRateA = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateEffectRateAPercent = new wxStaticText(pnState, wxID_ANY, _("%"));
    stStateEffectRateB = new wxStaticText(pnState, wxID_ANY, _("B"));
    spinStateEffectRateB = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateEffectRateBPercent = new wxStaticText(pnState, wxID_ANY, _("%"));
    stStateEffectRateC = new wxStaticText(pnState, wxID_ANY, _("C"));
    spinStateEffectRateC = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateEffectRateCPercent = new wxStaticText(pnState, wxID_ANY, _("%"));
    stStateEffectRateD = new wxStaticText(pnState, wxID_ANY, _("D"));
    spinStateEffectRateD = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateEffectRateDPercent = new wxStaticText(pnState, wxID_ANY, _("%"));
    stStateEffectRateE = new wxStaticText(pnState, wxID_ANY, _("E"));
    spinStateEffectRateE = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateEffectRateEPercent = new wxStaticText(pnState, wxID_ANY, _("%"));
    stStateNaturalHealingAfter = new wxStaticText(pnState, wxID_ANY, _("After"));
    spinStateNaturalHealingTurn = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateNaturalHealingTurn = new wxStaticText(pnState, wxID_ANY, _("turn,"));
    spinStateNaturalHealingHealChance = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateNaturalHealingHealChance = new wxStaticText(pnState, wxID_ANY, _("% heal chance"));
    stStateAfterHitHealingPhysicalAttack = new wxStaticText(pnState, wxID_ANY, _("Physical attack"));
    spinStateAfterHitHealingHealChance = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateAfterHitHealingHealChance = new wxStaticText(pnState, wxID_ANY, _("% heal chance"));
    chbStateDecreaseAttack = new wxCheckBox(pnState, wxID_ANY, _("Attack"));
    chbStateDecreaseIntelligence = new wxCheckBox(pnState, wxID_ANY, _("Intelligence"));
    chbStateDecreaseDefense = new wxCheckBox(pnState, wxID_ANY, _("Defense"));
    chbStateDecreaseAgility = new wxCheckBox(pnState, wxID_ANY, _("Agility"));
    spinStateAttackChance = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateAttackChance = new wxStaticText(pnState, wxID_ANY, _("%"));
    chbStateSkillExceptionsAttackChance = new wxCheckBox(pnState, wxID_ANY, _("Attack chance"));
    spinStateSkillExceptionsAttackChance = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateSkillExceptionsAttackChance = new wxStaticText(pnState, wxID_ANY, _("on special parameter"));
    chbStateSkillExceptionsSkillChance = new wxCheckBox(pnState, wxID_ANY, _("Skill chance"));
    spinStateSkillExceptionsSkillChance = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateSkillExceptionsSkillChance = new wxStaticText(pnState, wxID_ANY, _("on special parameter"));
    stStateMessageActorHit = new wxStaticText(pnState, wxID_ANY, _("(Actor name)"));
    tcStateMessageActorHit = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    stStateMessageEnemyHit = new wxStaticText(pnState, wxID_ANY, _("(Enemy name)"));
    tcStateMessageEnemyHit = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    stStateMessageAlreadyInState = new wxStaticText(pnState, wxID_ANY, _("(Affected name)"));
    tcStateMessageAlreadyInState = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    stStateMessageNormalState = new wxStaticText(pnState, wxID_ANY, _("(Affected name)"));
    tcStateMessageNormalState = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    stStateMessageRecover = new wxStaticText(pnState, wxID_ANY, _("(Affected name)"));
    tcStateMessageRecover = new wxTextCtrl(pnState, wxID_ANY, wxEmptyString);
    stStateHPReductionInEveryTurnMax = new wxStaticText(pnState, wxID_ANY, _("Max"));
    spinStateHPReductionInEveryTurnMax = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateHPReductionInEveryTurnPercentPlus = new wxStaticText(pnState, wxID_ANY, _("% +"));
    spinStateHPReductionInEveryTurnHP = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateHPReductionInEveryTurnHP = new wxStaticText(pnState, wxID_ANY, _("HP"));
    spinStateHPReductionOnMoveSteps = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateHPReductionOnMoveSteps = new wxStaticText(pnState, wxID_ANY, _("every step"));
    spinStateHPReductionOnMoveHP = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateHPReductionOnMoveHP = new wxStaticText(pnState, wxID_ANY, _("HP"));
    stStateMPReductionInEveryTurnMax = new wxStaticText(pnState, wxID_ANY, _("Max"));
    spinStateMPReductionInEveryTurnMax = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateMPReductionInEveryTurnPercentPlus = new wxStaticText(pnState, wxID_ANY, _("% +"));
    spinStateMPReductionInEveryTurnMP = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateMPReductionInEveryTurnMP = new wxStaticText(pnState, wxID_ANY, _("MP"));
    spinStateMPReductionOnMoveSteps = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateMPReductionOnMoveSteps = new wxStaticText(pnState, wxID_ANY, _("every step"));
    spinStateMPReductionOnMoveMP = new wxSpinCtrl(pnState, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stStateMPReductionOnMoveMP = new wxStaticText(pnState, wxID_ANY, _("MP"));
    stAnimation = new wxStaticText(pnAnimation, wxID_ANY, _("Animations"));
    const wxString listAnimation_choices[] = {
        _("<set by wxGlade>"),
    };
    listAnimation = new wxListBox(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listAnimation_choices, wxLB_SINGLE);
    btnAnimationMaxNumber = new wxButton(pnAnimation, wxID_ANY, _("Max Number..."));
    stAnimationName = new wxTextCtrl(pnAnimation, wxID_ANY, wxEmptyString);
    tcAnimationGraphic = new wxTextCtrl(pnAnimation, wxID_ANY, wxEmptyString);
    btnAnimationGraphic = new wxButton(pnAnimation, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString chEnemyTargetTest_choices[] = {
        _("<set by wxGlade>"),
    };
    chEnemyTargetTest = new wxChoice(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chEnemyTargetTest_choices);
    spinAnimationNumberOfFrames = new wxSpinCtrl(pnAnimation, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    szAnimationFramesPrevious = new wxButton(pnAnimation, wxID_ANY, _("&Previous"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString listAnimationFrames_choices[] = {
        _("<set by wxGlade>"),
    };
    listAnimationFrames = new wxListBox(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listAnimationFrames_choices, wxLB_SINGLE);
    btnAnimationFramesNext = new wxButton(pnAnimation, wxID_ANY, _("&Next"), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    lcAnimationTimeline = new wxListCtrl(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN|wxLC_REPORT);
    bmpAnimationCanvas = new wxStaticBitmap(pnAnimation, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    const wxString chAnimationRange_choices[] = {
        _("<set by wxGlade>"),
    };
    chAnimationRange = new wxChoice(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chAnimationRange_choices);
    const wxString chAnimationYOrdinate_choices[] = {
        _("<set by wxGlade>"),
    };
    chAnimationYOrdinate = new wxChoice(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chAnimationYOrdinate_choices);
    chbAnimationSnapToGrid = new wxCheckBox(pnAnimation, wxID_ANY, _("Snap to grid"));
    btnAnimationLikePrevious = new wxButton(pnAnimation, wxID_ANY, _("Like previous"));
    btnAnimationEdit = new wxButton(pnAnimation, wxID_ANY, _("Edit..."));
    btnAnimationComplete = new wxButton(pnAnimation, wxID_ANY, _("Complete..."));
    btnAnimationMakeAll = new wxButton(pnAnimation, wxID_ANY, _("Make all..."));
    btnAnimationPlay = new wxButton(pnAnimation, wxID_ANY, _("Play"));
    const wxString listAnimationGraphic_choices[] = {
        _("<set by wxGlade>"),
    };
    listAnimationGraphic = new wxListBox(pnAnimation, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listAnimationGraphic_choices, wxLB_HSCROLL|wxLB_MULTIPLE);
    stTerrain = new wxStaticText(pnTerrain, wxID_ANY, _("Terrains"));
    const wxString listTerrain_choices[] = {
        _("<set by wxGlade>"),
    };
    listTerrain = new wxListBox(pnTerrain, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTerrain_choices, wxLB_SINGLE);
    btnTerrainMaxNumber = new wxButton(pnTerrain, wxID_ANY, _("Max Number..."));
    tcTerrainName = new wxTextCtrl(pnTerrain, wxID_ANY, wxEmptyString);
    spinTerrainDamage = new wxSpinCtrl(pnTerrain, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    spinTerrainEncounterRate = new wxSpinCtrl(pnTerrain, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stTerrainEncounterRate = new wxStaticText(pnTerrain, wxID_ANY, _("%"));
    bmpTerrainBattleBackgroundGraphic = new wxStaticBitmap(pnTerrain, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    stTerrainBattleBackgroundGraphic = new wxStaticText(pnTerrain, wxID_ANY, _("Terrain background"));
    btnTerrainBattleBackgroundGraphic = new wxButton(pnTerrain, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    chbTerrainVehicleSmallShip = new wxCheckBox(pnTerrain, wxID_ANY, _("Small ship"));
    chbTerrainVehicleBigShip = new wxCheckBox(pnTerrain, wxID_ANY, _("Big ship"));
    chbTerrainVehicleAirShip = new wxCheckBox(pnTerrain, wxID_ANY, _("Airship"));
    chbTerrainVehicleShipCanLand = new wxCheckBox(pnTerrain, wxID_ANY, _("Ship can land"));
    const wxString rbTerrainTransparency_choices[] = {
        _("Normal"),
        _("1/3 transparent"),
        _("1/2 transparent"),
        _("Fully transparent"),
    };
    rbTerrainTransparency = new wxRadioBox(pnTerrain, wxID_ANY, _("Transparency"), wxDefaultPosition, wxDefaultSize, 4, rbTerrainTransparency_choices, 1, wxRA_SPECIFY_COLS);
    stTileset = new wxStaticText(pnTileset, wxID_ANY, _("Tilesets"));
    const wxString listTileset_choices[] = {
        _("<set by wxGlade>"),
    };
    listTileset = new wxListBox(pnTileset, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTileset_choices, wxLB_SINGLE);
    btnTilesetMaxNumber = new wxButton(pnTileset, wxID_ANY, _("Max Number..."));
    tcTilesetName = new wxTextCtrl(pnTileset, wxID_ANY, wxEmptyString);
    tcTilesetGraphic = new wxTextCtrl(pnTileset, wxID_ANY, wxEmptyString);
    btnTilesetLowerLayerTerrainType = new wxButton(nbTilesetLowerLayer, wxID_ANY, _("Terrain type"));
    btnTilesetLowerLayerBlocking = new wxButton(nbTilesetLowerLayer, wxID_ANY, _("Blocking"));
    btnTilesetLowerLayerFourDirections = new wxButton(nbTilesetLowerLayer, wxID_ANY, _("Four directions"));
    btnTilesetLowerLayerChangeEverything = new wxButton(nbTilesetLowerLayer, wxID_ANY, _("Change everything to..."));
    bmpTilesetWaterAnimation = new wxStaticBitmap(nbTilesetLowerLayer, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    const wxString rbTilesetWaterAnimationSequence_choices[] = {
        _("1-2-3-2"),
        _("1-2-3"),
    };
    rbTilesetWaterAnimationSequence = new wxRadioBox(nbTilesetLowerLayer, wxID_ANY, _("Sequence"), wxDefaultPosition, wxDefaultSize, 2, rbTilesetWaterAnimationSequence_choices, 1, wxRA_SPECIFY_COLS);
    const wxString rbTilesetWaterAnimationSpeed_choices[] = {
        _("Slow"),
        _("Fast"),
    };
    rbTilesetWaterAnimationSpeed = new wxRadioBox(nbTilesetLowerLayer, wxID_ANY, _("Speed"), wxDefaultPosition, wxDefaultSize, 2, rbTilesetWaterAnimationSpeed_choices, 1, wxRA_SPECIFY_COLS);
    const wxString listTilesetLowerLayerGraphic_choices[] = {
        _("<set by wxGlade>"),
    };
    listTilesetLowerLayerGraphic = new wxListBox(nbTilesetLowerLayer, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTilesetLowerLayerGraphic_choices, wxLB_SINGLE);
    const wxString listTilesetLowerLayerTerrain_choices[] = {
        _("<set by wxGlade>"),
    };
    listTilesetLowerLayerTerrain = new wxListBox(nbTilesetLowerLayer, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTilesetLowerLayerTerrain_choices, wxLB_SINGLE);
    btnTileseUpperLayerModifyBlocking = new wxButton(nbTilesetUpperLayer, wxID_ANY, _("Blocking"));
    btnTileseUpperLayerModifyFourDirections = new wxButton(nbTilesetUpperLayer, wxID_ANY, _("Four directions"));
    btnTileseUpperLayerModifyCounterFlag = new wxButton(nbTilesetUpperLayer, wxID_ANY, _("Counter flag"));
    const wxString listTilesetUpperLayerGraphic_choices[] = {
        _("<set by wxGlade>"),
    };
    listTilesetUpperLayerGraphic = new wxListBox(nbTilesetUpperLayer, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listTilesetUpperLayerGraphic_choices, wxLB_SINGLE);
    stTextBattleStartBattle = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleStartBattle = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattlePriorityAttack = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleSuccessfulEscape = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleFailedEscape = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleVictory = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleDeadGroup = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleExperience = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(X)"));
    tcTextBattleExperience = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleObtainedMoney1 = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleObtainedMoney = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(X) (Currency)"));
    TextBattleObtainedMoney2 = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleObtainedObject = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Item name)"));
    tcTextBattleObtainedObject = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleNormalAttack = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(User name)"));
    tcTextBattleNormalAttack = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleActorDeath = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    tcTextBattleEnemyDeath = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleDefense = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(User name)"));
    tcTextBattleDefense = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleStateControl = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleStateControl = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleStrengthGain = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleStrengthGain = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleAutodestruction = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleAutodestruction = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleEnemyEscape = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleEnemyEscape = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleTransformation = new wxStaticText(pnTextBattleMessages1And2, wxID_ANY, _("(Enemy name)"));
    tcTextBattleTransformation = new wxTextCtrl(pnTextBattleMessages1And2, wxID_ANY, wxEmptyString);
    stTextBattleActorAttack = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Enemy name) (X)"));
    tcTextBattleActorAttack = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleFailedActorAttack = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Enemy name)"));
    tcTextBattleFailedActorAttack = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleEnemyAttack = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Actor name) (X)"));
    tcTextBattleEnemyAttack = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleFailedEnemyAttack = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Actor name)"));
    tcTextBattleFailedEnemyAttack = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleFailedSkillA = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name)"));
    tcTextBattleFailedSkillA = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleFailedSkillB = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name)"));
    tcTextBattleFailedSkillB = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleFailedSkillC = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name)"));
    tcTextBattleFailedSkillC = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleEvadePsysicalAttack = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Affected name)"));
    tcTextBattleEvadePsysicalAttack = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleUseItem = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Object name)"));
    tcTextBattleUseItem = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleRecoverHP = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (HP cost) (X)"));
    tcTextBattleRecoverHP = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleParameterUp = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Parameter cost) (X)"));
    tcTextBattleParameterUp = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleParameterDown = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Parameter cost) (X)"));
    tcTextBattleParameterDown = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleParameterAbsorptionAllied = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Parameter cost) (X)"));
    tcTextBattleParameterAbsorptionAllied = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleParameterAbsorptionEnemy = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Parameter cost) (X)"));
    tcTextBattleParameterAbsorptionEnemy = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleDefenseUp = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Defense)"));
    tcTextBattleDefenseUp = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleDefenseDown = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(User name) (Defense)"));
    tcTextBattleDefenseDown = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleLevelUp = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Actor name) (Level) (X)"));
    tcTextBattleLevelUp = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    stTextBattleLearnSkill = new wxStaticText(pnTextBattleMessages3And4, wxID_ANY, _("(Skill name)"));
    tcTextBattleLearnSkill = new wxTextCtrl(pnTextBattleMessages3And4, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesABuySelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesABuySelectionSecondTimeAndLater = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesABuy = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesASell = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesAExit = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesAItemToBuySelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesAItemToBuyNumberSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesABuyCompleted = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesAItemToSellSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesAItemToSellNumberSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesASellCompleted = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBBuySelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBBuySelectionSecondTimeAndLater = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBBuy = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBSell = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBExit = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBItemToBuySelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBItemToBuyNumberSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBBuyCompleted = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBItemToSellSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBItemToSellNumberSelection = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesBSellCompleted = new wxTextCtrl(pnTextCommerceMessages, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCBuySelection = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCBuySelectionSecondTimeAndLater = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCBuy = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCSell = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCExit = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCItemToBuySelection = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCItemToBuyNumberSelection = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCBuyCompleted = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCItemToSellSelection = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCItemToSellNumberSelection = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceMessagesCSellCompleted = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesASelectedInn1 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    stTextInnMessagesASelectedInn = new wxStaticText(pnTextCommerceAndInn, wxID_ANY, _("(X) (Currency)"));
    tcTextInnMessagesASelectedInn2 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesASelectedInn3 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesAStay = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesADontStay = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesBSelectedInn1 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    stTextInnMessagesBSelectedInn = new wxStaticText(pnTextCommerceAndInn, wxID_ANY, _("(X) (Currency)"));
    tcTextInnMessagesBSelectedInn2 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesBSelectedInn3 = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesBStay = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextInnMessagesBDontStay = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommercePossessedItems = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceEquipedItems = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextCommerceCurrency = new wxTextCtrl(pnTextCommerceAndInn, wxID_ANY, wxEmptyString);
    tcTextLevel = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextLevelShorter = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextHP = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextHPShorter = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextMP = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextMPShorter = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextNormal = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextEXPShorter = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextMPCost = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextWeapons = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextAttack = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextShield = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextDefense = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextArmor = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextIntelligence = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextHelmet = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextAgility = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextOther = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandFight = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandAttack = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandEquipment = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandNewGame = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandAutomatic = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandDefense = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandSave = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandLoad = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandEscape = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandObjects = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandExit = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandEnd = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCommandSkills = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextSaveSlotSelection = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextLoadSlotSelection = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextConfirmExit = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextFile = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextOK = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    tcTextCancel = new wxTextCtrl(pnTextParametersAndOther, wxID_ANY, wxEmptyString);
    bmpVehicleGraphicSmallShip = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnVehicleGraphicSmallShip = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpVehicleGraphicBigShip = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnVehicleGraphicBigShip = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpVehicleGraphicAirship = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnVehicleGraphicAirship = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpSystemTitleGraphic = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnSystemTitleGraphic = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpSystemGameOverGraphic = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnSystemGameOverGraphic = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString chSystemStartingPartyActor1_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartingPartyActor1 = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartingPartyActor1_choices);
    const wxString chSystemStartingPartyActor2_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartingPartyActor2 = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartingPartyActor2_choices);
    const wxString chSystemStartingPartyActor3_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartingPartyActor3 = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartingPartyActor3_choices);
    const wxString chSystemStartingPartyActor4_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartingPartyActor4 = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartingPartyActor4_choices);
    tcSystemMusicTitle = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicTitle = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicSmallShip = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicSmallShip = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicBattle = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicBattle = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicBigShip = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicBigShip = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicVictory = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicVictory = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicAirship = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicAirship = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicInn = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicInn = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemMusicGameOver = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemMusicGameOver = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundCursor = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundCursor = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundStartBattle = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundStartBattle = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundActorDamage = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundActorDamage = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundOK = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundOK = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundEscape = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundEscape = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundDodge = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundDodge = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundCancel = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundCancel = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundEnemyAttack = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundEnemyAttack = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundEnemyDeath = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundEnemyDeath = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundError = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundError = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundEnemyDamage = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundEnemyDamage = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    tcSystemSoundUseObject = new wxTextCtrl(pnSystem, wxID_ANY, wxEmptyString);
    btnSystemSoundUseObject = new wxButton(pnSystem, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    bmpSystemGraphic = new wxStaticBitmap(pnSystem, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    btnSystemGraphic = new wxButton(pnSystem, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString chSystemTransitionTypeEraseScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemTransitionTypeEraseScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemTransitionTypeEraseScreen_choices);
    const wxString chSystemTransitionTypeShowScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemTransitionTypeShowScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemTransitionTypeShowScreen_choices);
    const wxString chSystemStartBattleEraseScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartBattleEraseScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartBattleEraseScreen_choices);
    const wxString chSystemStartBattleShowScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemStartBattleShowScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemStartBattleShowScreen_choices);
    const wxString chSystemEndBattleEraseScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemEndBattleEraseScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemEndBattleEraseScreen_choices);
    const wxString chSystemEndBattleShowScreen_choices[] = {
        _("<set by wxGlade>"),
    };
    chSystemEndBattleShowScreen = new wxChoice(pnSystem, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSystemEndBattleShowScreen_choices);
    stCommonEvent = new wxStaticText(pnCommonEvent, wxID_ANY, _("Common events"));
    const wxString ListEvent_choices[] = {
        _("<set by wxGlade>"),
    };
    ListEvent = new wxListBox(pnCommonEvent, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, ListEvent_choices, wxLB_SINGLE);
    btnCommonEventMaxNumber = new wxButton(pnCommonEvent, wxID_ANY, _("Max Number..."));
    tcCommonEventName = new wxTextCtrl(pnCommonEvent, wxID_ANY, wxEmptyString);
    const wxString chCommonEventActivationConditions_choices[] = {
        _("<set by wxGlade>"),
    };
    chCommonEventActivationConditions = new wxChoice(pnCommonEvent, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chCommonEventActivationConditions_choices);
    chbCommonEventConditionActivationSwitch = new wxCheckBox(pnCommonEvent, wxID_ANY, wxEmptyString);
    tcCommonEventConditionActivationSwitch = new wxTextCtrl(pnCommonEvent, wxID_ANY, wxEmptyString);
    btnCommonEventConditionActivationSwitch = new wxButton(pnCommonEvent, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString ListCommonEventExecutionContent_choices[] = {
        _("<>"),
    };
    ListCommonEventExecutionContent = new wxListBox(pnCommonEvent, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, ListCommonEventExecutionContent_choices, wxLB_SINGLE);
    button_1 = new wxButton(this, wxID_ANY, _("BGM"), wxDefaultPosition, wxDefaultSize, wxBORDER_NONE|wxBU_EXACTFIT);
    btnOK = new wxButton(this, wxID_OK, wxEmptyString);
    btnCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
    btnApply = new wxButton(this, wxID_APPLY, wxEmptyString);
    btnHelp = new wxButton(this, wxID_HELP, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


void DialogDb::set_properties()
{
    // begin wxGlade: DialogDb::set_properties
    SetTitle(_("Database"));
    stActor->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listActor->SetMinSize(wxSize(50, 50));
    listActor->SetSelection(0);
    tcActorName->SetMinSize(wxSize(50, -1));
    tcActorTitle->SetMinSize(wxSize(50, -1));
    bmpWalkingGraphic->SetMinSize(wxSize(48, 64));
    spinActorInitialLevel->SetMinSize(wxSize(50, -1));
    spinActorMaxLevel->SetMinSize(wxSize(50, -1));
    chbActorCriticalHitRate->SetValue(1);
    spinActorCriticalHitRate->SetMinSize(wxSize(50, -1));
    chActorInitialWeapon->SetMinSize(wxSize(50, -1));
    chActorInitialWeapon->SetSelection(0);
    chActorInitialShield->SetMinSize(wxSize(50, -1));
    chActorInitialShield->SetSelection(0);
    chActorInitialArmor->SetMinSize(wxSize(50, -1));
    chActorInitialArmor->SetSelection(0);
    chActorInitialHelmet->SetMinSize(wxSize(50, -1));
    chActorInitialHelmet->SetSelection(0);
    chActorInitialAccessory->SetMinSize(wxSize(50, -1));
    chActorInitialAccessory->SetSelection(0);
    bmpActorFaceGraphic->SetMinSize(wxSize(96, 96));
    bmpActorMaxHP->SetMinSize(wxSize(100, 50));
    bmpActorMaxMP->SetMinSize(wxSize(100, 50));
    bmpActorAttack->SetMinSize(wxSize(100, 50));
    bmpActorDefense->SetMinSize(wxSize(100, 50));
    bmpActorIntelligence->SetMinSize(wxSize(100, 50));
    bmpActorAgility->SetMinSize(wxSize(100, 50));
    tcActorExperienceCurve->SetMinSize(wxSize(50, -1));
    chActorAnimationWithoutWeapons->SetMinSize(wxSize(50, -1));
    chActorAnimationWithoutWeapons->SetSelection(0);
    lcActorSkills->SetMinSize(wxSize(50, 50));
    tcActorSkillsBattleCommand->SetMinSize(wxSize(50,-1));
    listActorStateRates->SetMinSize(wxSize(50, 50));
    listActorStateRates->SetSelection(0);
    listActorAttributeRates->SetMinSize(wxSize(50, 50));
    listActorAttributeRates->SetSelection(0);
    stSkill->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listSkill->SetMinSize(wxSize(50, 50));
    listSkill->SetSelection(0);
    stSkillName->SetMinSize(wxSize(50,-1));
    chSkillType->SetMinSize(wxSize(50,-1));
    chSkillType->SetSelection(0);
    spinSkillMPCost->SetMinSize(wxSize(50, -1));
    tcSkillDescription->SetMinSize(wxSize(50, -1));
    chSkillTarget->SetMinSize(wxSize(50, -1));
    chSkillTarget->SetSelection(0);
    tcSkillCastMessage1->SetMinSize(wxSize(50, -1));
    tcSkillCastMessage2->SetMinSize(wxSize(50, -1));
    tcSkillFailMessage->SetMinSize(wxSize(50, -1));
    bmpSkillAnimation->SetMinSize(wxSize(160, 120));
    chSkillAnimation->SetMinSize(wxSize(50, -1));
    chSkillAnimation->SetSelection(0);
    slSkillAttackInfluence->SetMinSize(wxSize(50, -1));
    slSkillMagicInfluence->SetMinSize(wxSize(50, -1));
    slSkillVariance->SetMinSize(wxSize(50, -1));
    spinSkillEffectRate->SetMinSize(wxSize(50, -1));
    spinSkillSuccessRate->SetMinSize(wxSize(50, -1));
    listSkillChangeStatus->SetMinSize(wxSize(50, 50));
    listSkillChangeStatus->SetSelection(0);
    listSkillAttributes->SetMinSize(wxSize(50, 50));
    listSkillAttributes->SetSelection(0);
    stItem->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listItem->SetMinSize(wxSize(50, 50));
    listItem->SetSelection(0);
    tcItemName->SetMinSize(wxSize(50, -1));
    chItemType->SetMinSize(wxSize(50, -1));
    chItemType->SetSelection(0);
    spinItemCost->SetMinSize(wxSize(50, -1));
    chItemTimesUsed->SetMinSize(wxSize(50, -1));
    chItemTimesUsed->SetSelection(0);
    tcItemDescription->SetMinSize(wxSize(50, -1));
    rbxActionRange->SetSelection(0);
    listItemCanBeUsedBy->SetMinSize(wxSize(50, 50));
    listItemCanBeUsedBy->SetSelection(0);
    listItemChangeStates->SetMinSize(wxSize(50, 50));
    listItemChangeStates->SetSelection(0);
    spinItemHPRecoverPercent->SetMinSize(wxSize(50, -1));
    spinItemHPRecoverPoints->SetMinSize(wxSize(50, -1));
    spinItemMPRecoverPercent->SetMinSize(wxSize(50, -1));
    spinItemMPRecoverPoints->SetMinSize(wxSize(50, -1));
    stEnemy->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listEnemy->SetMinSize(wxSize(50, 50));
    listEnemy->SetSelection(0);
    tcEnemyName->SetMinSize(wxSize(50, -1));
    spinEnemyMaxHP->SetMinSize(wxSize(50, -1));
    spinEnemyAttack->SetMinSize(wxSize(50, -1));
    spinEnemyIntelligence->SetMinSize(wxSize(50, -1));
    spinEnemyMaxMP->SetMinSize(wxSize(50, -1));
    spinEnemyDefense->SetMinSize(wxSize(50, -1));
    spinEnemyAgility->SetMinSize(wxSize(50, -1));
    bmpEnemyGraphic->SetMinSize(wxSize(160, 120));
    spinEnemyGetEXP->SetMinSize(wxSize(50, -1));
    spinEnemyGetMoney->SetMinSize(wxSize(50, -1));
    chEnemyGetItem->SetMinSize(wxSize(50, -1));
    chEnemyGetItem->SetSelection(0);
    spinEnemyGetItemChance->SetMinSize(wxSize(50, -1));
    spinEnemyCriticalHitRate->SetMinSize(wxSize(50, -1));
    lcEnemyActions->SetMinSize(wxSize(50, 50));
    listAttributesResistance->SetMinSize(wxSize(50, 50));
    listAttributesResistance->SetSelection(0);
    listStatesResistance->SetMinSize(wxSize(50, 50));
    listStatesResistance->SetSelection(0);
    stTroop->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listTroop->SetMinSize(wxSize(50, 50));
    listTroop->SetSelection(0);
    tcTroopName->SetMinSize(wxSize(50, -1));
    bmpTroop->SetMinSize(wxSize(320, 160));
    listTroopMonster->SetMinSize(wxSize(50, 50));
    listTroopMonster->SetSelection(0);
    listTroopEncountersOn->SetMinSize(wxSize(50, 50));
    listTroopEncountersOn->SetSelection(0);
    tcTroopBattleEventsConditions->SetMinSize(wxSize(50, -1));
    listTroopBattleEvents->SetMinSize(wxSize(50, 50));
    listTroopBattleEvents->SetSelection(0);
    stAttribute->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listAttribute->SetMinSize(wxSize(50, 50));
    listAttribute->SetSelection(0);
    tcAttributeName->SetMinSize(wxSize(50, -1));
    rbAttributeClassification->SetSelection(0);
    SpinAttributeEffectRateA->SetMinSize(wxSize(50, -1));
    SpinAttributeEffectRateB->SetMinSize(wxSize(50, -1));
    SpinAttributeEffectRateC->SetMinSize(wxSize(50, -1));
    SpinAttributeEffectRateD->SetMinSize(wxSize(50, -1));
    SpinAttributeEffectRateE->SetMinSize(wxSize(50, -1));
    stState->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listState->SetMinSize(wxSize(50, 50));
    listState->SetSelection(0);
    tcStateName->SetMinSize(wxSize(50, -1));
    chStateType->SetMinSize(wxSize(50, -1));
    chStateType->SetSelection(0);
    chStateColor->SetMinSize(wxSize(50, -1));
    chStateColor->SetSelection(0);
    spinStatePriority->SetMinSize(wxSize(50, -1));
    chStateActionRange->SetMinSize(wxSize(50, -1));
    chStateActionRange->SetSelection(0);
    spinStateEffectRateA->SetMinSize(wxSize(50, -1));
    spinStateEffectRateB->SetMinSize(wxSize(50, -1));
    spinStateEffectRateC->SetMinSize(wxSize(50, -1));
    spinStateEffectRateD->SetMinSize(wxSize(50, -1));
    spinStateEffectRateE->SetMinSize(wxSize(50, -1));
    spinStateNaturalHealingTurn->SetMinSize(wxSize(50, -1));
    spinStateNaturalHealingHealChance->SetMinSize(wxSize(50, -1));
    spinStateAfterHitHealingHealChance->SetMinSize(wxSize(50, -1));
    spinStateAttackChance->SetMinSize(wxSize(50, -1));
    spinStateSkillExceptionsAttackChance->SetMinSize(wxSize(50, -1));
    spinStateSkillExceptionsSkillChance->SetMinSize(wxSize(50, -1));
    tcStateMessageActorHit->SetMinSize(wxSize(50, -1));
    tcStateMessageEnemyHit->SetMinSize(wxSize(50, -1));
    tcStateMessageAlreadyInState->SetMinSize(wxSize(50, -1));
    tcStateMessageNormalState->SetMinSize(wxSize(50, -1));
    tcStateMessageRecover->SetMinSize(wxSize(50, -1));
    spinStateHPReductionInEveryTurnMax->SetMinSize(wxSize(50, -1));
    spinStateHPReductionInEveryTurnHP->SetMinSize(wxSize(50, -1));
    spinStateHPReductionOnMoveSteps->SetMinSize(wxSize(75, -1));
    spinStateHPReductionOnMoveHP->SetMinSize(wxSize(75, -1));
    spinStateMPReductionInEveryTurnMax->SetMinSize(wxSize(50, -1));
    spinStateMPReductionInEveryTurnMP->SetMinSize(wxSize(50, -1));
    spinStateMPReductionOnMoveSteps->SetMinSize(wxSize(50, -1));
    spinStateMPReductionOnMoveMP->SetMinSize(wxSize(50, -1));
    stAnimation->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listAnimation->SetMinSize(wxSize(50, 50));
    listAnimation->SetSelection(0);
    stAnimationName->SetMinSize(wxSize(50, -1));
    tcAnimationGraphic->SetMinSize(wxSize(50, -1));
    chEnemyTargetTest->SetMinSize(wxSize(50, -1));
    chEnemyTargetTest->SetSelection(0);
    spinAnimationNumberOfFrames->SetMinSize(wxSize(50, -1));
    listAnimationFrames->SetMinSize(wxSize(50, 50));
    listAnimationFrames->SetSelection(0);
    lcAnimationTimeline->SetMinSize(wxSize(50, 50));
    bmpAnimationCanvas->SetMinSize(wxSize(320, 160));
    bmpAnimationCanvas->SetBackgroundColour(wxColour(0, 0, 0));
    chAnimationRange->SetMinSize(wxSize(50, -1));
    chAnimationRange->SetSelection(0);
    chAnimationYOrdinate->SetMinSize(wxSize(50, -1));
    chAnimationYOrdinate->SetSelection(0);
    listAnimationGraphic->SetMinSize(wxSize(-1,96));
    listAnimationGraphic->SetSelection(0);
    stTerrain->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listTerrain->SetMinSize(wxSize(50, 50));
    listTerrain->SetSelection(0);
    tcTerrainName->SetMinSize(wxSize(50, -1));
    spinTerrainDamage->SetMinSize(wxSize(50, -1));
    spinTerrainEncounterRate->SetMinSize(wxSize(50, -1));
    bmpTerrainBattleBackgroundGraphic->SetMinSize(wxSize(320, 160));
    rbTerrainTransparency->SetSelection(0);
    stTileset->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    listTileset->SetMinSize(wxSize(50, 50));
    listTileset->SetSelection(0);
    tcTilesetName->SetMinSize(wxSize(50, -1));
    tcTilesetGraphic->SetMinSize(wxSize(50, -1));
    bmpTilesetWaterAnimation->SetMinSize(wxSize(32, 32));
    rbTilesetWaterAnimationSequence->SetSelection(0);
    rbTilesetWaterAnimationSpeed->SetSelection(0);
    listTilesetLowerLayerGraphic->SetMinSize(wxSize(192, 50));
    listTilesetLowerLayerGraphic->SetSelection(0);
    listTilesetLowerLayerTerrain->SetMinSize(wxSize(50, 50));
    listTilesetLowerLayerTerrain->SetSelection(0);
    listTilesetUpperLayerGraphic->SetMinSize(wxSize(192, 50));
    listTilesetUpperLayerGraphic->SetSelection(0);
    tcTextBattleStartBattle->SetMinSize(wxSize(50, -1));
    tcTextBattlePriorityAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleSuccessfulEscape->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedEscape->SetMinSize(wxSize(50, -1));
    tcTextBattleVictory->SetMinSize(wxSize(50, -1));
    tcTextBattleDeadGroup->SetMinSize(wxSize(50, -1));
    tcTextBattleExperience->SetMinSize(wxSize(50, -1));
    tcTextBattleObtainedMoney1->SetMinSize(wxSize(50, -1));
    TextBattleObtainedMoney2->SetMinSize(wxSize(50, -1));
    tcTextBattleObtainedObject->SetMinSize(wxSize(50, -1));
    tcTextBattleNormalAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleActorDeath->SetMinSize(wxSize(50, -1));
    tcTextBattleEnemyDeath->SetMinSize(wxSize(50, -1));
    tcTextBattleDefense->SetMinSize(wxSize(50, -1));
    tcTextBattleStateControl->SetMinSize(wxSize(50, -1));
    tcTextBattleStrengthGain->SetMinSize(wxSize(50, -1));
    tcTextBattleAutodestruction->SetMinSize(wxSize(50, -1));
    tcTextBattleEnemyEscape->SetMinSize(wxSize(50, -1));
    tcTextBattleTransformation->SetMinSize(wxSize(50, -1));
    tcTextBattleActorAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedActorAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleEnemyAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedEnemyAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedSkillA->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedSkillB->SetMinSize(wxSize(50, -1));
    tcTextBattleFailedSkillC->SetMinSize(wxSize(50, -1));
    tcTextBattleEvadePsysicalAttack->SetMinSize(wxSize(50, -1));
    tcTextBattleUseItem->SetMinSize(wxSize(50, -1));
    tcTextBattleRecoverHP->SetMinSize(wxSize(50, -1));
    tcTextBattleParameterUp->SetMinSize(wxSize(50, -1));
    tcTextBattleParameterDown->SetMinSize(wxSize(50, -1));
    tcTextBattleParameterAbsorptionAllied->SetMinSize(wxSize(50, -1));
    tcTextBattleParameterAbsorptionEnemy->SetMinSize(wxSize(50, -1));
    tcTextBattleDefenseUp->SetMinSize(wxSize(50, -1));
    tcTextBattleDefenseDown->SetMinSize(wxSize(50, -1));
    tcTextBattleLevelUp->SetMinSize(wxSize(50, -1));
    tcTextBattleLearnSkill->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesABuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesABuySelectionSecondTimeAndLater->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesABuy->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesASell->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesAExit->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesAItemToBuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesAItemToBuyNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesABuyCompleted->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesAItemToSellSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesAItemToSellNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesASellCompleted->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBBuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBBuySelectionSecondTimeAndLater->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBBuy->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBSell->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBExit->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBItemToBuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBItemToBuyNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBBuyCompleted->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBItemToSellSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBItemToSellNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesBSellCompleted->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCBuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCBuySelectionSecondTimeAndLater->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCBuy->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCSell->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCExit->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCItemToBuySelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCItemToBuyNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCBuyCompleted->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCItemToSellSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCItemToSellNumberSelection->SetMinSize(wxSize(50, -1));
    tcTextCommerceMessagesCSellCompleted->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesASelectedInn1->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesASelectedInn2->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesASelectedInn3->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesAStay->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesADontStay->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesBSelectedInn1->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesBSelectedInn2->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesBSelectedInn3->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesBStay->SetMinSize(wxSize(50, -1));
    tcTextInnMessagesBDontStay->SetMinSize(wxSize(50, -1));
    tcTextCommercePossessedItems->SetMinSize(wxSize(50, -1));
    tcTextCommerceEquipedItems->SetMinSize(wxSize(50, -1));
    tcTextCommerceCurrency->SetMinSize(wxSize(50, -1));
    tcTextLevel->SetMinSize(wxSize(50, -1));
    tcTextLevelShorter->SetMinSize(wxSize(50, -1));
    tcTextHP->SetMinSize(wxSize(50, -1));
    tcTextHPShorter->SetMinSize(wxSize(50, -1));
    tcTextMP->SetMinSize(wxSize(50, -1));
    tcTextMPShorter->SetMinSize(wxSize(50, -1));
    tcTextNormal->SetMinSize(wxSize(50, -1));
    tcTextEXPShorter->SetMinSize(wxSize(50, -1));
    tcTextMPCost->SetMinSize(wxSize(50, -1));
    tcTextWeapons->SetMinSize(wxSize(50, -1));
    tcTextAttack->SetMinSize(wxSize(50, -1));
    tcTextShield->SetMinSize(wxSize(50, -1));
    tcTextDefense->SetMinSize(wxSize(50, -1));
    tcTextArmor->SetMinSize(wxSize(50, -1));
    tcTextIntelligence->SetMinSize(wxSize(50, -1));
    tcTextHelmet->SetMinSize(wxSize(50, -1));
    tcTextAgility->SetMinSize(wxSize(50, -1));
    tcTextOther->SetMinSize(wxSize(50, -1));
    tcTextCommandFight->SetMinSize(wxSize(50, -1));
    tcTextCommandAttack->SetMinSize(wxSize(50, -1));
    tcTextCommandEquipment->SetMinSize(wxSize(50, -1));
    tcTextCommandNewGame->SetMinSize(wxSize(50, -1));
    tcTextCommandAutomatic->SetMinSize(wxSize(50, -1));
    tcTextCommandDefense->SetMinSize(wxSize(50, -1));
    tcTextCommandSave->SetMinSize(wxSize(50, -1));
    tcTextCommandLoad->SetMinSize(wxSize(50, -1));
    tcTextCommandEscape->SetMinSize(wxSize(50, -1));
    tcTextCommandObjects->SetMinSize(wxSize(50, -1));
    tcTextCommandExit->SetMinSize(wxSize(50, -1));
    tcTextCommandEnd->SetMinSize(wxSize(50, -1));
    tcTextCommandSkills->SetMinSize(wxSize(50, -1));
    tcTextSaveSlotSelection->SetMinSize(wxSize(50, -1));
    tcTextLoadSlotSelection->SetMinSize(wxSize(50, -1));
    tcTextConfirmExit->SetMinSize(wxSize(50, -1));
    tcTextFile->SetMinSize(wxSize(50, -1));
    tcTextOK->SetMinSize(wxSize(50, -1));
    tcTextCancel->SetMinSize(wxSize(50, -1));
    bmpVehicleGraphicSmallShip->SetMinSize(wxSize(48, 64));
    bmpVehicleGraphicBigShip->SetMinSize(wxSize(48, 64));
    bmpVehicleGraphicAirship->SetMinSize(wxSize(48, 64));
    bmpSystemTitleGraphic->SetMinSize(wxSize(160, 120));
    bmpSystemGameOverGraphic->SetMinSize(wxSize(160, 120));
    chSystemStartingPartyActor1->SetMinSize(wxSize(50, -1));
    chSystemStartingPartyActor1->SetSelection(0);
    chSystemStartingPartyActor2->SetMinSize(wxSize(50, -1));
    chSystemStartingPartyActor2->SetSelection(0);
    chSystemStartingPartyActor3->SetMinSize(wxSize(50, -1));
    chSystemStartingPartyActor3->SetSelection(0);
    chSystemStartingPartyActor4->SetMinSize(wxSize(50, -1));
    chSystemStartingPartyActor4->SetSelection(0);
    tcSystemMusicTitle->SetMinSize(wxSize(50, -1));
    tcSystemMusicSmallShip->SetMinSize(wxSize(50, -1));
    tcSystemMusicBattle->SetMinSize(wxSize(50, -1));
    tcSystemMusicBigShip->SetMinSize(wxSize(50, -1));
    tcSystemMusicVictory->SetMinSize(wxSize(50, -1));
    tcSystemMusicAirship->SetMinSize(wxSize(50, -1));
    tcSystemMusicInn->SetMinSize(wxSize(50, -1));
    tcSystemMusicGameOver->SetMinSize(wxSize(50, -1));
    tcSystemSoundCursor->SetMinSize(wxSize(50, -1));
    tcSystemSoundStartBattle->SetMinSize(wxSize(50, -1));
    tcSystemSoundActorDamage->SetMinSize(wxSize(50, -1));
    tcSystemSoundOK->SetMinSize(wxSize(50, -1));
    tcSystemSoundEscape->SetMinSize(wxSize(50, -1));
    tcSystemSoundDodge->SetMinSize(wxSize(50, -1));
    tcSystemSoundCancel->SetMinSize(wxSize(50, -1));
    tcSystemSoundEnemyAttack->SetMinSize(wxSize(50, -1));
    tcSystemSoundEnemyDeath->SetMinSize(wxSize(50, -1));
    tcSystemSoundError->SetMinSize(wxSize(50, -1));
    tcSystemSoundEnemyDamage->SetMinSize(wxSize(50, -1));
    tcSystemSoundUseObject->SetMinSize(wxSize(50, -1));
    bmpSystemGraphic->SetMinSize(wxSize(160, 80));
    chSystemTransitionTypeEraseScreen->SetMinSize(wxSize(50, -1));
    chSystemTransitionTypeEraseScreen->SetSelection(0);
    chSystemTransitionTypeShowScreen->SetMinSize(wxSize(50, -1));
    chSystemTransitionTypeShowScreen->SetSelection(0);
    chSystemStartBattleEraseScreen->SetMinSize(wxSize(50, -1));
    chSystemStartBattleEraseScreen->SetSelection(0);
    chSystemStartBattleShowScreen->SetMinSize(wxSize(50, -1));
    chSystemStartBattleShowScreen->SetSelection(0);
    chSystemEndBattleEraseScreen->SetMinSize(wxSize(50, -1));
    chSystemEndBattleEraseScreen->SetSelection(0);
    chSystemEndBattleShowScreen->SetMinSize(wxSize(50, -1));
    chSystemEndBattleShowScreen->SetSelection(0);
    stCommonEvent->SetFont(wxFont(12, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    ListEvent->SetMinSize(wxSize(50, 50));
    ListEvent->SetSelection(0);
    tcCommonEventName->SetMinSize(wxSize(50, -1));
    chCommonEventActivationConditions->SetMinSize(wxSize(50, -1));
    chCommonEventActivationConditions->SetSelection(0);
    tcCommonEventConditionActivationSwitch->SetMinSize(wxSize(50, -1));
    ListCommonEventExecutionContent->SetMinSize(wxSize(50, 50));
    ListCommonEventExecutionContent->SetSelection(0);
    button_1->SetMinSize(wxSize(-1, -1));
    btnOK->SetDefault();
    // end wxGlade
}


void DialogDb::do_layout()
{
    // begin wxGlade: DialogDb::do_layout
    wxBoxSizer* szDb = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szCommonEvent = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szCommonEventRight = new wxBoxSizer(wxVERTICAL);
    szCommonEventExecutionContents_staticbox->Lower();
    wxStaticBoxSizer* szCommonEventExecutionContents = new wxStaticBoxSizer(szCommonEventExecutionContents_staticbox, wxHORIZONTAL);
    wxBoxSizer* szCommonEventRightTop = new wxBoxSizer(wxHORIZONTAL);
    szCommonEventConditionActivationSwitch_staticbox->Lower();
    wxStaticBoxSizer* szCommonEventConditionActivationSwitch = new wxStaticBoxSizer(szCommonEventConditionActivationSwitch_staticbox, wxHORIZONTAL);
    szCommonEventActivationConditions_staticbox->Lower();
    wxStaticBoxSizer* szCommonEventActivationConditions = new wxStaticBoxSizer(szCommonEventActivationConditions_staticbox, wxHORIZONTAL);
    szCommonEventName_staticbox->Lower();
    wxStaticBoxSizer* szCommonEventName = new wxStaticBoxSizer(szCommonEventName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szCommonEventLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szSystem = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szSystemBottom = new wxBoxSizer(wxHORIZONTAL);
    szSystemEndBattle_staticbox->Lower();
    wxStaticBoxSizer* szSystemEndBattle = new wxStaticBoxSizer(szSystemEndBattle_staticbox, wxVERTICAL);
    szSystemEndBattleShowScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemEndBattleShowScreen = new wxStaticBoxSizer(szSystemEndBattleShowScreen_staticbox, wxHORIZONTAL);
    szSystemEndBattleEraseScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemEndBattleEraseScreen = new wxStaticBoxSizer(szSystemEndBattleEraseScreen_staticbox, wxHORIZONTAL);
    szSystemStartBattle_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartBattle = new wxStaticBoxSizer(szSystemStartBattle_staticbox, wxVERTICAL);
    szSystemStartBattleShowScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartBattleShowScreen = new wxStaticBoxSizer(szSystemStartBattleShowScreen_staticbox, wxHORIZONTAL);
    szSystemStartBattleEraseScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartBattleEraseScreen = new wxStaticBoxSizer(szSystemStartBattleEraseScreen_staticbox, wxHORIZONTAL);
    szSystemTransitionType_staticbox->Lower();
    wxStaticBoxSizer* szSystemTransitionType = new wxStaticBoxSizer(szSystemTransitionType_staticbox, wxVERTICAL);
    szSystemTransitionTypeShowScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemTransitionTypeShowScreen = new wxStaticBoxSizer(szSystemTransitionTypeShowScreen_staticbox, wxHORIZONTAL);
    szSystemTransitionTypeEraseScreen_staticbox->Lower();
    wxStaticBoxSizer* szSystemTransitionTypeEraseScreen = new wxStaticBoxSizer(szSystemTransitionTypeEraseScreen_staticbox, wxHORIZONTAL);
    szSystemGraphic_staticbox->Lower();
    wxStaticBoxSizer* szSystemGraphic = new wxStaticBoxSizer(szSystemGraphic_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSystemMiddle = new wxBoxSizer(wxHORIZONTAL);
    szSystemSounds_staticbox->Lower();
    wxStaticBoxSizer* szSystemSounds = new wxStaticBoxSizer(szSystemSounds_staticbox, wxHORIZONTAL);
    wxGridSizer* gszSystemSounds = new wxGridSizer(4, 3, 0, 2);
    szSystemSoundUseObject_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundUseObject = new wxStaticBoxSizer(szSystemSoundUseObject_staticbox, wxHORIZONTAL);
    szSystemSoundEnemyDamage_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundEnemyDamage = new wxStaticBoxSizer(szSystemSoundEnemyDamage_staticbox, wxHORIZONTAL);
    szSystemSoundError_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundError = new wxStaticBoxSizer(szSystemSoundError_staticbox, wxHORIZONTAL);
    szSystemSoundEnemyDeath_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundEnemyDeath = new wxStaticBoxSizer(szSystemSoundEnemyDeath_staticbox, wxHORIZONTAL);
    szSystemSoundEnemyAttack_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundEnemyAttack = new wxStaticBoxSizer(szSystemSoundEnemyAttack_staticbox, wxHORIZONTAL);
    szSystemSoundCancel_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundCancel = new wxStaticBoxSizer(szSystemSoundCancel_staticbox, wxHORIZONTAL);
    szSystemSoundDodge_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundDodge = new wxStaticBoxSizer(szSystemSoundDodge_staticbox, wxHORIZONTAL);
    szSystemSoundEscape_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundEscape = new wxStaticBoxSizer(szSystemSoundEscape_staticbox, wxHORIZONTAL);
    szSystemSoundOK_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundOK = new wxStaticBoxSizer(szSystemSoundOK_staticbox, wxHORIZONTAL);
    szSystemSoundActorDamage_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundActorDamage = new wxStaticBoxSizer(szSystemSoundActorDamage_staticbox, wxHORIZONTAL);
    szSystemSoundStartBattle_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundStartBattle = new wxStaticBoxSizer(szSystemSoundStartBattle_staticbox, wxHORIZONTAL);
    szSystemSoundCursor_staticbox->Lower();
    wxStaticBoxSizer* szSystemSoundCursor = new wxStaticBoxSizer(szSystemSoundCursor_staticbox, wxHORIZONTAL);
    szSystemMusic_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusic = new wxStaticBoxSizer(szSystemMusic_staticbox, wxHORIZONTAL);
    wxGridSizer* gszSystemMusic = new wxGridSizer(4, 2, 0, 2);
    szSystemMusicGameOver_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicGameOver = new wxStaticBoxSizer(szSystemMusicGameOver_staticbox, wxHORIZONTAL);
    szSystemMusicInn_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicInn = new wxStaticBoxSizer(szSystemMusicInn_staticbox, wxHORIZONTAL);
    szSystemMusicAirship_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicAirship = new wxStaticBoxSizer(szSystemMusicAirship_staticbox, wxHORIZONTAL);
    szSystemMusicVictory_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicVictory = new wxStaticBoxSizer(szSystemMusicVictory_staticbox, wxHORIZONTAL);
    szSystemMusicBigShip_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicBigShip = new wxStaticBoxSizer(szSystemMusicBigShip_staticbox, wxHORIZONTAL);
    szSystemMusicBattle_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicBattle = new wxStaticBoxSizer(szSystemMusicBattle_staticbox, wxHORIZONTAL);
    szSystemMusicSmallShip_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicSmallShip = new wxStaticBoxSizer(szSystemMusicSmallShip_staticbox, wxHORIZONTAL);
    szSystemMusicTitle_staticbox->Lower();
    wxStaticBoxSizer* szSystemMusicTitle = new wxStaticBoxSizer(szSystemMusicTitle_staticbox, wxHORIZONTAL);
    szSystemStartingParty_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartingParty = new wxStaticBoxSizer(szSystemStartingParty_staticbox, wxVERTICAL);
    szSystemStartingPartyActor4_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartingPartyActor4 = new wxStaticBoxSizer(szSystemStartingPartyActor4_staticbox, wxHORIZONTAL);
    szSystemStartingPartyActor3_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartingPartyActor3 = new wxStaticBoxSizer(szSystemStartingPartyActor3_staticbox, wxHORIZONTAL);
    szSystemStartingPartyActor2_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartingPartyActor2 = new wxStaticBoxSizer(szSystemStartingPartyActor2_staticbox, wxHORIZONTAL);
    szSystemStartingPartyActor1_staticbox->Lower();
    wxStaticBoxSizer* szSystemStartingPartyActor1 = new wxStaticBoxSizer(szSystemStartingPartyActor1_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSystemTop = new wxBoxSizer(wxHORIZONTAL);
    szSystemGameOverGraphic_staticbox->Lower();
    wxStaticBoxSizer* szSystemGameOverGraphic = new wxStaticBoxSizer(szSystemGameOverGraphic_staticbox, wxHORIZONTAL);
    szSystemTitleGraphic_staticbox->Lower();
    wxStaticBoxSizer* szSystemTitleGraphic = new wxStaticBoxSizer(szSystemTitleGraphic_staticbox, wxHORIZONTAL);
    szSystemVehicleGraphic_staticbox->Lower();
    wxStaticBoxSizer* szSystemVehicleGraphic = new wxStaticBoxSizer(szSystemVehicleGraphic_staticbox, wxHORIZONTAL);
    szVehicleGraphicAirship_staticbox->Lower();
    wxStaticBoxSizer* szVehicleGraphicAirship = new wxStaticBoxSizer(szVehicleGraphicAirship_staticbox, wxVERTICAL);
    szVehicleGraphicBigShip_staticbox->Lower();
    wxStaticBoxSizer* szVehicleGraphicBigShip = new wxStaticBoxSizer(szVehicleGraphicBigShip_staticbox, wxVERTICAL);
    szVehicleGraphicSmallShip_staticbox->Lower();
    wxStaticBoxSizer* szVehicleGraphicSmallShip = new wxStaticBoxSizer(szVehicleGraphicSmallShip_staticbox, wxVERTICAL);
    wxBoxSizer* szText = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTextParametersAndOther = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTextParametersAndOtherRight = new wxBoxSizer(wxVERTICAL);
    szTextSaveLoadExit_staticbox->Lower();
    wxStaticBoxSizer* szTextSaveLoadExit = new wxStaticBoxSizer(szTextSaveLoadExit_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSaveLoadExitLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTextSaveLoadExitCommands = new wxBoxSizer(wxHORIZONTAL);
    szTextCancel_staticbox->Lower();
    wxStaticBoxSizer* szTextCancel = new wxStaticBoxSizer(szTextCancel_staticbox, wxHORIZONTAL);
    szTextOK_staticbox->Lower();
    wxStaticBoxSizer* szTextOK = new wxStaticBoxSizer(szTextOK_staticbox, wxHORIZONTAL);
    szTextFile_staticbox->Lower();
    wxStaticBoxSizer* szTextFile = new wxStaticBoxSizer(szTextFile_staticbox, wxHORIZONTAL);
    szTextConfirmExit_staticbox->Lower();
    wxStaticBoxSizer* szTextConfirmExit = new wxStaticBoxSizer(szTextConfirmExit_staticbox, wxHORIZONTAL);
    szTextLoadSlotSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextLoadSlotSelection = new wxStaticBoxSizer(szTextLoadSlotSelection_staticbox, wxHORIZONTAL);
    szTextSaveSlotSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextSaveSlotSelection = new wxStaticBoxSizer(szTextSaveSlotSelection_staticbox, wxHORIZONTAL);
    szTextCommands_staticbox->Lower();
    wxStaticBoxSizer* szTextCommands = new wxStaticBoxSizer(szTextCommands_staticbox, wxHORIZONTAL);
    wxGridSizer* gszTextCommands = new wxGridSizer(4, 4, 0, 2);
    szTextCommandSkills_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandSkills = new wxStaticBoxSizer(szTextCommandSkills_staticbox, wxHORIZONTAL);
    szTextCommandEnd_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandEnd = new wxStaticBoxSizer(szTextCommandEnd_staticbox, wxHORIZONTAL);
    szTextCommandExit_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandExit = new wxStaticBoxSizer(szTextCommandExit_staticbox, wxHORIZONTAL);
    szTextCommandObjects_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandObjects = new wxStaticBoxSizer(szTextCommandObjects_staticbox, wxHORIZONTAL);
    szTextCommandEscape_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandEscape = new wxStaticBoxSizer(szTextCommandEscape_staticbox, wxHORIZONTAL);
    szTextCommandLoad_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandLoad = new wxStaticBoxSizer(szTextCommandLoad_staticbox, wxHORIZONTAL);
    szTextCommandSave_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandSave = new wxStaticBoxSizer(szTextCommandSave_staticbox, wxHORIZONTAL);
    szTextCommandDefense_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandDefense = new wxStaticBoxSizer(szTextCommandDefense_staticbox, wxHORIZONTAL);
    szTextCommandAutomatic_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandAutomatic = new wxStaticBoxSizer(szTextCommandAutomatic_staticbox, wxHORIZONTAL);
    szTextCommandNewGame_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandNewGame = new wxStaticBoxSizer(szTextCommandNewGame_staticbox, wxHORIZONTAL);
    szTextCommandEquipment_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandEquipment = new wxStaticBoxSizer(szTextCommandEquipment_staticbox, wxHORIZONTAL);
    szTextCommandAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandAttack = new wxStaticBoxSizer(szTextCommandAttack_staticbox, wxHORIZONTAL);
    szTextCommandFight_staticbox->Lower();
    wxStaticBoxSizer* szTextCommandFight = new wxStaticBoxSizer(szTextCommandFight_staticbox, wxHORIZONTAL);
    szTextArmorsAndEquipment_staticbox->Lower();
    wxStaticBoxSizer* szTextArmorsAndEquipment = new wxStaticBoxSizer(szTextArmorsAndEquipment_staticbox, wxHORIZONTAL);
    wxGridSizer* gszTextArmorsAndEquipment = new wxGridSizer(9, 2, 0, 2);
    szTextOther_staticbox->Lower();
    wxStaticBoxSizer* szTextOther = new wxStaticBoxSizer(szTextOther_staticbox, wxHORIZONTAL);
    szTextAgility_staticbox->Lower();
    wxStaticBoxSizer* szTextAgility = new wxStaticBoxSizer(szTextAgility_staticbox, wxHORIZONTAL);
    szTextHelmet_staticbox->Lower();
    wxStaticBoxSizer* szTextHelmet = new wxStaticBoxSizer(szTextHelmet_staticbox, wxHORIZONTAL);
    szTextIntelligence_staticbox->Lower();
    wxStaticBoxSizer* szTextIntelligence = new wxStaticBoxSizer(szTextIntelligence_staticbox, wxHORIZONTAL);
    szTextArmor_staticbox->Lower();
    wxStaticBoxSizer* szTextArmor = new wxStaticBoxSizer(szTextArmor_staticbox, wxHORIZONTAL);
    szTextDefense_staticbox->Lower();
    wxStaticBoxSizer* szTextDefense = new wxStaticBoxSizer(szTextDefense_staticbox, wxHORIZONTAL);
    szTextShield_staticbox->Lower();
    wxStaticBoxSizer* szTextShield = new wxStaticBoxSizer(szTextShield_staticbox, wxHORIZONTAL);
    szTextAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextAttack = new wxStaticBoxSizer(szTextAttack_staticbox, wxHORIZONTAL);
    szTextWeapons_staticbox->Lower();
    wxStaticBoxSizer* szTextWeapons = new wxStaticBoxSizer(szTextWeapons_staticbox, wxHORIZONTAL);
    szTextMPCost_staticbox->Lower();
    wxStaticBoxSizer* szTextMPCost = new wxStaticBoxSizer(szTextMPCost_staticbox, wxHORIZONTAL);
    szTextEXPShorter_staticbox->Lower();
    wxStaticBoxSizer* szTextEXPShorter = new wxStaticBoxSizer(szTextEXPShorter_staticbox, wxHORIZONTAL);
    szTextNormal_staticbox->Lower();
    wxStaticBoxSizer* szTextNormal = new wxStaticBoxSizer(szTextNormal_staticbox, wxHORIZONTAL);
    szTextMPShorter_staticbox->Lower();
    wxStaticBoxSizer* szTextMPShorter = new wxStaticBoxSizer(szTextMPShorter_staticbox, wxHORIZONTAL);
    szTextMP_staticbox->Lower();
    wxStaticBoxSizer* szTextMP = new wxStaticBoxSizer(szTextMP_staticbox, wxHORIZONTAL);
    szTextHPShorter_staticbox->Lower();
    wxStaticBoxSizer* szTextHPShorter = new wxStaticBoxSizer(szTextHPShorter_staticbox, wxHORIZONTAL);
    szTextHP_staticbox->Lower();
    wxStaticBoxSizer* szTextHP = new wxStaticBoxSizer(szTextHP_staticbox, wxHORIZONTAL);
    szTextLevelShorter_staticbox->Lower();
    wxStaticBoxSizer* szTextLevelShorter = new wxStaticBoxSizer(szTextLevelShorter_staticbox, wxHORIZONTAL);
    szTextLevel_staticbox->Lower();
    wxStaticBoxSizer* szTextLevel = new wxStaticBoxSizer(szTextLevel_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextCommerceAndInn = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTextInnMessages = new wxBoxSizer(wxVERTICAL);
    szTextCommerceVocabulary_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceVocabulary = new wxStaticBoxSizer(szTextCommerceVocabulary_staticbox, wxVERTICAL);
    wxBoxSizer* szTextCommerceVocabularyCommands = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceCurrency_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceCurrency = new wxStaticBoxSizer(szTextCommerceCurrency_staticbox, wxHORIZONTAL);
    szTextCommerceEquipedItems_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceEquipedItems = new wxStaticBoxSizer(szTextCommerceEquipedItems_staticbox, wxHORIZONTAL);
    szTextCommercePossessedItems_staticbox->Lower();
    wxStaticBoxSizer* szTextCommercePossessedItems = new wxStaticBoxSizer(szTextCommercePossessedItems_staticbox, wxHORIZONTAL);
    szTextInnMessagesB_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesB = new wxStaticBoxSizer(szTextInnMessagesB_staticbox, wxVERTICAL);
    wxBoxSizer* szTextInnMessagesBCommands = new wxBoxSizer(wxHORIZONTAL);
    szTextInnMessagesBDontStay_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesBDontStay = new wxStaticBoxSizer(szTextInnMessagesBDontStay_staticbox, wxHORIZONTAL);
    szTextInnMessagesBStay_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesBStay = new wxStaticBoxSizer(szTextInnMessagesBStay_staticbox, wxHORIZONTAL);
    szTextInnMessagesBSelectedInn_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesBSelectedInn = new wxStaticBoxSizer(szTextInnMessagesBSelectedInn_staticbox, wxVERTICAL);
    wxBoxSizer* szTextInnMessagesBSelectedInnTop = new wxBoxSizer(wxHORIZONTAL);
    szTextInnMessagesA_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesA = new wxStaticBoxSizer(szTextInnMessagesA_staticbox, wxVERTICAL);
    wxBoxSizer* szTextInnMessagesACommands = new wxBoxSizer(wxHORIZONTAL);
    szTextInnMessagesADontStay_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesADontStay = new wxStaticBoxSizer(szTextInnMessagesADontStay_staticbox, wxHORIZONTAL);
    szTextInnMessagesAStay_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesAStay = new wxStaticBoxSizer(szTextInnMessagesAStay_staticbox, wxHORIZONTAL);
    szTextInnMessagesASelectedInn_staticbox->Lower();
    wxStaticBoxSizer* szTextInnMessagesASelectedInn = new wxStaticBoxSizer(szTextInnMessagesASelectedInn_staticbox, wxVERTICAL);
    wxBoxSizer* szTextInnMessagesASelectedInnTop = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceMessagesC_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesC = new wxStaticBoxSizer(szTextCommerceMessagesC_staticbox, wxVERTICAL);
    szTextCommerceMessagesCSellCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCSellCompleted = new wxStaticBoxSizer(szTextCommerceMessagesCSellCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCItemToSellNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCItemToSellNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesCItemToSellNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCItemToSellSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCItemToSellSelection = new wxStaticBoxSizer(szTextCommerceMessagesCItemToSellSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCBuyCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCBuyCompleted = new wxStaticBoxSizer(szTextCommerceMessagesCBuyCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCItemToBuyNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCItemToBuyNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesCItemToBuyNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCItemToBuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCItemToBuySelection = new wxStaticBoxSizer(szTextCommerceMessagesCItemToBuySelection_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextCommerceMessagesCCommands = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceMessagesCExit_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCExit = new wxStaticBoxSizer(szTextCommerceMessagesCExit_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCSell_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCSell = new wxStaticBoxSizer(szTextCommerceMessagesCSell_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCBuy_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCBuy = new wxStaticBoxSizer(szTextCommerceMessagesCBuy_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCBuySelectionSecondTimeAndLater_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCBuySelectionSecondTimeAndLater = new wxStaticBoxSizer(szTextCommerceMessagesCBuySelectionSecondTimeAndLater_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesCBuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesCBuySelection = new wxStaticBoxSizer(szTextCommerceMessagesCBuySelection_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextCommerceMessages = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceMessagesB_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesB = new wxStaticBoxSizer(szTextCommerceMessagesB_staticbox, wxVERTICAL);
    szTextCommerceMessagesBSellCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBSellCompleted = new wxStaticBoxSizer(szTextCommerceMessagesBSellCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBItemToSellNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBItemToSellNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesBItemToSellNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBItemToSellSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBItemToSellSelection = new wxStaticBoxSizer(szTextCommerceMessagesBItemToSellSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBBuyCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBBuyCompleted = new wxStaticBoxSizer(szTextCommerceMessagesBBuyCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBItemToBuyNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBItemToBuyNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesBItemToBuyNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBItemToBuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBItemToBuySelection = new wxStaticBoxSizer(szTextCommerceMessagesBItemToBuySelection_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextCommerceMessagesBCommands = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceMessagesBExit_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBExit = new wxStaticBoxSizer(szTextCommerceMessagesBExit_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBSell_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBSell = new wxStaticBoxSizer(szTextCommerceMessagesBSell_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBBuy_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBBuy = new wxStaticBoxSizer(szTextCommerceMessagesBBuy_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBBuySelectionSecondTimeAndLater_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBBuySelectionSecondTimeAndLater = new wxStaticBoxSizer(szTextCommerceMessagesBBuySelectionSecondTimeAndLater_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesBBuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesBBuySelection = new wxStaticBoxSizer(szTextCommerceMessagesBBuySelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesA_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesA = new wxStaticBoxSizer(szTextCommerceMessagesA_staticbox, wxVERTICAL);
    szTextCommerceMessagesASellCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesASellCompleted = new wxStaticBoxSizer(szTextCommerceMessagesASellCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesAItemToSellNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesAItemToSellNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesAItemToSellNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesAItemToSellSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesAItemToSellSelection = new wxStaticBoxSizer(szTextCommerceMessagesAItemToSellSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesABuyCompleted_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesABuyCompleted = new wxStaticBoxSizer(szTextCommerceMessagesABuyCompleted_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesAItemToBuyNumberSelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesAItemToBuyNumberSelection = new wxStaticBoxSizer(szTextCommerceMessagesAItemToBuyNumberSelection_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesAItemToBuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesAItemToBuySelection = new wxStaticBoxSizer(szTextCommerceMessagesAItemToBuySelection_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextCommerceMessagesACommands = new wxBoxSizer(wxHORIZONTAL);
    szTextCommerceMessagesAExit_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesAExit = new wxStaticBoxSizer(szTextCommerceMessagesAExit_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesASell_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesASell = new wxStaticBoxSizer(szTextCommerceMessagesASell_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesABuy_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesABuy = new wxStaticBoxSizer(szTextCommerceMessagesABuy_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesABuySelectionSecondTimeAndLater_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesABuySelectionSecondTimeAndLater = new wxStaticBoxSizer(szTextCommerceMessagesABuySelectionSecondTimeAndLater_staticbox, wxHORIZONTAL);
    szTextCommerceMessagesABuySelection_staticbox->Lower();
    wxStaticBoxSizer* szTextCommerceMessagesABuySelection = new wxStaticBoxSizer(szTextCommerceMessagesABuySelection_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextBattleMessages3And4 = new wxBoxSizer(wxHORIZONTAL);
    szTextBattleMessages4_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleMessages4 = new wxStaticBoxSizer(szTextBattleMessages4_staticbox, wxVERTICAL);
    szTextBattleLearnSkill_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleLearnSkill = new wxStaticBoxSizer(szTextBattleLearnSkill_staticbox, wxHORIZONTAL);
    szTextBattleLevelUp_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleLevelUp = new wxStaticBoxSizer(szTextBattleLevelUp_staticbox, wxHORIZONTAL);
    szTextBattleDefenseDown_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleDefenseDown = new wxStaticBoxSizer(szTextBattleDefenseDown_staticbox, wxHORIZONTAL);
    szTextBattleDefenseUp_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleDefenseUp = new wxStaticBoxSizer(szTextBattleDefenseUp_staticbox, wxHORIZONTAL);
    szTextBattleParameterAbsorptionEnemy_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleParameterAbsorptionEnemy = new wxStaticBoxSizer(szTextBattleParameterAbsorptionEnemy_staticbox, wxHORIZONTAL);
    szTextBattleParameterAbsorptionAllied_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleParameterAbsorptionAllied = new wxStaticBoxSizer(szTextBattleParameterAbsorptionAllied_staticbox, wxHORIZONTAL);
    szTextBattleParameterDown_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleParameterDown = new wxStaticBoxSizer(szTextBattleParameterDown_staticbox, wxHORIZONTAL);
    szTextBattleParameterUp_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleParameterUp = new wxStaticBoxSizer(szTextBattleParameterUp_staticbox, wxHORIZONTAL);
    szTextBattleRecoverHP_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleRecoverHP = new wxStaticBoxSizer(szTextBattleRecoverHP_staticbox, wxHORIZONTAL);
    szTextBattleMessages3_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleMessages3 = new wxStaticBoxSizer(szTextBattleMessages3_staticbox, wxVERTICAL);
    szTextBattleUseItem_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleUseItem = new wxStaticBoxSizer(szTextBattleUseItem_staticbox, wxHORIZONTAL);
    szTextBattleEvadePsysicalAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleEvadePsysicalAttack = new wxStaticBoxSizer(szTextBattleEvadePsysicalAttack_staticbox, wxHORIZONTAL);
    szTextBattleFailedSkillC_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedSkillC = new wxStaticBoxSizer(szTextBattleFailedSkillC_staticbox, wxHORIZONTAL);
    szTextBattleFailedSkillB_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedSkillB = new wxStaticBoxSizer(szTextBattleFailedSkillB_staticbox, wxHORIZONTAL);
    szTextBattleFailedSkillA_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedSkillA = new wxStaticBoxSizer(szTextBattleFailedSkillA_staticbox, wxHORIZONTAL);
    szTextBattleFailedEnemyAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedEnemyAttack = new wxStaticBoxSizer(szTextBattleFailedEnemyAttack_staticbox, wxHORIZONTAL);
    szTextBattleEnemyAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleEnemyAttack = new wxStaticBoxSizer(szTextBattleEnemyAttack_staticbox, wxHORIZONTAL);
    szTextBattleFailedActorAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedActorAttack = new wxStaticBoxSizer(szTextBattleFailedActorAttack_staticbox, wxHORIZONTAL);
    szTextBattleActorAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleActorAttack = new wxStaticBoxSizer(szTextBattleActorAttack_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTextBattleMessages1And2 = new wxBoxSizer(wxHORIZONTAL);
    szTextBattleMessages2_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleMessages2 = new wxStaticBoxSizer(szTextBattleMessages2_staticbox, wxVERTICAL);
    szTextBattleTransformation_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleTransformation = new wxStaticBoxSizer(szTextBattleTransformation_staticbox, wxHORIZONTAL);
    szTextBattleEnemyEscape_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleEnemyEscape = new wxStaticBoxSizer(szTextBattleEnemyEscape_staticbox, wxHORIZONTAL);
    szTextBattleAutodestruction_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleAutodestruction = new wxStaticBoxSizer(szTextBattleAutodestruction_staticbox, wxHORIZONTAL);
    szTextBattleStrengthGain_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleStrengthGain = new wxStaticBoxSizer(szTextBattleStrengthGain_staticbox, wxHORIZONTAL);
    szTextBattleStateControl_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleStateControl = new wxStaticBoxSizer(szTextBattleStateControl_staticbox, wxHORIZONTAL);
    szTextBattleDefense_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleDefense = new wxStaticBoxSizer(szTextBattleDefense_staticbox, wxHORIZONTAL);
    szTextBattleEnemyDeath_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleEnemyDeath = new wxStaticBoxSizer(szTextBattleEnemyDeath_staticbox, wxHORIZONTAL);
    szTextBattleActorDeath_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleActorDeath = new wxStaticBoxSizer(szTextBattleActorDeath_staticbox, wxHORIZONTAL);
    szTextBattleNormalAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleNormalAttack = new wxStaticBoxSizer(szTextBattleNormalAttack_staticbox, wxHORIZONTAL);
    szTextBattleMessages1_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleMessages1 = new wxStaticBoxSizer(szTextBattleMessages1_staticbox, wxVERTICAL);
    szTextBattleObtainedObject_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleObtainedObject = new wxStaticBoxSizer(szTextBattleObtainedObject_staticbox, wxHORIZONTAL);
    szTextBattleObtainedMoney_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleObtainedMoney = new wxStaticBoxSizer(szTextBattleObtainedMoney_staticbox, wxHORIZONTAL);
    szTextBattleExperience_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleExperience = new wxStaticBoxSizer(szTextBattleExperience_staticbox, wxHORIZONTAL);
    szTextBattleDeadGroup_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleDeadGroup = new wxStaticBoxSizer(szTextBattleDeadGroup_staticbox, wxHORIZONTAL);
    szTextBattleVictory_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleVictory = new wxStaticBoxSizer(szTextBattleVictory_staticbox, wxHORIZONTAL);
    szTextBattleFailedEscape_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleFailedEscape = new wxStaticBoxSizer(szTextBattleFailedEscape_staticbox, wxHORIZONTAL);
    szTextBattleSuccessfulEscape_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleSuccessfulEscape = new wxStaticBoxSizer(szTextBattleSuccessfulEscape_staticbox, wxHORIZONTAL);
    szTextBattlePriorityAttack_staticbox->Lower();
    wxStaticBoxSizer* szTextBattlePriorityAttack = new wxStaticBoxSizer(szTextBattlePriorityAttack_staticbox, wxHORIZONTAL);
    szTextBattleStartBattle_staticbox->Lower();
    wxStaticBoxSizer* szTextBattleStartBattle = new wxStaticBoxSizer(szTextBattleStartBattle_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTileset = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTilesetRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTilesetUpperLayer = new wxBoxSizer(wxHORIZONTAL);
    szTileseUpperLayerModify_staticbox->Lower();
    wxStaticBoxSizer* szTileseUpperLayerModify = new wxStaticBoxSizer(szTileseUpperLayerModify_staticbox, wxVERTICAL);
    wxBoxSizer* szTilesetLowerLayer = new wxBoxSizer(wxHORIZONTAL);
    szTilesetLowerLayerTerrain_staticbox->Lower();
    wxStaticBoxSizer* szTilesetLowerLayerTerrain = new wxStaticBoxSizer(szTilesetLowerLayerTerrain_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTilesetLowerLayerLeft = new wxBoxSizer(wxVERTICAL);
    szTilesetWaterAnimation_staticbox->Lower();
    wxStaticBoxSizer* szTilesetWaterAnimation = new wxStaticBoxSizer(szTilesetWaterAnimation_staticbox, wxVERTICAL);
    szTilesetLowerLayerModify_staticbox->Lower();
    wxStaticBoxSizer* szTilesetLowerLayerModify = new wxStaticBoxSizer(szTilesetLowerLayerModify_staticbox, wxVERTICAL);
    wxBoxSizer* szTilesetRightTop = new wxBoxSizer(wxHORIZONTAL);
    szTilesetGraphic_staticbox->Lower();
    wxStaticBoxSizer* szTilesetGraphic = new wxStaticBoxSizer(szTilesetGraphic_staticbox, wxHORIZONTAL);
    szTilesetName_staticbox->Lower();
    wxStaticBoxSizer* szTilesetName = new wxStaticBoxSizer(szTilesetName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTilesetLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTerrain = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTerrainRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTerrainRightBottom = new wxBoxSizer(wxHORIZONTAL);
    szTerrainVehiclePermissions_staticbox->Lower();
    wxStaticBoxSizer* szTerrainVehiclePermissions = new wxStaticBoxSizer(szTerrainVehiclePermissions_staticbox, wxVERTICAL);
    szTerrainBattleBackgroundGraphic_staticbox->Lower();
    wxStaticBoxSizer* szTerrainBattleBackgroundGraphic = new wxStaticBoxSizer(szTerrainBattleBackgroundGraphic_staticbox, wxVERTICAL);
    wxBoxSizer* szTerrainBattleBackgroundGraphicBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTerrainRightTop = new wxBoxSizer(wxHORIZONTAL);
    szTerrainEncounterRate_staticbox->Lower();
    wxStaticBoxSizer* szTerrainEncounterRate = new wxStaticBoxSizer(szTerrainEncounterRate_staticbox, wxHORIZONTAL);
    szTerrainDamage_staticbox->Lower();
    wxStaticBoxSizer* szTerrainDamage = new wxStaticBoxSizer(szTerrainDamage_staticbox, wxHORIZONTAL);
    szTerrainName_staticbox->Lower();
    wxStaticBoxSizer* szTerrainName = new wxStaticBoxSizer(szTerrainName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTerrainLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szAnimation = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szAnimationRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szAnimationRightMiddle = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szAnimationRightMiddleRight = new wxBoxSizer(wxVERTICAL);
    szAnimationYordinate_staticbox->Lower();
    wxStaticBoxSizer* szAnimationYordinate = new wxStaticBoxSizer(szAnimationYordinate_staticbox, wxHORIZONTAL);
    szAnimationRange_staticbox->Lower();
    wxStaticBoxSizer* szAnimationRange = new wxStaticBoxSizer(szAnimationRange_staticbox, wxHORIZONTAL);
    wxBoxSizer* szAnimationRightMiddleMiddle = new wxBoxSizer(wxVERTICAL);
    szAnimationTimeline_staticbox->Lower();
    wxStaticBoxSizer* szAnimationTimeline = new wxStaticBoxSizer(szAnimationTimeline_staticbox, wxHORIZONTAL);
    wxBoxSizer* szAnimationRightMiddleLeft = new wxBoxSizer(wxVERTICAL);
    szAnimationFrames_staticbox->Lower();
    wxStaticBoxSizer* szAnimationFrames = new wxStaticBoxSizer(szAnimationFrames_staticbox, wxVERTICAL);
    szAnimationNumberOfFrames_staticbox->Lower();
    wxStaticBoxSizer* szAnimationNumberOfFrames = new wxStaticBoxSizer(szAnimationNumberOfFrames_staticbox, wxHORIZONTAL);
    wxBoxSizer* szAnimationRightTop = new wxBoxSizer(wxHORIZONTAL);
    szEnemyTargetTest_staticbox->Lower();
    wxStaticBoxSizer* szEnemyTargetTest = new wxStaticBoxSizer(szEnemyTargetTest_staticbox, wxHORIZONTAL);
    szAnimationGraphic_staticbox->Lower();
    wxStaticBoxSizer* szAnimationGraphic = new wxStaticBoxSizer(szAnimationGraphic_staticbox, wxHORIZONTAL);
    szAnimationName_staticbox->Lower();
    wxStaticBoxSizer* szAnimationName = new wxStaticBoxSizer(szAnimationName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szAnimationLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szState = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szStateRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szStateRightBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szStateHPMPReduction = new wxBoxSizer(wxVERTICAL);
    szStateMPReduction_staticbox->Lower();
    wxStaticBoxSizer* szStateMPReduction = new wxStaticBoxSizer(szStateMPReduction_staticbox, wxVERTICAL);
    szStateMPReductionOnMove_staticbox->Lower();
    wxStaticBoxSizer* szStateMPReductionOnMove = new wxStaticBoxSizer(szStateMPReductionOnMove_staticbox, wxHORIZONTAL);
    szStateMPReductionInEveryTurn_staticbox->Lower();
    wxStaticBoxSizer* szStateMPReductionInEveryTurn = new wxStaticBoxSizer(szStateMPReductionInEveryTurn_staticbox, wxHORIZONTAL);
    szStateHPReduction_staticbox->Lower();
    wxStaticBoxSizer* szStateHPReduction = new wxStaticBoxSizer(szStateHPReduction_staticbox, wxVERTICAL);
    szStateHPReductionOnMove_staticbox->Lower();
    wxStaticBoxSizer* szStateHPReductionOnMove = new wxStaticBoxSizer(szStateHPReductionOnMove_staticbox, wxHORIZONTAL);
    szStateHPReductionInEveryTurn_staticbox->Lower();
    wxStaticBoxSizer* szStateHPReductionInEveryTurn = new wxStaticBoxSizer(szStateHPReductionInEveryTurn_staticbox, wxHORIZONTAL);
    wxBoxSizer* szStateMessages = new wxBoxSizer(wxVERTICAL);
    szStateMessageRecover_staticbox->Lower();
    wxStaticBoxSizer* szStateMessageRecover = new wxStaticBoxSizer(szStateMessageRecover_staticbox, wxHORIZONTAL);
    szStateMessageNormalState_staticbox->Lower();
    wxStaticBoxSizer* szStateMessageNormalState = new wxStaticBoxSizer(szStateMessageNormalState_staticbox, wxHORIZONTAL);
    szStateMessageAlreadyInState_staticbox->Lower();
    wxStaticBoxSizer* szStateMessageAlreadyInState = new wxStaticBoxSizer(szStateMessageAlreadyInState_staticbox, wxHORIZONTAL);
    szStateMessageEnemyHit_staticbox->Lower();
    wxStaticBoxSizer* szStateMessageEnemyHit = new wxStaticBoxSizer(szStateMessageEnemyHit_staticbox, wxHORIZONTAL);
    szStateMessageActorHit_staticbox->Lower();
    wxStaticBoxSizer* szStateMessageActorHit = new wxStaticBoxSizer(szStateMessageActorHit_staticbox, wxHORIZONTAL);
    wxBoxSizer* szStateRightMiddle = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szStateRightMiddleRight = new wxBoxSizer(wxVERTICAL);
    szStateSkillExceptions_staticbox->Lower();
    wxStaticBoxSizer* szStateSkillExceptions = new wxStaticBoxSizer(szStateSkillExceptions_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszStateSkillExceptions = new wxFlexGridSizer(2, 3, 2, 2);
    wxBoxSizer* szStateRightMiddleRightTop = new wxBoxSizer(wxHORIZONTAL);
    szStateAttackChance_staticbox->Lower();
    wxStaticBoxSizer* szStateAttackChance = new wxStaticBoxSizer(szStateAttackChance_staticbox, wxHORIZONTAL);
    szStateDecreaseCapacities_staticbox->Lower();
    wxStaticBoxSizer* szStateDecreaseCapacities = new wxStaticBoxSizer(szStateDecreaseCapacities_staticbox, wxHORIZONTAL);
    wxGridSizer* gszStateDecreaseCapacities = new wxGridSizer(2, 2, 2, 2);
    szStateHealMethod_staticbox->Lower();
    wxStaticBoxSizer* szStateHealMethod = new wxStaticBoxSizer(szStateHealMethod_staticbox, wxVERTICAL);
    szStateAfterHitHealing_staticbox->Lower();
    wxStaticBoxSizer* szStateAfterHitHealing = new wxStaticBoxSizer(szStateAfterHitHealing_staticbox, wxVERTICAL);
    wxBoxSizer* szStateAfterHitHealingHealChance = new wxBoxSizer(wxHORIZONTAL);
    szStateNaturalHealing_staticbox->Lower();
    wxStaticBoxSizer* szStateNaturalHealing = new wxStaticBoxSizer(szStateNaturalHealing_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszStateNaturalHealing = new wxFlexGridSizer(2, 3, 2, 2);
    szStateEffectRate_staticbox->Lower();
    wxStaticBoxSizer* szStateEffectRate = new wxStaticBoxSizer(szStateEffectRate_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszStateEffectRate = new wxFlexGridSizer(5, 3, 2, 2);
    wxBoxSizer* szStateRightTop = new wxBoxSizer(wxHORIZONTAL);
    szStateActionRange_staticbox->Lower();
    wxStaticBoxSizer* szStateActionRange = new wxStaticBoxSizer(szStateActionRange_staticbox, wxHORIZONTAL);
    szStatePriority_staticbox->Lower();
    wxStaticBoxSizer* szStatePriority = new wxStaticBoxSizer(szStatePriority_staticbox, wxHORIZONTAL);
    szStateColor_staticbox->Lower();
    wxStaticBoxSizer* szStateColor = new wxStaticBoxSizer(szStateColor_staticbox, wxHORIZONTAL);
    szStateType_staticbox->Lower();
    wxStaticBoxSizer* szStateType = new wxStaticBoxSizer(szStateType_staticbox, wxHORIZONTAL);
    szStateName_staticbox->Lower();
    wxStaticBoxSizer* szStateName = new wxStaticBoxSizer(szStateName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szStateLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szAttribute = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szAttributeRight = new wxBoxSizer(wxVERTICAL);
    szAttributeEffectRate_staticbox->Lower();
    wxStaticBoxSizer* szAttributeEffectRate = new wxStaticBoxSizer(szAttributeEffectRate_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* grid_sizer_12 = new wxFlexGridSizer(5, 3, 2, 2);
    szAttributeName_staticbox->Lower();
    wxStaticBoxSizer* szAttributeName = new wxStaticBoxSizer(szAttributeName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szAttributeLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTroop = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTroopRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTroopRightBottom = new wxBoxSizer(wxHORIZONTAL);
    szTroopBattleEvents_staticbox->Lower();
    wxStaticBoxSizer* szTroopBattleEvents = new wxStaticBoxSizer(szTroopBattleEvents_staticbox, wxVERTICAL);
    wxBoxSizer* szTroopBattleEventsBottom = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTroopBattleEventsConditions = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTroopBattleEventsTop = new wxBoxSizer(wxHORIZONTAL);
    szTroopEncountersOn_staticbox->Lower();
    wxStaticBoxSizer* szTroopEncountersOn = new wxStaticBoxSizer(szTroopEncountersOn_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTroopRightMiddle = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTroopRightMiddleMiddle = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szTroopRightTop = new wxBoxSizer(wxHORIZONTAL);
    szTroopName_staticbox->Lower();
    wxStaticBoxSizer* szTroopName = new wxStaticBoxSizer(szTroopName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szTroopLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szEnemy = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szEnemyRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szEnemyRightBottom = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szEnemyRightBottom2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szEnemyResistance = new wxBoxSizer(wxVERTICAL);
    szStatesResistance_staticbox->Lower();
    wxStaticBoxSizer* szStatesResistance = new wxStaticBoxSizer(szStatesResistance_staticbox, wxHORIZONTAL);
    szAttributesResistance_staticbox->Lower();
    wxStaticBoxSizer* szAttributesResistance = new wxStaticBoxSizer(szAttributesResistance_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyRightBottomLeft = new wxBoxSizer(wxVERTICAL);
    szEnemyActions_staticbox->Lower();
    wxStaticBoxSizer* szEnemyActions = new wxStaticBoxSizer(szEnemyActions_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyRightBottomLeftTop = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szEnemyRightBottomLeftTopRight = new wxBoxSizer(wxVERTICAL);
    szEnemyOptions_staticbox->Lower();
    wxStaticBoxSizer* szEnemyOptions = new wxStaticBoxSizer(szEnemyOptions_staticbox, wxHORIZONTAL);
    szCriticalHitRate_staticbox->Lower();
    wxStaticBoxSizer* szCriticalHitRate = new wxStaticBoxSizer(szCriticalHitRate_staticbox, wxHORIZONTAL);
    szEnemyOnSuccess_staticbox->Lower();
    wxStaticBoxSizer* szEnemyOnSuccess = new wxStaticBoxSizer(szEnemyOnSuccess_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyOnSuccessRight = new wxBoxSizer(wxVERTICAL);
    szEnemyGetItemChance_staticbox->Lower();
    wxStaticBoxSizer* szEnemyGetItemChance = new wxStaticBoxSizer(szEnemyGetItemChance_staticbox, wxHORIZONTAL);
    szEnemyGetItem_staticbox->Lower();
    wxStaticBoxSizer* szEnemyGetItem = new wxStaticBoxSizer(szEnemyGetItem_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyOnSuccessLeft = new wxBoxSizer(wxVERTICAL);
    szEnemyGetMoney_staticbox->Lower();
    wxStaticBoxSizer* szEnemyGetMoney = new wxStaticBoxSizer(szEnemyGetMoney_staticbox, wxHORIZONTAL);
    szEnemyGetEXP_staticbox->Lower();
    wxStaticBoxSizer* szEnemyGetEXP = new wxStaticBoxSizer(szEnemyGetEXP_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyRightTop = new wxBoxSizer(wxHORIZONTAL);
    szEnemyGraphic_staticbox->Lower();
    wxStaticBoxSizer* szEnemyGraphic = new wxStaticBoxSizer(szEnemyGraphic_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyGraphicOptions = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szEnemyRightTopLeft = new wxBoxSizer(wxVERTICAL);
    szEnemyParameters_staticbox->Lower();
    wxStaticBoxSizer* szEnemyParameters = new wxStaticBoxSizer(szEnemyParameters_staticbox, wxHORIZONTAL);
    wxGridSizer* gszEnemyParameters = new wxGridSizer(2, 3, 0, 2);
    szEnemyAgility_staticbox->Lower();
    wxStaticBoxSizer* szEnemyAgility = new wxStaticBoxSizer(szEnemyAgility_staticbox, wxHORIZONTAL);
    szEnemyDefense_staticbox->Lower();
    wxStaticBoxSizer* szEnemyDefense = new wxStaticBoxSizer(szEnemyDefense_staticbox, wxHORIZONTAL);
    szEnemyMaxMP_staticbox->Lower();
    wxStaticBoxSizer* szEnemyMaxMP = new wxStaticBoxSizer(szEnemyMaxMP_staticbox, wxHORIZONTAL);
    szEnemyIntelligence_staticbox->Lower();
    wxStaticBoxSizer* szEnemyIntelligence = new wxStaticBoxSizer(szEnemyIntelligence_staticbox, wxHORIZONTAL);
    szEnemyAttack_staticbox->Lower();
    wxStaticBoxSizer* szEnemyAttack = new wxStaticBoxSizer(szEnemyAttack_staticbox, wxHORIZONTAL);
    szEnemyMaxHP_staticbox->Lower();
    wxStaticBoxSizer* szEnemyMaxHP = new wxStaticBoxSizer(szEnemyMaxHP_staticbox, wxHORIZONTAL);
    szEnemyName_staticbox->Lower();
    wxStaticBoxSizer* szEnemyName = new wxStaticBoxSizer(szEnemyName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szEnemyLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szItem = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szItemRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szItemRightBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szItemRightBottomRight = new wxBoxSizer(wxVERTICAL);
    szItemOptions_staticbox->Lower();
    wxStaticBoxSizer* szItemOptions = new wxStaticBoxSizer(szItemOptions_staticbox, wxVERTICAL);
    szItemMPRecover_staticbox->Lower();
    wxStaticBoxSizer* szItemMPRecover = new wxStaticBoxSizer(szItemMPRecover_staticbox, wxHORIZONTAL);
    szItemHPRecover_staticbox->Lower();
    wxStaticBoxSizer* szItemHPRecover = new wxStaticBoxSizer(szItemHPRecover_staticbox, wxHORIZONTAL);
    szItemChangeStates_staticbox->Lower();
    wxStaticBoxSizer* szItemChangeStates = new wxStaticBoxSizer(szItemChangeStates_staticbox, wxHORIZONTAL);
    szItemCanBeUsedBy_staticbox->Lower();
    wxStaticBoxSizer* szItemCanBeUsedBy = new wxStaticBoxSizer(szItemCanBeUsedBy_staticbox, wxHORIZONTAL);
    wxBoxSizer* szItemRightMiddle = new wxBoxSizer(wxHORIZONTAL);
    szItemDescription_staticbox->Lower();
    wxStaticBoxSizer* szItemDescription = new wxStaticBoxSizer(szItemDescription_staticbox, wxHORIZONTAL);
    wxBoxSizer* szItemRightTop = new wxBoxSizer(wxHORIZONTAL);
    szItemTimesUsed_staticbox->Lower();
    wxStaticBoxSizer* szItemTimesUsed = new wxStaticBoxSizer(szItemTimesUsed_staticbox, wxHORIZONTAL);
    szItemCost_staticbox->Lower();
    wxStaticBoxSizer* szItemCost = new wxStaticBoxSizer(szItemCost_staticbox, wxHORIZONTAL);
    szItemType_staticbox->Lower();
    wxStaticBoxSizer* szItemType = new wxStaticBoxSizer(szItemType_staticbox, wxHORIZONTAL);
    szItemName_staticbox->Lower();
    wxStaticBoxSizer* szItemName = new wxStaticBoxSizer(szItemName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szItemLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szSkill = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szSkillRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szSkillRightBottom = new wxBoxSizer(wxHORIZONTAL);
    szSkillAttributes_staticbox->Lower();
    wxStaticBoxSizer* szSkillAttributes = new wxStaticBoxSizer(szSkillAttributes_staticbox, wxVERTICAL);
    wxBoxSizer* szSkillRightBottomMiddleRight = new wxBoxSizer(wxVERTICAL);
    szSkillChangeStates_staticbox->Lower();
    wxStaticBoxSizer* szSkillChangeStates = new wxStaticBoxSizer(szSkillChangeStates_staticbox, wxHORIZONTAL);
    szSkillSuccessRate_staticbox->Lower();
    wxStaticBoxSizer* szSkillSuccessRate = new wxStaticBoxSizer(szSkillSuccessRate_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSkillRightBottomMiddleLeft = new wxBoxSizer(wxVERTICAL);
    szSkillAffectCapacities_staticbox->Lower();
    wxStaticBoxSizer* szSkillAffectCapacities = new wxStaticBoxSizer(szSkillAffectCapacities_staticbox, wxVERTICAL);
    szSkillEffectRate_staticbox->Lower();
    wxStaticBoxSizer* szSkillEffectRate = new wxStaticBoxSizer(szSkillEffectRate_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSkillRightBottomLeft = new wxBoxSizer(wxVERTICAL);
    szSkillVariance_staticbox->Lower();
    wxStaticBoxSizer* szSkillVariance = new wxStaticBoxSizer(szSkillVariance_staticbox, wxHORIZONTAL);
    szSkillMagicInfluence_staticbox->Lower();
    wxStaticBoxSizer* szSkillMagicInfluence = new wxStaticBoxSizer(szSkillMagicInfluence_staticbox, wxHORIZONTAL);
    szSkillAttackInfluence_staticbox->Lower();
    wxStaticBoxSizer* szSkillAttackInfluence = new wxStaticBoxSizer(szSkillAttackInfluence_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSkillRightMiddle = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* gszSkillRightMiddle = new wxFlexGridSizer(2, 2, 0, 0);
    szSkillAnimation_staticbox->Lower();
    wxStaticBoxSizer* szSkillAnimation = new wxStaticBoxSizer(szSkillAnimation_staticbox, wxVERTICAL);
    wxBoxSizer* szSkillMessages = new wxBoxSizer(wxVERTICAL);
    szSkillFailMessage_staticbox->Lower();
    wxStaticBoxSizer* szSkillFailMessage = new wxStaticBoxSizer(szSkillFailMessage_staticbox, wxHORIZONTAL);
    szSkillCastMessage_staticbox->Lower();
    wxStaticBoxSizer* szSkillCastMessage = new wxStaticBoxSizer(szSkillCastMessage_staticbox, wxVERTICAL);
    wxBoxSizer* szSkillCastMessageActions = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szSkillCastMessageCharacterName = new wxBoxSizer(wxHORIZONTAL);
    szSkillTarget_staticbox->Lower();
    wxStaticBoxSizer* szSkillTarget = new wxStaticBoxSizer(szSkillTarget_staticbox, wxHORIZONTAL);
    szSkillDescription_staticbox->Lower();
    wxStaticBoxSizer* szSkillDescription = new wxStaticBoxSizer(szSkillDescription_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSkillRightTop = new wxBoxSizer(wxHORIZONTAL);
    szSkillMPCost_staticbox->Lower();
    wxStaticBoxSizer* szSkillMPCost = new wxStaticBoxSizer(szSkillMPCost_staticbox, wxHORIZONTAL);
    szSkillType_staticbox->Lower();
    wxStaticBoxSizer* szSkillType = new wxStaticBoxSizer(szSkillType_staticbox, wxHORIZONTAL);
    szSkillName_staticbox->Lower();
    wxStaticBoxSizer* szSkillName = new wxStaticBoxSizer(szSkillName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szSkillLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szActor = new wxBoxSizer(wxHORIZONTAL);
    wxFlexGridSizer* gszActorRight = new wxFlexGridSizer(2, 2, 0, 0);
    wxBoxSizer* szActorRightBottomRight = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szActorRates = new wxBoxSizer(wxHORIZONTAL);
    szActorAttributeRates_staticbox->Lower();
    wxStaticBoxSizer* szActorAttributeRates = new wxStaticBoxSizer(szActorAttributeRates_staticbox, wxHORIZONTAL);
    szActorStateRates_staticbox->Lower();
    wxStaticBoxSizer* szActorStateRates = new wxStaticBoxSizer(szActorStateRates_staticbox, wxHORIZONTAL);
    szActorSkills_staticbox->Lower();
    wxStaticBoxSizer* szActorSkills = new wxStaticBoxSizer(szActorSkills_staticbox, wxVERTICAL);
    wxBoxSizer* szActorSkillsBattleCommand = new wxBoxSizer(wxHORIZONTAL);
    szActorAnimationWithoutWeapons_staticbox->Lower();
    wxStaticBoxSizer* szActorAnimationWithoutWeapons = new wxStaticBoxSizer(szActorAnimationWithoutWeapons_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorRightBottomLeft = new wxBoxSizer(wxVERTICAL);
    szActorExperienceCurve_staticbox->Lower();
    wxStaticBoxSizer* szActorExperienceCurve = new wxStaticBoxSizer(szActorExperienceCurve_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorRightBottomLeftTop = new wxBoxSizer(wxHORIZONTAL);
    szActorCapacityCurves_staticbox->Lower();
    wxStaticBoxSizer* szActorCapacityCurves = new wxStaticBoxSizer(szActorCapacityCurves_staticbox, wxHORIZONTAL);
    wxGridSizer* gszActorCapacityCurves = new wxGridSizer(3, 2, 0, 2);
    szActorAgility_staticbox->Lower();
    wxStaticBoxSizer* szActorAgility = new wxStaticBoxSizer(szActorAgility_staticbox, wxHORIZONTAL);
    szActorIntelligence_staticbox->Lower();
    wxStaticBoxSizer* szActorIntelligence = new wxStaticBoxSizer(szActorIntelligence_staticbox, wxHORIZONTAL);
    szActorDefense_staticbox->Lower();
    wxStaticBoxSizer* szActorDefense = new wxStaticBoxSizer(szActorDefense_staticbox, wxHORIZONTAL);
    szActorAttack_staticbox->Lower();
    wxStaticBoxSizer* szActorAttack = new wxStaticBoxSizer(szActorAttack_staticbox, wxHORIZONTAL);
    szActorMaxMP_staticbox->Lower();
    wxStaticBoxSizer* szActorMaxMP = new wxStaticBoxSizer(szActorMaxMP_staticbox, wxHORIZONTAL);
    szActorMaxHP_staticbox->Lower();
    wxStaticBoxSizer* szActorMaxHP = new wxStaticBoxSizer(szActorMaxHP_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorRightBottomLeftTopLeft = new wxBoxSizer(wxVERTICAL);
    szActorOptions_staticbox->Lower();
    wxStaticBoxSizer* szActorOptions = new wxStaticBoxSizer(szActorOptions_staticbox, wxVERTICAL);
    szActorFaceGraphic_staticbox->Lower();
    wxStaticBoxSizer* szActorFaceGraphic = new wxStaticBoxSizer(szActorFaceGraphic_staticbox, wxVERTICAL);
    szActorInitialEquipment_staticbox->Lower();
    wxStaticBoxSizer* szActorInitialEquipment = new wxStaticBoxSizer(szActorInitialEquipment_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszActorInitialEquipment = new wxFlexGridSizer(5, 2, 2, 2);
    wxBoxSizer* szActorRightTopLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szActorRightTopLeftBottom = new wxBoxSizer(wxHORIZONTAL);
    szActorCriticalHitRate_staticbox->Lower();
    wxStaticBoxSizer* szActorCriticalHitRate = new wxStaticBoxSizer(szActorCriticalHitRate_staticbox, wxHORIZONTAL);
    szActorMaxLevel_staticbox->Lower();
    wxStaticBoxSizer* szActorMaxLevel = new wxStaticBoxSizer(szActorMaxLevel_staticbox, wxHORIZONTAL);
    szActorInitialLevel_staticbox->Lower();
    wxStaticBoxSizer* szActorInitialLevel = new wxStaticBoxSizer(szActorInitialLevel_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorRightTopLeftTop = new wxBoxSizer(wxHORIZONTAL);
    szActorWalkingGraphic_staticbox->Lower();
    wxStaticBoxSizer* szActorWalkingGraphic = new wxStaticBoxSizer(szActorWalkingGraphic_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorWalkingGraphicOptions = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szActorRightTopLeftTopLeft = new wxBoxSizer(wxVERTICAL);
    szActorTitle_staticbox->Lower();
    wxStaticBoxSizer* szActorTitle = new wxStaticBoxSizer(szActorTitle_staticbox, wxHORIZONTAL);
    szActorName_staticbox->Lower();
    wxStaticBoxSizer* szActorName = new wxStaticBoxSizer(szActorName_staticbox, wxHORIZONTAL);
    wxBoxSizer* szActorLeft = new wxBoxSizer(wxVERTICAL);
    szActorLeft->Add(stActor, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szActorLeft->Add(listActor, 1, wxALL|wxEXPAND, 1);
    szActorLeft->Add(btnActorMaxNumber, 0, wxALL|wxEXPAND, 1);
    szActor->Add(szActorLeft, 0, wxEXPAND, 0);
    szActorName->Add(tcActorName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorRightTopLeftTopLeft->Add(szActorName, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorTitle->Add(tcActorTitle, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorRightTopLeftTopLeft->Add(szActorTitle, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorRightTopLeftTop->Add(szActorRightTopLeftTopLeft, 1, wxEXPAND, 0);
    szActorWalkingGraphic->Add(bmpWalkingGraphic, 0, wxALIGN_BOTTOM|wxRIGHT, 1);
    szActorWalkingGraphicOptions->Add(chbActorWalkingGraphicTranslucent, 1, wxBOTTOM|wxLEFT, 1);
    szActorWalkingGraphicOptions->Add(btnActorWalkingGraphic, 0, wxALIGN_BOTTOM|wxLEFT|wxTOP, 1);
    szActorWalkingGraphic->Add(szActorWalkingGraphicOptions, 1, wxEXPAND, 0);
    szActorRightTopLeftTop->Add(szActorWalkingGraphic, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorRightTopLeft->Add(szActorRightTopLeftTop, 0, wxEXPAND, 0);
    szActorInitialLevel->Add(spinActorInitialLevel, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorRightTopLeftBottom->Add(szActorInitialLevel, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorMaxLevel->Add(spinActorMaxLevel, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorRightTopLeftBottom->Add(szActorMaxLevel, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorCriticalHitRate->Add(chbActorCriticalHitRate, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 1);
    szActorCriticalHitRate->Add(spinActorCriticalHitRate, 1, wxALIGN_CENTER_VERTICAL, 1);
    szActorRightTopLeftBottom->Add(szActorCriticalHitRate, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorRightTopLeft->Add(szActorRightTopLeftBottom, 1, wxEXPAND, 0);
    gszActorRight->Add(szActorRightTopLeft, 0, wxEXPAND, 0);
    gszActorInitialEquipment->Add(stActorInitialWeapon, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszActorInitialEquipment->Add(chActorInitialWeapon, 0, wxEXPAND, 0);
    gszActorInitialEquipment->Add(stActorInitialShield, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszActorInitialEquipment->Add(chActorInitialShield, 0, wxEXPAND, 0);
    gszActorInitialEquipment->Add(stActorInitialArmor, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszActorInitialEquipment->Add(chActorInitialArmor, 0, wxEXPAND, 0);
    gszActorInitialEquipment->Add(stActorInitialHelmet, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszActorInitialEquipment->Add(chActorInitialHelmet, 0, wxEXPAND, 0);
    gszActorInitialEquipment->Add(stActorInitialAccessory, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszActorInitialEquipment->Add(chActorInitialAccessory, 0, wxEXPAND, 0);
    gszActorInitialEquipment->AddGrowableCol(1);
    szActorInitialEquipment->Add(gszActorInitialEquipment, 1, wxEXPAND, 0);
    gszActorRight->Add(szActorInitialEquipment, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorFaceGraphic->Add(bmpActorFaceGraphic, 0, wxBOTTOM, 1);
    szActorFaceGraphic->Add(btnActorFaceGraphic, 0, wxTOP, 1);
    szActorRightBottomLeftTopLeft->Add(szActorFaceGraphic, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorOptions->Add(chbActorOptionsUse2Weapons, 0, wxBOTTOM|wxEXPAND, 1);
    szActorOptions->Add(chbActorOptionsFixedEquipment, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szActorOptions->Add(chbActorOptionsControlledByAI, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szActorOptions->Add(chbActorOptionsArmored, 0, wxEXPAND|wxTOP, 1);
    szActorRightBottomLeftTopLeft->Add(szActorOptions, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorRightBottomLeftTop->Add(szActorRightBottomLeftTopLeft, 0, wxEXPAND, 0);
    szActorMaxHP->Add(bmpActorMaxHP, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorMaxHP, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorMaxMP->Add(bmpActorMaxMP, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorMaxMP, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorAttack->Add(bmpActorAttack, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorDefense->Add(bmpActorDefense, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorDefense, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorIntelligence->Add(bmpActorIntelligence, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorIntelligence, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorAgility->Add(bmpActorAgility, 0, 0, 0);
    gszActorCapacityCurves->Add(szActorAgility, 1, wxALIGN_CENTER_VERTICAL, 0);
    szActorCapacityCurves->Add(gszActorCapacityCurves, 1, wxEXPAND, 0);
    szActorRightBottomLeftTop->Add(szActorCapacityCurves, 1, wxLEFT|wxRIGHT, 1);
    szActorRightBottomLeft->Add(szActorRightBottomLeftTop, 0, wxEXPAND, 0);
    szActorExperienceCurve->Add(tcActorExperienceCurve, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szActorExperienceCurve->Add(btnActorExperienceCurve, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szActorRightBottomLeft->Add(szActorExperienceCurve, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    gszActorRight->Add(szActorRightBottomLeft, 0, wxEXPAND, 0);
    szActorAnimationWithoutWeapons->Add(chActorAnimationWithoutWeapons, 1, 0, 0);
    szActorRightBottomRight->Add(szActorAnimationWithoutWeapons, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorSkills->Add(lcActorSkills, 1, wxBOTTOM|wxEXPAND, 1);
    szActorSkillsBattleCommand->Add(chbActorSkillsBattleCommand, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND|wxRIGHT|wxTOP, 1);
    szActorSkillsBattleCommand->Add(tcActorSkillsBattleCommand, 1, wxLEFT|wxTOP, 1);
    szActorSkills->Add(szActorSkillsBattleCommand, 0, wxEXPAND, 0);
    szActorRightBottomRight->Add(szActorSkills, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorStateRates->Add(listActorStateRates, 1, wxEXPAND, 0);
    szActorRates->Add(szActorStateRates, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorAttributeRates->Add(listActorAttributeRates, 1, wxEXPAND, 0);
    szActorRates->Add(szActorAttributeRates, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szActorRightBottomRight->Add(szActorRates, 1, wxEXPAND, 0);
    gszActorRight->Add(szActorRightBottomRight, 1, wxEXPAND, 0);
    gszActorRight->AddGrowableRow(1);
    gszActorRight->AddGrowableCol(1);
    szActor->Add(gszActorRight, 1, wxEXPAND, 0);
    pnActor->SetSizer(szActor);
    szSkillLeft->Add(stSkill, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szSkillLeft->Add(listSkill, 1, wxALL|wxEXPAND, 1);
    szSkillLeft->Add(btnSkillMaxNumber, 0, wxALL|wxEXPAND, 1);
    szSkill->Add(szSkillLeft, 0, wxEXPAND, 0);
    szSkillName->Add(stSkillName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightTop->Add(szSkillName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillType->Add(chSkillType, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    szSkillRightTop->Add(szSkillType, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillMPCost->Add(spinSkillMPCost, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightTop->Add(szSkillMPCost, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillRightTop->Add(0, 0, 1, wxEXPAND, 0);
    szSkillRight->Add(szSkillRightTop, 0, wxEXPAND, 0);
    szSkillDescription->Add(tcSkillDescription, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszSkillRightMiddle->Add(szSkillDescription, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillTarget->Add(chSkillTarget, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszSkillRightMiddle->Add(szSkillTarget, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillCastMessageCharacterName->Add(stSkillCastMessageCharacterName, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT, 1);
    szSkillCastMessageCharacterName->Add(tcSkillCastMessage1, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT, 1);
    szSkillCastMessage->Add(szSkillCastMessageCharacterName, 1, wxEXPAND, 0);
    szSkillCastMessage->Add(tcSkillCastMessage2, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillCastMessageActions->Add(btnSkillCastMessageCast, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP, 1);
    szSkillCastMessageActions->Add(btnSkillCastMessageThrow, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);
    szSkillCastMessageActions->Add(btnSkillCastMessageUse, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 1);
    szSkillCastMessage->Add(szSkillCastMessageActions, 1, wxEXPAND, 0);
    szSkillMessages->Add(szSkillCastMessage, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillFailMessage->Add(stSkillFailMessageCharacterName, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szSkillFailMessage->Add(tcSkillFailMessage, 1, wxLEFT, 1);
    szSkillMessages->Add(szSkillFailMessage, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    gszSkillRightMiddle->Add(szSkillMessages, 1, wxEXPAND, 0);
    szSkillAnimation->Add(bmpSkillAnimation, 0, wxBOTTOM, 1);
    szSkillAnimation->Add(chSkillAnimation, 0, wxEXPAND|wxTOP, 1);
    gszSkillRightMiddle->Add(szSkillAnimation, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    gszSkillRightMiddle->AddGrowableCol(0);
    szSkillRightMiddle->Add(gszSkillRightMiddle, 1, wxEXPAND, 0);
    szSkillRight->Add(szSkillRightMiddle, 0, wxEXPAND, 0);
    szSkillAttackInfluence->Add(slSkillAttackInfluence, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightBottomLeft->Add(szSkillAttackInfluence, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillMagicInfluence->Add(slSkillMagicInfluence, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightBottomLeft->Add(szSkillMagicInfluence, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillVariance->Add(slSkillVariance, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightBottomLeft->Add(szSkillVariance, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillRightBottom->Add(szSkillRightBottomLeft, 1, wxEXPAND, 0);
    szSkillEffectRate->Add(spinSkillEffectRate, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSkillRightBottomMiddleLeft->Add(szSkillEffectRate, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillAffectCapacities->Add(chbSkillAffectHP, 0, wxBOTTOM|wxEXPAND, 1);
    szSkillAffectCapacities->Add(chbSkillAffectMP, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectAttack, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectDefense, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectIntelligence, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectAgility, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectAbsorbHPMP, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szSkillAffectCapacities->Add(chbSkillAffectArmorBypass, 0, wxEXPAND|wxTOP, 1);
    szSkillRightBottomMiddleLeft->Add(szSkillAffectCapacities, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillRightBottom->Add(szSkillRightBottomMiddleLeft, 0, wxEXPAND, 0);
    szSkillSuccessRate->Add(spinSkillSuccessRate, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szSkillSuccessRate->Add(stSkillSuccessRate, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szSkillRightBottomMiddleRight->Add(szSkillSuccessRate, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillChangeStates->Add(listSkillChangeStatus, 1, wxEXPAND, 0);
    szSkillRightBottomMiddleRight->Add(szSkillChangeStates, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillRightBottom->Add(szSkillRightBottomMiddleRight, 1, wxEXPAND, 0);
    szSkillAttributes->Add(listSkillAttributes, 1, wxBOTTOM|wxEXPAND, 1);
    szSkillAttributes->Add(chbSkillAttributesDefenseUpDown, 0, wxEXPAND|wxTOP, 1);
    szSkillRightBottom->Add(szSkillAttributes, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSkillRight->Add(szSkillRightBottom, 1, wxEXPAND, 0);
    szSkill->Add(szSkillRight, 1, wxEXPAND, 0);
    pnSkill->SetSizer(szSkill);
    szItemLeft->Add(stItem, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szItemLeft->Add(listItem, 1, wxALL|wxEXPAND, 1);
    szItemLeft->Add(btnItemMaxNumber, 0, wxALL|wxEXPAND, 1);
    szItem->Add(szItemLeft, 0, wxEXPAND, 0);
    szItemName->Add(tcItemName, 1, 0, 0);
    szItemRightTop->Add(szItemName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemType->Add(chItemType, 1, 0, 0);
    szItemRightTop->Add(szItemType, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemCost->Add(spinItemCost, 1, 0, 0);
    szItemRightTop->Add(szItemCost, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemTimesUsed->Add(chItemTimesUsed, 1, 0, 0);
    szItemRightTop->Add(szItemTimesUsed, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemRight->Add(szItemRightTop, 0, wxEXPAND, 0);
    szItemDescription->Add(tcItemDescription, 1, 0, 0);
    szItemRightMiddle->Add(szItemDescription, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemRightMiddle->Add(rbxActionRange, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemRight->Add(szItemRightMiddle, 0, wxEXPAND, 0);
    szItemCanBeUsedBy->Add(listItemCanBeUsedBy, 1, wxEXPAND, 0);
    szItemRightBottom->Add(szItemCanBeUsedBy, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemChangeStates->Add(listItemChangeStates, 1, wxEXPAND, 0);
    szItemRightBottom->Add(szItemChangeStates, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemHPRecover->Add(stItemHPRecoverMax, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szItemHPRecover->Add(spinItemHPRecoverPercent, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemHPRecover->Add(stItemHPRecoverPercentPlus, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemHPRecover->Add(spinItemHPRecoverPoints, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemHPRecover->Add(stItemHPRecoverHP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szItemRightBottomRight->Add(szItemHPRecover, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemMPRecover->Add(stItemMPRecoverMax, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szItemMPRecover->Add(spinItemMPRecoverPercent, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemMPRecover->Add(stItemMPRecoverPercentPlus, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemMPRecover->Add(spinItemMPRecoverPoints, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szItemMPRecover->Add(stItemMPRecoverMP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szItemRightBottomRight->Add(szItemMPRecover, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szItemOptions->Add(chbItemOptionsDisabledInBattle, 0, wxBOTTOM|wxEXPAND, 1);
    szItemOptions->Add(chbItemOptionsOnlySuitableInFallenCharacters, 0, wxEXPAND|wxTOP, 1);
    szItemRightBottomRight->Add(szItemOptions, 0, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szItemRightBottom->Add(szItemRightBottomRight, 0, wxEXPAND, 0);
    szItemRight->Add(szItemRightBottom, 1, wxEXPAND, 0);
    szItem->Add(szItemRight, 1, wxEXPAND, 0);
    pnItem->SetSizer(szItem);
    szEnemyLeft->Add(stEnemy, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szEnemyLeft->Add(listEnemy, 1, wxALL|wxEXPAND, 1);
    szEnemyLeft->Add(btnEnemyMaxNumber, 0, wxALL|wxEXPAND, 1);
    szEnemy->Add(szEnemyLeft, 0, wxEXPAND, 0);
    szEnemyName->Add(tcEnemyName, 1, 0, 0);
    szEnemyRightTopLeft->Add(szEnemyName, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyMaxHP->Add(spinEnemyMaxHP, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyMaxHP, 0, wxEXPAND, 0);
    szEnemyAttack->Add(spinEnemyAttack, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyAttack, 0, wxEXPAND, 0);
    szEnemyIntelligence->Add(spinEnemyIntelligence, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyIntelligence, 0, wxEXPAND, 0);
    szEnemyMaxMP->Add(spinEnemyMaxMP, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyMaxMP, 0, wxEXPAND, 0);
    szEnemyDefense->Add(spinEnemyDefense, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyDefense, 0, wxEXPAND, 0);
    szEnemyAgility->Add(spinEnemyAgility, 1, 0, 0);
    gszEnemyParameters->Add(szEnemyAgility, 0, wxEXPAND, 0);
    szEnemyParameters->Add(gszEnemyParameters, 1, 0, 0);
    szEnemyRightTopLeft->Add(szEnemyParameters, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyRightTop->Add(szEnemyRightTopLeft, 1, wxEXPAND, 0);
    szEnemyGraphic->Add(bmpEnemyGraphic, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szEnemyGraphicOptions->Add(chbEnemyGraphicTransparent, 0, wxBOTTOM|wxEXPAND|wxLEFT, 1);
    szEnemyGraphicOptions->Add(chbEnemyGraphicFlying, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxTOP, 1);
    szEnemyGraphicOptions->Add(0, 0, 1, wxEXPAND, 0);
    szEnemyGraphicOptions->Add(btnEnemyGraphic, 0, wxLEFT|wxTOP, 1);
    szEnemyGraphic->Add(szEnemyGraphicOptions, 1, wxEXPAND, 0);
    szEnemyRightTop->Add(szEnemyGraphic, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyRight->Add(szEnemyRightTop, 0, wxEXPAND, 0);
    szEnemyGetEXP->Add(spinEnemyGetEXP, 1, wxALIGN_CENTER_VERTICAL, 0);
    szEnemyOnSuccessLeft->Add(szEnemyGetEXP, 1, wxEXPAND|wxRIGHT, 1);
    szEnemyGetMoney->Add(spinEnemyGetMoney, 1, wxALIGN_CENTER_VERTICAL, 0);
    szEnemyOnSuccessLeft->Add(szEnemyGetMoney, 1, wxEXPAND|wxRIGHT, 1);
    szEnemyOnSuccess->Add(szEnemyOnSuccessLeft, 0, wxEXPAND, 0);
    szEnemyGetItem->Add(chEnemyGetItem, 1, wxALIGN_CENTER_VERTICAL, 0);
    szEnemyOnSuccessRight->Add(szEnemyGetItem, 1, wxEXPAND|wxLEFT, 1);
    szEnemyGetItemChance->Add(0, 0, 1, wxEXPAND, 0);
    szEnemyGetItemChance->Add(spinEnemyGetItemChance, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szEnemyGetItemChance->Add(stEnemyGetItemChance, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szEnemyOnSuccessRight->Add(szEnemyGetItemChance, 1, wxEXPAND|wxLEFT, 1);
    szEnemyOnSuccess->Add(szEnemyOnSuccessRight, 1, wxEXPAND, 0);
    szEnemyRightBottomLeftTop->Add(szEnemyOnSuccess, 1, wxLEFT|wxRIGHT, 1);
    szCriticalHitRate->Add(chbEnemyCriticalHitRate, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 1);
    szCriticalHitRate->Add(spinEnemyCriticalHitRate, 0, wxALIGN_CENTER_VERTICAL, 1);
    szEnemyRightBottomLeftTopRight->Add(szCriticalHitRate, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyOptions->Add(chbEnemyFailOften, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    szEnemyRightBottomLeftTopRight->Add(szEnemyOptions, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyRightBottomLeftTop->Add(szEnemyRightBottomLeftTopRight, 0, wxEXPAND, 0);
    szEnemyRightBottomLeft->Add(szEnemyRightBottomLeftTop, 0, wxEXPAND, 0);
    szEnemyActions->Add(lcEnemyActions, 1, wxEXPAND, 0);
    szEnemyRightBottomLeft->Add(szEnemyActions, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyRightBottom2->Add(szEnemyRightBottomLeft, 2, wxEXPAND, 0);
    szAttributesResistance->Add(listAttributesResistance, 1, wxEXPAND, 0);
    szEnemyResistance->Add(szAttributesResistance, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStatesResistance->Add(listStatesResistance, 1, wxEXPAND, 0);
    szEnemyResistance->Add(szStatesResistance, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyRightBottom2->Add(szEnemyResistance, 1, wxEXPAND, 0);
    szEnemyRightBottom->Add(szEnemyRightBottom2, 1, wxEXPAND, 0);
    szEnemyRight->Add(szEnemyRightBottom, 1, wxEXPAND, 0);
    szEnemy->Add(szEnemyRight, 1, wxEXPAND, 0);
    pnEnemy->SetSizer(szEnemy);
    szTroopLeft->Add(stTroop, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szTroopLeft->Add(listTroop, 1, wxALL|wxEXPAND, 1);
    szTroopLeft->Add(btnTroopMaxNumber, 0, wxALL|wxEXPAND, 1);
    szTroop->Add(szTroopLeft, 0, wxEXPAND, 0);
    szTroopName->Add(tcTroopName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTroopRightTop->Add(szTroopName, 1, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szTroopRightTop->Add(btnTroopAutocomplete, 1, wxALIGN_CENTER_VERTICAL|wxALL, 1);
    szTroopRightTop->Add(btnTroopTestBattle, 1, wxALIGN_CENTER_VERTICAL|wxALL, 1);
    szTroopRightTop->Add(btnTroopChangeBackground, 1, wxALIGN_CENTER_VERTICAL|wxALL, 1);
    szTroopRight->Add(szTroopRightTop, 0, wxEXPAND, 0);
    szTroopRightMiddle->Add(bmpTroop, 0, wxALL, 1);
    szTroopRightMiddleMiddle->Add(0, 0, 1, wxEXPAND, 0);
    szTroopRightMiddleMiddle->Add(btnTroopAdd, 0, wxALL|wxEXPAND, 1);
    szTroopRightMiddleMiddle->Add(btnTroopRemove, 0, wxALL|wxEXPAND, 1);
    szTroopRightMiddleMiddle->Add(btnTroopEmpty, 0, wxALL|wxEXPAND, 1);
    szTroopRightMiddleMiddle->Add(btnTroopAlign, 0, wxALL|wxEXPAND, 1);
    szTroopRightMiddleMiddle->Add(0, 0, 1, wxEXPAND, 0);
    szTroopRightMiddle->Add(szTroopRightMiddleMiddle, 0, wxEXPAND, 0);
    szTroopRightMiddle->Add(listTroopMonster, 1, wxALL|wxEXPAND, 1);
    szTroopRight->Add(szTroopRightMiddle, 0, wxEXPAND, 0);
    szTroopEncountersOn->Add(listTroopEncountersOn, 1, wxEXPAND, 0);
    szTroopRightBottom->Add(szTroopEncountersOn, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTroopBattleEventsTop->Add(szTroopBattleEventsNewPage, 1, wxBOTTOM|wxRIGHT, 1);
    szTroopBattleEventsTop->Add(szTroopBattleEventsCopyPage, 1, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szTroopBattleEventsTop->Add(szTroopBattleEventsPastePage, 1, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szTroopBattleEventsTop->Add(szTroopBattleEventsDeletePage, 1, wxBOTTOM|wxLEFT, 1);
    szTroopBattleEvents->Add(szTroopBattleEventsTop, 0, wxEXPAND, 0);
    szTroopBattleEventsConditions->Add(stTroopBattleEventsConditions, 0, wxALIGN_CENTER_VERTICAL|wxALL, 1);
    szTroopBattleEventsConditions->Add(tcTroopBattleEventsConditions, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    szTroopBattleEventsConditions->Add(btnTroopBattleEventsConditions, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxTOP, 1);
    szTroopBattleEventsBottom->Add(szTroopBattleEventsConditions, 0, wxEXPAND, 0);
    szTroopBattleEventsBottom->Add(listTroopBattleEvents, 1, wxALL|wxEXPAND, 1);
    pnTroopBattleEvents->SetSizer(szTroopBattleEventsBottom);
    nbTroopBattleEvents->AddPage(pnTroopBattleEvents, _("1"));
    szTroopBattleEvents->Add(nbTroopBattleEvents, 1, wxEXPAND|wxTOP, 1);
    szTroopRightBottom->Add(szTroopBattleEvents, 2, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTroopRight->Add(szTroopRightBottom, 1, wxEXPAND, 0);
    szTroop->Add(szTroopRight, 1, wxEXPAND, 0);
    pnTroop->SetSizer(szTroop);
    szAttributeLeft->Add(stAttribute, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szAttributeLeft->Add(listAttribute, 1, wxALL|wxEXPAND, 1);
    szAttributeLeft->Add(btnAttributeMaxNumber, 0, wxALL|wxEXPAND, 1);
    szAttribute->Add(szAttributeLeft, 0, wxEXPAND, 0);
    szAttributeName->Add(tcAttributeName, 1, 0, 0);
    szAttributeRight->Add(szAttributeName, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAttributeRight->Add(rbAttributeClassification, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    grid_sizer_12->Add(szAttributeEffectRateA, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(SpinAttributeEffectRateA, 0, wxEXPAND, 0);
    grid_sizer_12->Add(szAttributeEffectRateAPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(szAttributeEffectRateB, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(SpinAttributeEffectRateB, 0, wxEXPAND, 0);
    grid_sizer_12->Add(szAttributeEffectRateBPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(szAttributeEffectRateC, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(SpinAttributeEffectRateC, 0, wxEXPAND, 0);
    grid_sizer_12->Add(szAttributeEffectRateCPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(szAttributeEffectRateD, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(SpinAttributeEffectRateD, 0, wxEXPAND, 0);
    grid_sizer_12->Add(szAttributeEffectRateDPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(szAttributeEffectRateE, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->Add(SpinAttributeEffectRateE, 0, wxEXPAND, 0);
    grid_sizer_12->Add(szAttributeEffectRateEPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    grid_sizer_12->AddGrowableCol(1);
    szAttributeEffectRate->Add(grid_sizer_12, 1, wxEXPAND, 0);
    szAttributeRight->Add(szAttributeEffectRate, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAttribute->Add(szAttributeRight, 0, wxEXPAND, 0);
    pnAttribute->SetSizer(szAttribute);
    szStateLeft->Add(stState, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szStateLeft->Add(listState, 1, wxALL|wxEXPAND, 1);
    szStateLeft->Add(btnStateMaxNumber, 0, wxALL|wxEXPAND, 1);
    szState->Add(szStateLeft, 0, wxEXPAND, 0);
    szStateName->Add(tcStateName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szStateRightTop->Add(szStateName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateType->Add(chStateType, 1, wxALIGN_CENTER_VERTICAL, 0);
    szStateRightTop->Add(szStateType, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateColor->Add(chStateColor, 0, wxALIGN_CENTER_VERTICAL, 0);
    szStateRightTop->Add(szStateColor, 0, wxEXPAND|wxRIGHT, 1);
    szStatePriority->Add(spinStatePriority, 0, wxALIGN_CENTER_VERTICAL, 0);
    szStateRightTop->Add(szStatePriority, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateActionRange->Add(chStateActionRange, 1, wxALIGN_CENTER_VERTICAL, 0);
    szStateRightTop->Add(szStateActionRange, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateRight->Add(szStateRightTop, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateA, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(spinStateEffectRateA, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateAPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(stStateEffectRateB, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(spinStateEffectRateB, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateBPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(stStateEffectRateC, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(spinStateEffectRateC, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateCPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(stStateEffectRateD, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(spinStateEffectRateD, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateDPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(stStateEffectRateE, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->Add(spinStateEffectRateE, 0, wxEXPAND, 0);
    gszStateEffectRate->Add(stStateEffectRateEPercent, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateEffectRate->AddGrowableCol(1);
    szStateEffectRate->Add(gszStateEffectRate, 1, wxEXPAND, 0);
    szStateRightMiddle->Add(szStateEffectRate, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    gszStateNaturalHealing->Add(stStateNaturalHealingAfter, 0, wxALIGN_CENTER_VERTICAL|wxALIGN_RIGHT, 0);
    gszStateNaturalHealing->Add(spinStateNaturalHealingTurn, 0, 0, 0);
    gszStateNaturalHealing->Add(stStateNaturalHealingTurn, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateNaturalHealing->Add(0, 0, 1, wxEXPAND, 0);
    gszStateNaturalHealing->Add(spinStateNaturalHealingHealChance, 0, 0, 0);
    gszStateNaturalHealing->Add(stStateNaturalHealingHealChance, 0, wxALIGN_CENTER_VERTICAL, 0);
    szStateNaturalHealing->Add(gszStateNaturalHealing, 1, wxEXPAND, 0);
    szStateHealMethod->Add(szStateNaturalHealing, 1, wxEXPAND, 0);
    szStateAfterHitHealing->Add(stStateAfterHitHealingPhysicalAttack, 0, wxBOTTOM, 1);
    szStateAfterHitHealingHealChance->Add(spinStateAfterHitHealingHealChance, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateAfterHitHealingHealChance->Add(stStateAfterHitHealingHealChance, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateAfterHitHealing->Add(szStateAfterHitHealingHealChance, 1, wxEXPAND, 0);
    szStateHealMethod->Add(szStateAfterHitHealing, 1, wxEXPAND, 0);
    szStateRightMiddle->Add(szStateHealMethod, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    gszStateDecreaseCapacities->Add(chbStateDecreaseAttack, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStateDecreaseCapacities->Add(chbStateDecreaseIntelligence, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStateDecreaseCapacities->Add(chbStateDecreaseDefense, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStateDecreaseCapacities->Add(chbStateDecreaseAgility, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    szStateDecreaseCapacities->Add(gszStateDecreaseCapacities, 1, wxEXPAND, 0);
    szStateRightMiddleRightTop->Add(szStateDecreaseCapacities, 2, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateAttackChance->Add(spinStateAttackChance, 1, wxRIGHT, 1);
    szStateAttackChance->Add(stStateAttackChance, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateRightMiddleRightTop->Add(szStateAttackChance, 1, wxLEFT|wxRIGHT, 1);
    szStateRightMiddleRight->Add(szStateRightMiddleRightTop, 1, wxEXPAND, 0);
    gszStateSkillExceptions->Add(chbStateSkillExceptionsAttackChance, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStateSkillExceptions->Add(spinStateSkillExceptionsAttackChance, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszStateSkillExceptions->Add(stStateSkillExceptionsAttackChance, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateSkillExceptions->Add(chbStateSkillExceptionsSkillChance, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStateSkillExceptions->Add(spinStateSkillExceptionsSkillChance, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszStateSkillExceptions->Add(stStateSkillExceptionsSkillChance, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszStateSkillExceptions->AddGrowableRow(0);
    gszStateSkillExceptions->AddGrowableRow(1);
    szStateSkillExceptions->Add(gszStateSkillExceptions, 1, wxEXPAND, 0);
    szStateRightMiddleRight->Add(szStateSkillExceptions, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateRightMiddle->Add(szStateRightMiddleRight, 1, wxEXPAND, 0);
    szStateRight->Add(szStateRightMiddle, 0, wxEXPAND, 0);
    szStateMessageActorHit->Add(stStateMessageActorHit, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMessageActorHit->Add(tcStateMessageActorHit, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMessages->Add(szStateMessageActorHit, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateMessageEnemyHit->Add(stStateMessageEnemyHit, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMessageEnemyHit->Add(tcStateMessageEnemyHit, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMessages->Add(szStateMessageEnemyHit, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateMessageAlreadyInState->Add(stStateMessageAlreadyInState, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMessageAlreadyInState->Add(tcStateMessageAlreadyInState, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMessages->Add(szStateMessageAlreadyInState, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateMessageNormalState->Add(stStateMessageNormalState, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMessageNormalState->Add(tcStateMessageNormalState, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMessages->Add(szStateMessageNormalState, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateMessageRecover->Add(stStateMessageRecover, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMessageRecover->Add(tcStateMessageRecover, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMessages->Add(szStateMessageRecover, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateRightBottom->Add(szStateMessages, 1, wxEXPAND, 0);
    szStateHPReductionInEveryTurn->Add(stStateHPReductionInEveryTurnMax, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateHPReductionInEveryTurn->Add(spinStateHPReductionInEveryTurnMax, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateHPReductionInEveryTurn->Add(stStateHPReductionInEveryTurnPercentPlus, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateHPReductionInEveryTurn->Add(spinStateHPReductionInEveryTurnHP, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateHPReductionInEveryTurn->Add(stStateHPReductionInEveryTurnHP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateHPReduction->Add(szStateHPReductionInEveryTurn, 1, wxEXPAND, 0);
    szStateHPReductionOnMove->Add(spinStateHPReductionOnMoveSteps, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateHPReductionOnMove->Add(stStateHPReductionOnMoveSteps, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateHPReductionOnMove->Add(spinStateHPReductionOnMoveHP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateHPReductionOnMove->Add(stStateHPReductionOnMoveHP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateHPReduction->Add(szStateHPReductionOnMove, 1, wxEXPAND, 0);
    szStateHPMPReduction->Add(szStateHPReduction, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateMPReductionInEveryTurn->Add(stStateMPReductionInEveryTurnMax, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMPReductionInEveryTurn->Add(spinStateMPReductionInEveryTurnMax, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateMPReductionInEveryTurn->Add(stStateMPReductionInEveryTurnPercentPlus, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateMPReductionInEveryTurn->Add(spinStateMPReductionInEveryTurnMP, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateMPReductionInEveryTurn->Add(stStateMPReductionInEveryTurnMP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMPReduction->Add(szStateMPReductionInEveryTurn, 1, wxEXPAND, 0);
    szStateMPReductionOnMove->Add(spinStateMPReductionOnMoveSteps, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szStateMPReductionOnMove->Add(stStateMPReductionOnMoveSteps, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateMPReductionOnMove->Add(spinStateMPReductionOnMoveMP, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szStateMPReductionOnMove->Add(stStateMPReductionOnMoveMP, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szStateMPReduction->Add(szStateMPReductionOnMove, 1, wxEXPAND, 0);
    szStateHPMPReduction->Add(szStateMPReduction, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szStateRightBottom->Add(szStateHPMPReduction, 0, wxEXPAND, 0);
    szStateRight->Add(szStateRightBottom, 1, wxEXPAND, 0);
    szState->Add(szStateRight, 1, wxEXPAND, 0);
    pnState->SetSizer(szState);
    szAnimationLeft->Add(stAnimation, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szAnimationLeft->Add(listAnimation, 1, wxALL|wxEXPAND, 1);
    szAnimationLeft->Add(btnAnimationMaxNumber, 0, wxALL|wxEXPAND, 1);
    szAnimation->Add(szAnimationLeft, 0, wxEXPAND, 0);
    szAnimationName->Add(stAnimationName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szAnimationRightTop->Add(szAnimationName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationGraphic->Add(tcAnimationGraphic, 1, wxALIGN_CENTER_VERTICAL, 0);
    szAnimationGraphic->Add(btnAnimationGraphic, 0, 0, 0);
    szAnimationRightTop->Add(szAnimationGraphic, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szEnemyTargetTest->Add(chEnemyTargetTest, 1, wxALIGN_CENTER_VERTICAL, 0);
    szAnimationRightTop->Add(szEnemyTargetTest, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationRight->Add(szAnimationRightTop, 0, wxEXPAND, 0);
    szAnimationNumberOfFrames->Add(spinAnimationNumberOfFrames, 1, 0, 0);
    szAnimationRightMiddleLeft->Add(szAnimationNumberOfFrames, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationFrames->Add(szAnimationFramesPrevious, 0, wxBOTTOM|wxEXPAND, 1);
    szAnimationFrames->Add(listAnimationFrames, 1, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szAnimationFrames->Add(btnAnimationFramesNext, 0, wxEXPAND|wxTOP, 1);
    szAnimationRightMiddleLeft->Add(szAnimationFrames, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationRightMiddle->Add(szAnimationRightMiddleLeft, 0, wxEXPAND, 0);
    szAnimationTimeline->Add(lcAnimationTimeline, 1, wxEXPAND, 0);
    szAnimationRightMiddleMiddle->Add(szAnimationTimeline, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationRightMiddleMiddle->Add(bmpAnimationCanvas, 2, wxALIGN_CENTER|wxALL|wxEXPAND, 1);
    szAnimationRightMiddle->Add(szAnimationRightMiddleMiddle, 1, wxEXPAND, 0);
    szAnimationRange->Add(chAnimationRange, 1, 0, 0);
    szAnimationRightMiddleRight->Add(szAnimationRange, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationYordinate->Add(chAnimationYOrdinate, 1, 0, 0);
    szAnimationRightMiddleRight->Add(szAnimationYordinate, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimationRightMiddleRight->Add(0, 0, 1, wxEXPAND, 0);
    szAnimationRightMiddleRight->Add(chbAnimationSnapToGrid, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(btnAnimationLikePrevious, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(btnAnimationEdit, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(btnAnimationComplete, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(btnAnimationMakeAll, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(btnAnimationPlay, 0, wxALL|wxEXPAND, 1);
    szAnimationRightMiddleRight->Add(0, 0, 1, wxEXPAND, 0);
    szAnimationRightMiddle->Add(szAnimationRightMiddleRight, 0, wxEXPAND, 0);
    szAnimationRight->Add(szAnimationRightMiddle, 1, wxEXPAND, 0);
    szAnimationRight->Add(listAnimationGraphic, 0, wxALL|wxEXPAND, 1);
    szAnimation->Add(szAnimationRight, 1, wxEXPAND, 0);
    pnAnimation->SetSizer(szAnimation);
    szTerrainLeft->Add(stTerrain, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szTerrainLeft->Add(listTerrain, 1, wxALL|wxEXPAND, 1);
    szTerrainLeft->Add(btnTerrainMaxNumber, 0, wxALL|wxEXPAND, 1);
    szTerrain->Add(szTerrainLeft, 0, wxEXPAND, 0);
    szTerrainName->Add(tcTerrainName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTerrainRightTop->Add(szTerrainName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTerrainDamage->Add(spinTerrainDamage, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTerrainRightTop->Add(szTerrainDamage, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTerrainEncounterRate->Add(spinTerrainEncounterRate, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTerrainEncounterRate->Add(stTerrainEncounterRate, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTerrainRightTop->Add(szTerrainEncounterRate, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTerrainRight->Add(szTerrainRightTop, 0, wxEXPAND, 0);
    szTerrainBattleBackgroundGraphic->Add(bmpTerrainBattleBackgroundGraphic, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 1);
    szTerrainBattleBackgroundGraphicBottom->Add(stTerrainBattleBackgroundGraphic, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP, 1);
    szTerrainBattleBackgroundGraphicBottom->Add(btnTerrainBattleBackgroundGraphic, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 1);
    szTerrainBattleBackgroundGraphic->Add(szTerrainBattleBackgroundGraphicBottom, 0, wxEXPAND, 0);
    szTerrainRight->Add(szTerrainBattleBackgroundGraphic, 0, wxALL|wxEXPAND, 1);
    szTerrainVehiclePermissions->Add(chbTerrainVehicleSmallShip, 1, wxBOTTOM|wxEXPAND, 1);
    szTerrainVehiclePermissions->Add(chbTerrainVehicleBigShip, 1, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szTerrainVehiclePermissions->Add(chbTerrainVehicleAirShip, 1, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szTerrainVehiclePermissions->Add(chbTerrainVehicleShipCanLand, 1, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szTerrainRightBottom->Add(szTerrainVehiclePermissions, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTerrainRightBottom->Add(rbTerrainTransparency, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTerrainRight->Add(szTerrainRightBottom, 0, wxEXPAND, 0);
    szTerrain->Add(szTerrainRight, 0, wxEXPAND, 0);
    pnTerrain->SetSizer(szTerrain);
    szTilesetLeft->Add(stTileset, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szTilesetLeft->Add(listTileset, 1, wxALL|wxEXPAND, 1);
    szTilesetLeft->Add(btnTilesetMaxNumber, 0, wxALL|wxEXPAND, 1);
    szTileset->Add(szTilesetLeft, 0, wxEXPAND, 0);
    szTilesetName->Add(tcTilesetName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTilesetRightTop->Add(szTilesetName, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTilesetGraphic->Add(tcTilesetGraphic, 1, wxALIGN_CENTER_VERTICAL|wxALL, 0);
    szTilesetRightTop->Add(szTilesetGraphic, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTilesetRight->Add(szTilesetRightTop, 0, wxEXPAND, 0);
    szTilesetLowerLayerModify->Add(btnTilesetLowerLayerTerrainType, 0, wxBOTTOM|wxEXPAND, 1);
    szTilesetLowerLayerModify->Add(btnTilesetLowerLayerBlocking, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szTilesetLowerLayerModify->Add(btnTilesetLowerLayerFourDirections, 0, wxEXPAND|wxTOP, 1);
    szTilesetLowerLayerLeft->Add(szTilesetLowerLayerModify, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTilesetLowerLayerLeft->Add(btnTilesetLowerLayerChangeEverything, 0, wxALL|wxEXPAND, 1);
    szTilesetWaterAnimation->Add(bmpTilesetWaterAnimation, 0, 0, 0);
    szTilesetWaterAnimation->Add(rbTilesetWaterAnimationSequence, 0, wxEXPAND, 0);
    szTilesetWaterAnimation->Add(rbTilesetWaterAnimationSpeed, 0, wxEXPAND, 0);
    szTilesetLowerLayerLeft->Add(szTilesetWaterAnimation, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTilesetLowerLayer->Add(szTilesetLowerLayerLeft, 0, wxEXPAND, 0);
    szTilesetLowerLayer->Add(listTilesetLowerLayerGraphic, 0, wxALL|wxEXPAND, 1);
    szTilesetLowerLayerTerrain->Add(listTilesetLowerLayerTerrain, 1, wxEXPAND, 0);
    szTilesetLowerLayer->Add(szTilesetLowerLayerTerrain, 1, wxALL|wxEXPAND, 1);
    nbTilesetLowerLayer->SetSizer(szTilesetLowerLayer);
    szTileseUpperLayerModify->Add(btnTileseUpperLayerModifyBlocking, 0, wxBOTTOM|wxEXPAND, 1);
    szTileseUpperLayerModify->Add(btnTileseUpperLayerModifyFourDirections, 0, wxBOTTOM|wxEXPAND|wxTOP, 1);
    szTileseUpperLayerModify->Add(btnTileseUpperLayerModifyCounterFlag, 0, wxEXPAND|wxTOP, 1);
    szTilesetUpperLayer->Add(szTileseUpperLayerModify, 0, wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szTilesetUpperLayer->Add(listTilesetUpperLayerGraphic, 0, wxALL|wxEXPAND, 1);
    nbTilesetUpperLayer->SetSizer(szTilesetUpperLayer);
    nbTileset->AddPage(nbTilesetLowerLayer, _("Lower layer"));
    nbTileset->AddPage(nbTilesetUpperLayer, _("Upper layer"));
    szTilesetRight->Add(nbTileset, 1, wxALL|wxEXPAND, 1);
    szTileset->Add(szTilesetRight, 1, wxEXPAND, 0);
    pnTileset->SetSizer(szTileset);
    szTextBattleStartBattle->Add(stTextBattleStartBattle, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleStartBattle->Add(tcTextBattleStartBattle, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages1->Add(szTextBattleStartBattle, 1, wxEXPAND, 0);
    szTextBattlePriorityAttack->Add(tcTextBattlePriorityAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages1->Add(szTextBattlePriorityAttack, 1, wxEXPAND, 0);
    szTextBattleSuccessfulEscape->Add(tcTextBattleSuccessfulEscape, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages1->Add(szTextBattleSuccessfulEscape, 1, wxEXPAND, 0);
    szTextBattleFailedEscape->Add(tcTextBattleFailedEscape, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages1->Add(szTextBattleFailedEscape, 1, wxEXPAND, 0);
    szTextBattleVictory->Add(tcTextBattleVictory, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages1->Add(szTextBattleVictory, 1, wxEXPAND, 0);
    szTextBattleDeadGroup->Add(tcTextBattleDeadGroup, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages1->Add(szTextBattleDeadGroup, 1, wxEXPAND, 0);
    szTextBattleExperience->Add(stTextBattleExperience, 0, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleExperience->Add(tcTextBattleExperience, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages1->Add(szTextBattleExperience, 1, wxEXPAND, 0);
    szTextBattleObtainedMoney->Add(tcTextBattleObtainedMoney1, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleObtainedMoney->Add(stTextBattleObtainedMoney, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szTextBattleObtainedMoney->Add(TextBattleObtainedMoney2, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages1->Add(szTextBattleObtainedMoney, 1, wxEXPAND, 0);
    szTextBattleObtainedObject->Add(stTextBattleObtainedObject, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleObtainedObject->Add(tcTextBattleObtainedObject, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages1->Add(szTextBattleObtainedObject, 1, wxEXPAND, 0);
    szTextBattleMessages1And2->Add(szTextBattleMessages1, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextBattleNormalAttack->Add(stTextBattleNormalAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleNormalAttack->Add(tcTextBattleNormalAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleNormalAttack, 1, wxEXPAND, 0);
    szTextBattleActorDeath->Add(tcTextBattleActorDeath, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages2->Add(szTextBattleActorDeath, 1, wxEXPAND, 0);
    szTextBattleEnemyDeath->Add(tcTextBattleEnemyDeath, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextBattleMessages2->Add(szTextBattleEnemyDeath, 1, wxEXPAND, 0);
    szTextBattleDefense->Add(stTextBattleDefense, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleDefense->Add(tcTextBattleDefense, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleDefense, 1, wxEXPAND, 0);
    szTextBattleStateControl->Add(stTextBattleStateControl, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleStateControl->Add(tcTextBattleStateControl, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleStateControl, 1, wxEXPAND, 0);
    szTextBattleStrengthGain->Add(stTextBattleStrengthGain, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleStrengthGain->Add(tcTextBattleStrengthGain, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleStrengthGain, 1, wxEXPAND, 0);
    szTextBattleAutodestruction->Add(stTextBattleAutodestruction, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleAutodestruction->Add(tcTextBattleAutodestruction, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleAutodestruction, 1, wxEXPAND, 0);
    szTextBattleEnemyEscape->Add(stTextBattleEnemyEscape, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleEnemyEscape->Add(tcTextBattleEnemyEscape, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleEnemyEscape, 1, wxEXPAND, 0);
    szTextBattleTransformation->Add(stTextBattleTransformation, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleTransformation->Add(tcTextBattleTransformation, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages2->Add(szTextBattleTransformation, 1, wxEXPAND, 0);
    szTextBattleMessages1And2->Add(szTextBattleMessages2, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    pnTextBattleMessages1And2->SetSizer(szTextBattleMessages1And2);
    szTextBattleActorAttack->Add(stTextBattleActorAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleActorAttack->Add(tcTextBattleActorAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleActorAttack, 1, wxEXPAND, 0);
    szTextBattleFailedActorAttack->Add(stTextBattleFailedActorAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleFailedActorAttack->Add(tcTextBattleFailedActorAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleFailedActorAttack, 1, wxEXPAND, 0);
    szTextBattleEnemyAttack->Add(stTextBattleEnemyAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleEnemyAttack->Add(tcTextBattleEnemyAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleEnemyAttack, 1, wxEXPAND, 0);
    szTextBattleFailedEnemyAttack->Add(stTextBattleFailedEnemyAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleFailedEnemyAttack->Add(tcTextBattleFailedEnemyAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleFailedEnemyAttack, 1, wxEXPAND, 0);
    szTextBattleFailedSkillA->Add(stTextBattleFailedSkillA, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleFailedSkillA->Add(tcTextBattleFailedSkillA, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleFailedSkillA, 1, wxEXPAND, 0);
    szTextBattleFailedSkillB->Add(stTextBattleFailedSkillB, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleFailedSkillB->Add(tcTextBattleFailedSkillB, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleFailedSkillB, 1, wxEXPAND, 0);
    szTextBattleFailedSkillC->Add(stTextBattleFailedSkillC, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleFailedSkillC->Add(tcTextBattleFailedSkillC, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleFailedSkillC, 1, wxEXPAND, 0);
    szTextBattleEvadePsysicalAttack->Add(stTextBattleEvadePsysicalAttack, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleEvadePsysicalAttack->Add(tcTextBattleEvadePsysicalAttack, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleEvadePsysicalAttack, 1, wxEXPAND, 0);
    szTextBattleUseItem->Add(stTextBattleUseItem, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleUseItem->Add(tcTextBattleUseItem, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages3->Add(szTextBattleUseItem, 1, wxEXPAND, 0);
    szTextBattleMessages3And4->Add(szTextBattleMessages3, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextBattleRecoverHP->Add(stTextBattleRecoverHP, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleRecoverHP->Add(tcTextBattleRecoverHP, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleRecoverHP, 1, wxEXPAND, 0);
    szTextBattleParameterUp->Add(stTextBattleParameterUp, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleParameterUp->Add(tcTextBattleParameterUp, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleParameterUp, 1, wxEXPAND, 0);
    szTextBattleParameterDown->Add(stTextBattleParameterDown, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleParameterDown->Add(tcTextBattleParameterDown, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleParameterDown, 1, wxEXPAND, 0);
    szTextBattleParameterAbsorptionAllied->Add(stTextBattleParameterAbsorptionAllied, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleParameterAbsorptionAllied->Add(tcTextBattleParameterAbsorptionAllied, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleParameterAbsorptionAllied, 1, wxEXPAND, 0);
    szTextBattleParameterAbsorptionEnemy->Add(stTextBattleParameterAbsorptionEnemy, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleParameterAbsorptionEnemy->Add(tcTextBattleParameterAbsorptionEnemy, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleParameterAbsorptionEnemy, 1, wxEXPAND, 0);
    szTextBattleDefenseUp->Add(stTextBattleDefenseUp, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleDefenseUp->Add(tcTextBattleDefenseUp, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleDefenseUp, 1, wxEXPAND, 0);
    szTextBattleDefenseDown->Add(stTextBattleDefenseDown, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleDefenseDown->Add(tcTextBattleDefenseDown, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleDefenseDown, 1, wxEXPAND, 0);
    szTextBattleLevelUp->Add(stTextBattleLevelUp, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleLevelUp->Add(tcTextBattleLevelUp, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleLevelUp, 1, wxEXPAND, 0);
    szTextBattleLearnSkill->Add(stTextBattleLearnSkill, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextBattleLearnSkill->Add(tcTextBattleLearnSkill, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextBattleMessages4->Add(szTextBattleLearnSkill, 1, wxEXPAND, 0);
    szTextBattleMessages3And4->Add(szTextBattleMessages4, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    pnTextBattleMessages3And4->SetSizer(szTextBattleMessages3And4);
    szTextCommerceMessagesABuySelection->Add(tcTextCommerceMessagesABuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesABuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesABuySelectionSecondTimeAndLater->Add(tcTextCommerceMessagesABuySelectionSecondTimeAndLater, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesABuySelectionSecondTimeAndLater, 1, wxEXPAND, 0);
    szTextCommerceMessagesABuy->Add(tcTextCommerceMessagesABuy, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesACommands->Add(szTextCommerceMessagesABuy, 1, wxEXPAND|wxRIGHT, 1);
    szTextCommerceMessagesASell->Add(tcTextCommerceMessagesASell, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesACommands->Add(szTextCommerceMessagesASell, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceMessagesAExit->Add(tcTextCommerceMessagesAExit, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesACommands->Add(szTextCommerceMessagesAExit, 1, wxEXPAND|wxLEFT, 1);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesACommands, 1, wxEXPAND, 0);
    szTextCommerceMessagesAItemToBuySelection->Add(tcTextCommerceMessagesAItemToBuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesAItemToBuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesAItemToBuyNumberSelection->Add(tcTextCommerceMessagesAItemToBuyNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesAItemToBuyNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesABuyCompleted->Add(tcTextCommerceMessagesABuyCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesABuyCompleted, 1, wxEXPAND, 0);
    szTextCommerceMessagesAItemToSellSelection->Add(tcTextCommerceMessagesAItemToSellSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesAItemToSellSelection, 1, wxALL|wxEXPAND, 0);
    szTextCommerceMessagesAItemToSellNumberSelection->Add(tcTextCommerceMessagesAItemToSellNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesAItemToSellNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesASellCompleted->Add(tcTextCommerceMessagesASellCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesA->Add(szTextCommerceMessagesASellCompleted, 1, wxEXPAND, 0);
    szTextCommerceMessages->Add(szTextCommerceMessagesA, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceMessagesBBuySelection->Add(tcTextCommerceMessagesBBuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBBuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesBBuySelectionSecondTimeAndLater->Add(tcTextCommerceMessagesBBuySelectionSecondTimeAndLater, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBBuySelectionSecondTimeAndLater, 1, wxEXPAND, 0);
    szTextCommerceMessagesBBuy->Add(tcTextCommerceMessagesBBuy, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesBCommands->Add(szTextCommerceMessagesBBuy, 1, wxEXPAND|wxRIGHT, 0);
    szTextCommerceMessagesBSell->Add(tcTextCommerceMessagesBSell, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesBCommands->Add(szTextCommerceMessagesBSell, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceMessagesBExit->Add(tcTextCommerceMessagesBExit, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesBCommands->Add(szTextCommerceMessagesBExit, 1, wxEXPAND|wxLEFT, 1);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBCommands, 1, wxEXPAND, 0);
    szTextCommerceMessagesBItemToBuySelection->Add(tcTextCommerceMessagesBItemToBuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBItemToBuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesBItemToBuyNumberSelection->Add(tcTextCommerceMessagesBItemToBuyNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBItemToBuyNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesBBuyCompleted->Add(tcTextCommerceMessagesBBuyCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBBuyCompleted, 1, wxEXPAND, 0);
    szTextCommerceMessagesBItemToSellSelection->Add(tcTextCommerceMessagesBItemToSellSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBItemToSellSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesBItemToSellNumberSelection->Add(tcTextCommerceMessagesBItemToSellNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBItemToSellNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesBSellCompleted->Add(tcTextCommerceMessagesBSellCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesB->Add(szTextCommerceMessagesBSellCompleted, 1, wxEXPAND, 0);
    szTextCommerceMessages->Add(szTextCommerceMessagesB, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    pnTextCommerceMessages->SetSizer(szTextCommerceMessages);
    szTextCommerceMessagesCBuySelection->Add(tcTextCommerceMessagesCBuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCBuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesCBuySelectionSecondTimeAndLater->Add(tcTextCommerceMessagesCBuySelectionSecondTimeAndLater, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCBuySelectionSecondTimeAndLater, 1, wxEXPAND, 1);
    szTextCommerceMessagesCBuy->Add(tcTextCommerceMessagesCBuy, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesCCommands->Add(szTextCommerceMessagesCBuy, 1, wxEXPAND|wxRIGHT, 1);
    szTextCommerceMessagesCSell->Add(tcTextCommerceMessagesCSell, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesCCommands->Add(szTextCommerceMessagesCSell, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceMessagesCExit->Add(tcTextCommerceMessagesCExit, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesCCommands->Add(szTextCommerceMessagesCExit, 1, wxEXPAND|wxLEFT, 1);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCCommands, 1, wxEXPAND, 0);
    szTextCommerceMessagesCItemToBuySelection->Add(tcTextCommerceMessagesCItemToBuySelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCItemToBuySelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesCItemToBuyNumberSelection->Add(tcTextCommerceMessagesCItemToBuyNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCItemToBuyNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesCBuyCompleted->Add(tcTextCommerceMessagesCBuyCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCBuyCompleted, 1, wxEXPAND, 0);
    szTextCommerceMessagesCItemToSellSelection->Add(tcTextCommerceMessagesCItemToSellSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCItemToSellSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesCItemToSellNumberSelection->Add(tcTextCommerceMessagesCItemToSellNumberSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCItemToSellNumberSelection, 1, wxEXPAND, 0);
    szTextCommerceMessagesCSellCompleted->Add(tcTextCommerceMessagesCSellCompleted, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceMessagesC->Add(szTextCommerceMessagesCSellCompleted, 1, wxEXPAND, 0);
    szTextCommerceAndInn->Add(szTextCommerceMessagesC, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesASelectedInnTop->Add(tcTextInnMessagesASelectedInn1, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextInnMessagesASelectedInnTop->Add(stTextInnMessagesASelectedInn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesASelectedInnTop->Add(tcTextInnMessagesASelectedInn2, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextInnMessagesASelectedInn->Add(szTextInnMessagesASelectedInnTop, 0, wxBOTTOM|wxEXPAND, 1);
    szTextInnMessagesASelectedInn->Add(tcTextInnMessagesASelectedInn3, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND|wxTOP, 1);
    szTextInnMessagesA->Add(szTextInnMessagesASelectedInn, 3, wxEXPAND, 0);
    szTextInnMessagesAStay->Add(tcTextInnMessagesAStay, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextInnMessagesACommands->Add(szTextInnMessagesAStay, 1, wxEXPAND|wxRIGHT, 1);
    szTextInnMessagesADontStay->Add(tcTextInnMessagesADontStay, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextInnMessagesACommands->Add(szTextInnMessagesADontStay, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesACommands->Add(0, 0, 1, wxEXPAND|wxLEFT, 1);
    szTextInnMessagesA->Add(szTextInnMessagesACommands, 2, wxEXPAND, 0);
    szTextInnMessages->Add(szTextInnMessagesA, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesBSelectedInnTop->Add(tcTextInnMessagesBSelectedInn1, 1, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTextInnMessagesBSelectedInnTop->Add(stTextInnMessagesBSelectedInn, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesBSelectedInnTop->Add(tcTextInnMessagesBSelectedInn2, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szTextInnMessagesBSelectedInn->Add(szTextInnMessagesBSelectedInnTop, 0, wxBOTTOM|wxEXPAND, 1);
    szTextInnMessagesBSelectedInn->Add(tcTextInnMessagesBSelectedInn3, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND|wxTOP, 1);
    szTextInnMessagesB->Add(szTextInnMessagesBSelectedInn, 3, wxEXPAND, 0);
    szTextInnMessagesBStay->Add(tcTextInnMessagesBStay, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextInnMessagesBCommands->Add(szTextInnMessagesBStay, 1, wxEXPAND|wxRIGHT, 1);
    szTextInnMessagesBDontStay->Add(tcTextInnMessagesBDontStay, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextInnMessagesBCommands->Add(szTextInnMessagesBDontStay, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextInnMessagesBCommands->Add(0, 0, 1, wxEXPAND|wxLEFT, 1);
    szTextInnMessagesB->Add(szTextInnMessagesBCommands, 2, wxEXPAND, 0);
    szTextInnMessages->Add(szTextInnMessagesB, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommercePossessedItems->Add(tcTextCommercePossessedItems, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceVocabularyCommands->Add(szTextCommercePossessedItems, 1, wxEXPAND|wxRIGHT, 1);
    szTextCommerceEquipedItems->Add(tcTextCommerceEquipedItems, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceVocabularyCommands->Add(szTextCommerceEquipedItems, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceCurrency->Add(tcTextCommerceCurrency, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextCommerceVocabularyCommands->Add(szTextCommerceCurrency, 1, wxEXPAND|wxLEFT, 1);
    szTextCommerceVocabulary->Add(szTextCommerceVocabularyCommands, 1, wxEXPAND, 0);
    szTextCommerceVocabulary->Add(0, 0, 1, wxEXPAND, 0);
    szTextInnMessages->Add(szTextCommerceVocabulary, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCommerceAndInn->Add(szTextInnMessages, 1, wxEXPAND, 0);
    pnTextCommerceAndInn->SetSizer(szTextCommerceAndInn);
    szTextLevel->Add(tcTextLevel, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextLevel, 1, wxEXPAND, 0);
    szTextLevelShorter->Add(tcTextLevelShorter, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextLevelShorter, 1, wxEXPAND, 0);
    szTextHP->Add(tcTextHP, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextHP, 1, wxEXPAND, 0);
    szTextHPShorter->Add(tcTextHPShorter, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextHPShorter, 1, wxEXPAND, 0);
    szTextMP->Add(tcTextMP, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextMP, 1, wxEXPAND, 0);
    szTextMPShorter->Add(tcTextMPShorter, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextMPShorter, 1, wxEXPAND, 0);
    szTextNormal->Add(tcTextNormal, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextNormal, 1, wxEXPAND, 0);
    szTextEXPShorter->Add(tcTextEXPShorter, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextEXPShorter, 1, wxEXPAND, 0);
    szTextMPCost->Add(tcTextMPCost, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextMPCost, 1, wxEXPAND, 0);
    szTextWeapons->Add(tcTextWeapons, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextWeapons, 1, wxEXPAND, 0);
    szTextAttack->Add(tcTextAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextAttack, 1, wxEXPAND, 0);
    szTextShield->Add(tcTextShield, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextShield, 1, wxEXPAND, 0);
    szTextDefense->Add(tcTextDefense, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextDefense, 1, wxEXPAND, 0);
    szTextArmor->Add(tcTextArmor, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextArmor, 1, wxEXPAND, 0);
    szTextIntelligence->Add(tcTextIntelligence, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextIntelligence, 1, wxEXPAND, 0);
    szTextHelmet->Add(tcTextHelmet, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextHelmet, 1, wxEXPAND, 0);
    szTextAgility->Add(tcTextAgility, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextAgility, 1, wxEXPAND, 0);
    szTextOther->Add(tcTextOther, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextArmorsAndEquipment->Add(szTextOther, 1, wxEXPAND, 0);
    szTextArmorsAndEquipment->Add(gszTextArmorsAndEquipment, 1, wxEXPAND, 0);
    szTextParametersAndOther->Add(szTextArmorsAndEquipment, 1, wxALL|wxEXPAND, 1);
    szTextCommandFight->Add(tcTextCommandFight, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandFight, 1, wxEXPAND, 0);
    szTextCommandAttack->Add(tcTextCommandAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandAttack, 1, wxEXPAND, 0);
    szTextCommandEquipment->Add(tcTextCommandEquipment, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandEquipment, 1, wxEXPAND, 0);
    szTextCommandNewGame->Add(tcTextCommandNewGame, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandNewGame, 1, wxEXPAND, 0);
    szTextCommandAutomatic->Add(tcTextCommandAutomatic, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandAutomatic, 1, wxEXPAND, 0);
    szTextCommandDefense->Add(tcTextCommandDefense, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandDefense, 1, wxEXPAND, 0);
    szTextCommandSave->Add(tcTextCommandSave, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandSave, 1, wxEXPAND, 0);
    szTextCommandLoad->Add(tcTextCommandLoad, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandLoad, 1, wxEXPAND, 0);
    szTextCommandEscape->Add(tcTextCommandEscape, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandEscape, 1, wxEXPAND, 0);
    szTextCommandObjects->Add(tcTextCommandObjects, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandObjects, 1, wxEXPAND, 0);
    szTextCommandExit->Add(tcTextCommandExit, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandExit, 1, wxEXPAND, 0);
    szTextCommandEnd->Add(tcTextCommandEnd, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandEnd, 1, wxEXPAND, 0);
    gszTextCommands->Add(0, 0, 1, wxEXPAND, 0);
    szTextCommandSkills->Add(tcTextCommandSkills, 1, wxALIGN_CENTER_VERTICAL, 0);
    gszTextCommands->Add(szTextCommandSkills, 1, wxEXPAND, 0);
    gszTextCommands->Add(0, 0, 1, wxEXPAND, 0);
    gszTextCommands->Add(0, 0, 1, wxEXPAND, 0);
    szTextCommands->Add(gszTextCommands, 1, wxEXPAND, 0);
    szTextParametersAndOtherRight->Add(szTextCommands, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextSaveSlotSelection->Add(tcTextSaveSlotSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSaveLoadExitLeft->Add(szTextSaveSlotSelection, 1, wxEXPAND, 0);
    szTextLoadSlotSelection->Add(tcTextLoadSlotSelection, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSaveLoadExitLeft->Add(szTextLoadSlotSelection, 1, wxEXPAND, 0);
    szTextConfirmExit->Add(tcTextConfirmExit, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSaveLoadExitLeft->Add(szTextConfirmExit, 1, wxEXPAND, 0);
    szTextFile->Add(tcTextFile, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextSaveLoadExitCommands->Add(szTextFile, 1, wxEXPAND|wxRIGHT, 1);
    szTextOK->Add(tcTextOK, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextSaveLoadExitCommands->Add(szTextOK, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szTextCancel->Add(tcTextCancel, 1, wxALIGN_CENTER_VERTICAL, 0);
    szTextSaveLoadExitCommands->Add(szTextCancel, 1, wxEXPAND|wxLEFT, 1);
    szSaveLoadExitLeft->Add(szTextSaveLoadExitCommands, 1, wxEXPAND, 0);
    szTextSaveLoadExit->Add(szSaveLoadExitLeft, 3, wxEXPAND, 0);
    szTextSaveLoadExit->Add(0, 0, 1, wxEXPAND, 0);
    szTextParametersAndOtherRight->Add(szTextSaveLoadExit, 1, wxALL|wxEXPAND, 1);
    szTextParametersAndOther->Add(szTextParametersAndOtherRight, 2, wxEXPAND, 0);
    pnTextParametersAndOther->SetSizer(szTextParametersAndOther);
    nbText->AddPage(pnTextBattleMessages1And2, _("Battle messages 1 && 2"));
    nbText->AddPage(pnTextBattleMessages3And4, _("Battle messages 3 && 4"));
    nbText->AddPage(pnTextCommerceMessages, _("Commerce messages"));
    nbText->AddPage(pnTextCommerceAndInn, _("Commerce && inn"));
    nbText->AddPage(pnTextParametersAndOther, _("Parameters && other"));
    szText->Add(nbText, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    pnText->SetSizer(szText);
    szVehicleGraphicSmallShip->Add(bmpVehicleGraphicSmallShip, 0, wxALIGN_BOTTOM|wxBOTTOM, 1);
    szVehicleGraphicSmallShip->Add(btnVehicleGraphicSmallShip, 0, wxALIGN_RIGHT|wxTOP, 1);
    szSystemVehicleGraphic->Add(szVehicleGraphicSmallShip, 1, wxEXPAND|wxRIGHT, 1);
    szVehicleGraphicBigShip->Add(bmpVehicleGraphicBigShip, 0, wxALIGN_BOTTOM|wxBOTTOM, 1);
    szVehicleGraphicBigShip->Add(btnVehicleGraphicBigShip, 0, wxALIGN_RIGHT|wxTOP, 1);
    szSystemVehicleGraphic->Add(szVehicleGraphicBigShip, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szVehicleGraphicAirship->Add(bmpVehicleGraphicAirship, 0, wxALIGN_BOTTOM|wxBOTTOM, 1);
    szVehicleGraphicAirship->Add(btnVehicleGraphicAirship, 0, wxALIGN_RIGHT|wxTOP, 1);
    szSystemVehicleGraphic->Add(szVehicleGraphicAirship, 1, wxEXPAND|wxLEFT, 1);
    szSystemTop->Add(szSystemVehicleGraphic, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemTitleGraphic->Add(bmpSystemTitleGraphic, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 1);
    szSystemTitleGraphic->Add(btnSystemTitleGraphic, 0, wxALIGN_BOTTOM|wxLEFT, 1);
    szSystemTop->Add(szSystemTitleGraphic, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemGameOverGraphic->Add(bmpSystemGameOverGraphic, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 1);
    szSystemGameOverGraphic->Add(btnSystemGameOverGraphic, 0, wxALIGN_BOTTOM|wxLEFT, 1);
    szSystemTop->Add(szSystemGameOverGraphic, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystem->Add(szSystemTop, 0, wxEXPAND, 0);
    szSystemStartingPartyActor1->Add(chSystemStartingPartyActor1, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartingParty->Add(szSystemStartingPartyActor1, 1, wxEXPAND, 0);
    szSystemStartingPartyActor2->Add(chSystemStartingPartyActor2, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartingParty->Add(szSystemStartingPartyActor2, 1, wxEXPAND, 0);
    szSystemStartingPartyActor3->Add(chSystemStartingPartyActor3, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartingParty->Add(szSystemStartingPartyActor3, 1, wxEXPAND, 0);
    szSystemStartingPartyActor4->Add(chSystemStartingPartyActor4, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartingParty->Add(szSystemStartingPartyActor4, 1, wxEXPAND, 0);
    szSystemMiddle->Add(szSystemStartingParty, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemMusicTitle->Add(tcSystemMusicTitle, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicTitle->Add(btnSystemMusicTitle, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicTitle, 1, wxEXPAND, 0);
    szSystemMusicSmallShip->Add(tcSystemMusicSmallShip, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicSmallShip->Add(btnSystemMusicSmallShip, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicSmallShip, 1, wxEXPAND, 0);
    szSystemMusicBattle->Add(tcSystemMusicBattle, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicBattle->Add(btnSystemMusicBattle, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicBattle, 1, wxEXPAND, 0);
    szSystemMusicBigShip->Add(tcSystemMusicBigShip, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicBigShip->Add(btnSystemMusicBigShip, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicBigShip, 1, wxEXPAND, 0);
    szSystemMusicVictory->Add(tcSystemMusicVictory, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicVictory->Add(btnSystemMusicVictory, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicVictory, 1, wxEXPAND, 0);
    szSystemMusicAirship->Add(tcSystemMusicAirship, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicAirship->Add(btnSystemMusicAirship, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicAirship, 1, wxEXPAND, 0);
    szSystemMusicInn->Add(tcSystemMusicInn, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicInn->Add(btnSystemMusicInn, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicInn, 1, wxEXPAND, 0);
    szSystemMusicGameOver->Add(tcSystemMusicGameOver, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemMusicGameOver->Add(btnSystemMusicGameOver, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemMusic->Add(szSystemMusicGameOver, 1, wxEXPAND, 0);
    szSystemMusic->Add(gszSystemMusic, 1, wxEXPAND, 0);
    szSystemMiddle->Add(szSystemMusic, 2, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemSoundCursor->Add(tcSystemSoundCursor, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundCursor->Add(btnSystemSoundCursor, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundCursor, 1, wxEXPAND, 0);
    szSystemSoundStartBattle->Add(tcSystemSoundStartBattle, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundStartBattle->Add(btnSystemSoundStartBattle, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundStartBattle, 1, wxEXPAND, 0);
    szSystemSoundActorDamage->Add(tcSystemSoundActorDamage, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundActorDamage->Add(btnSystemSoundActorDamage, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundActorDamage, 1, wxEXPAND, 0);
    szSystemSoundOK->Add(tcSystemSoundOK, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundOK->Add(btnSystemSoundOK, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundOK, 1, wxEXPAND, 0);
    szSystemSoundEscape->Add(tcSystemSoundEscape, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundEscape->Add(btnSystemSoundEscape, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundEscape, 1, wxEXPAND, 0);
    szSystemSoundDodge->Add(tcSystemSoundDodge, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundDodge->Add(btnSystemSoundDodge, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundDodge, 1, wxEXPAND, 0);
    szSystemSoundCancel->Add(tcSystemSoundCancel, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundCancel->Add(btnSystemSoundCancel, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundCancel, 1, wxEXPAND, 0);
    szSystemSoundEnemyAttack->Add(tcSystemSoundEnemyAttack, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundEnemyAttack->Add(btnSystemSoundEnemyAttack, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundEnemyAttack, 1, wxEXPAND, 0);
    szSystemSoundEnemyDeath->Add(tcSystemSoundEnemyDeath, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundEnemyDeath->Add(btnSystemSoundEnemyDeath, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundEnemyDeath, 1, wxEXPAND, 0);
    szSystemSoundError->Add(tcSystemSoundError, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundError->Add(btnSystemSoundError, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundError, 1, wxALL|wxEXPAND, 0);
    szSystemSoundEnemyDamage->Add(tcSystemSoundEnemyDamage, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundEnemyDamage->Add(btnSystemSoundEnemyDamage, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundEnemyDamage, 1, wxEXPAND, 0);
    szSystemSoundUseObject->Add(tcSystemSoundUseObject, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemSoundUseObject->Add(btnSystemSoundUseObject, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszSystemSounds->Add(szSystemSoundUseObject, 1, wxEXPAND, 0);
    szSystemSounds->Add(gszSystemSounds, 1, wxEXPAND, 0);
    szSystemMiddle->Add(szSystemSounds, 3, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystem->Add(szSystemMiddle, 1, wxEXPAND, 0);
    szSystemGraphic->Add(bmpSystemGraphic, 0, wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL|wxRIGHT, 1);
    szSystemGraphic->Add(btnSystemGraphic, 0, wxALIGN_BOTTOM|wxLEFT, 1);
    szSystemBottom->Add(szSystemGraphic, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemTransitionTypeEraseScreen->Add(chSystemTransitionTypeEraseScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemTransitionType->Add(szSystemTransitionTypeEraseScreen, 1, wxEXPAND, 0);
    szSystemTransitionTypeShowScreen->Add(chSystemTransitionTypeShowScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemTransitionType->Add(szSystemTransitionTypeShowScreen, 1, wxEXPAND, 0);
    szSystemBottom->Add(szSystemTransitionType, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemStartBattleEraseScreen->Add(chSystemStartBattleEraseScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartBattle->Add(szSystemStartBattleEraseScreen, 1, wxEXPAND, 0);
    szSystemStartBattleShowScreen->Add(chSystemStartBattleShowScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemStartBattle->Add(szSystemStartBattleShowScreen, 1, wxEXPAND, 0);
    szSystemBottom->Add(szSystemStartBattle, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystemEndBattleEraseScreen->Add(chSystemEndBattleEraseScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemEndBattle->Add(szSystemEndBattleEraseScreen, 1, wxEXPAND, 0);
    szSystemEndBattleShowScreen->Add(chSystemEndBattleShowScreen, 1, wxALIGN_CENTER_VERTICAL, 0);
    szSystemEndBattle->Add(szSystemEndBattleShowScreen, 1, wxEXPAND, 0);
    szSystemBottom->Add(szSystemEndBattle, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSystem->Add(szSystemBottom, 0, wxEXPAND, 0);
    pnSystem->SetSizer(szSystem);
    szCommonEventLeft->Add(stCommonEvent, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    szCommonEventLeft->Add(ListEvent, 1, wxALL|wxEXPAND, 1);
    szCommonEventLeft->Add(btnCommonEventMaxNumber, 0, wxALL|wxEXPAND, 1);
    szCommonEvent->Add(szCommonEventLeft, 0, wxEXPAND, 0);
    szCommonEventName->Add(tcCommonEventName, 1, wxALIGN_CENTER_VERTICAL, 0);
    szCommonEventRightTop->Add(szCommonEventName, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szCommonEventActivationConditions->Add(chCommonEventActivationConditions, 1, wxALIGN_CENTER_VERTICAL, 0);
    szCommonEventRightTop->Add(szCommonEventActivationConditions, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szCommonEventConditionActivationSwitch->Add(chbCommonEventConditionActivationSwitch, 0, wxALIGN_CENTER_VERTICAL, 0);
    szCommonEventConditionActivationSwitch->Add(tcCommonEventConditionActivationSwitch, 1, wxALIGN_CENTER_VERTICAL|wxLEFT, 1);
    szCommonEventConditionActivationSwitch->Add(btnCommonEventConditionActivationSwitch, 0, wxALIGN_CENTER_VERTICAL, 0);
    szCommonEventRightTop->Add(szCommonEventConditionActivationSwitch, 1, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szCommonEventRight->Add(szCommonEventRightTop, 0, wxEXPAND, 0);
    szCommonEventExecutionContents->Add(ListCommonEventExecutionContent, 1, wxEXPAND, 0);
    szCommonEventRight->Add(szCommonEventExecutionContents, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szCommonEvent->Add(szCommonEventRight, 1, wxEXPAND, 0);
    pnCommonEvent->SetSizer(szCommonEvent);
    nbDb->AddPage(pnActor, _("Actors"));
    nbDb->AddPage(pnSkill, _("Skills"));
    nbDb->AddPage(pnItem, _("Items"));
    nbDb->AddPage(pnEnemy, _("Enemies"));
    nbDb->AddPage(pnTroop, _("Troops"));
    nbDb->AddPage(pnAttribute, _("Attributes"));
    nbDb->AddPage(pnState, _("States"));
    nbDb->AddPage(pnAnimation, _("Animations"));
    nbDb->AddPage(pnTerrain, _("Terrains"));
    nbDb->AddPage(pnTileset, _("Tilesets"));
    nbDb->AddPage(pnText, _("Texts"));
    nbDb->AddPage(pnSystem, _("System"));
    nbDb->AddPage(pnCommonEvent, _("Common events"));
    szDb->Add(nbDb, 1, wxALL|wxEXPAND, 1);
    szBottom->Add(button_1, 0, wxALL, 1);
    szBottom->Add(0, 0, 1, wxEXPAND, 0);
    szBottom->Add(btnOK, 0, wxALL, 1);
    szBottom->Add(btnCancel, 0, wxALL, 1);
    szBottom->Add(btnApply, 0, wxALL, 1);
    szBottom->Add(btnHelp, 0, wxALL, 1);
    szDb->Add(szBottom, 0, wxALIGN_RIGHT|wxBOTTOM|wxEXPAND|wxRIGHT, 3);
    SetSizer(szDb);
    szDb->Fit(this);
    Layout();
    // end wxGlade
}

