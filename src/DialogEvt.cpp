// -*- C++ -*-
//
// generated by wxGlade not found
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "DialogEvt.h"

// begin wxGlade: ::extracode
// end wxGlade


DialogEvt::DialogEvt(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxRESIZE_BORDER)
{
    // begin wxGlade: DialogEvt::DialogEvt
    nbPage = new wxNotebook(this, wxID_ANY);
    pnPage = new wxPanel(nbPage, wxID_ANY);
    szStartingConditions_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Starting Conditions"));
    szGraphic_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Selected graphic"));
    szMovement_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Movement type"));
    szTrigger_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Starting trigger"));
    szPriority_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Priority"));
    szAnimation_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Animation type"));
    szSpeed_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Scroll speed"));
    szEvtCmd_staticbox = new wxStaticBox(pnPage, wxID_ANY, _("Event commands"));
    szName_staticbox = new wxStaticBox(this, wxID_ANY, _("Name"));
    stName = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnNewPage = new wxButton(this, wxID_ANY, _("New page"));
    btnCopyPage = new wxButton(this, wxID_ANY, _("Copy page"));
    btnPastePage = new wxButton(this, wxID_ANY, _("Paste page"));
    btnDeletePage = new wxButton(this, wxID_ANY, _("Delete page"));
    chbSwitchA = new wxCheckBox(pnPage, wxID_ANY, _("Switch"));
    tcSwitchA = new wxTextCtrl(pnPage, wxID_ANY, wxEmptyString);
    btnSwitchA = new wxButton(pnPage, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stSwitchA = new wxStaticText(pnPage, wxID_ANY, _("ON"));
    chbSwitchB = new wxCheckBox(pnPage, wxID_ANY, _("Switch"));
    tcSwitchB = new wxTextCtrl(pnPage, wxID_ANY, wxEmptyString);
    btnSwitchB = new wxButton(pnPage, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stSwitchB = new wxStaticText(pnPage, wxID_ANY, _("ON"));
    chbVariable = new wxCheckBox(pnPage, wxID_ANY, _("Variable"));
    tcVariable = new wxTextCtrl(pnPage, wxID_ANY, wxEmptyString);
    btnVariable = new wxButton(pnPage, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stVariable1 = new wxStaticText(pnPage, wxID_ANY, _("Above"));
    spinVariable = new wxSpinCtrl(pnPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stVariable2 = new wxStaticText(pnPage, wxID_ANY, _("."));
    chbObject = new wxCheckBox(pnPage, wxID_ANY, _("Object"));
    const wxString chObject_choices[] = {
        _("<set by wxGlade>"),
    };
    chObject = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chObject_choices);
    stObject = new wxStaticText(pnPage, wxID_ANY, _("On hold"));
    chbActor = new wxCheckBox(pnPage, wxID_ANY, _("Actor"));
    const wxString chActor_choices[] = {
        _("<set by wxGlade>"),
    };
    chActor = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chActor_choices);
    stActor = new wxStaticText(pnPage, wxID_ANY, _("In party"));
    chbTimer = new wxCheckBox(pnPage, wxID_ANY, _("Timer"));
    spinTimerMinutes = new wxSpinCtrl(pnPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100);
    stTimerColon = new wxStaticText(pnPage, wxID_ANY, _(":"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER);
    spinTimerSeconds = new wxSpinCtrl(pnPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 59);
    stTimer = new wxStaticText(pnPage, wxID_ANY, _("Remaining"));
    bmpGraphic = new wxStaticBitmap(pnPage, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDefaultSize, wxBORDER_SUNKEN);
    chbGraphicTranslucent = new wxCheckBox(pnPage, wxID_ANY, _("Translucent"));
    btnGraphic = new wxButton(pnPage, wxID_ANY, _("Select..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    const wxString chMovement_choices[] = {
        _("<set by wxGlade>"),
    };
    chMovement = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chMovement_choices);
    stMovementRate = new wxStaticText(pnPage, wxID_ANY, _("Rate:"));
    const wxString chMovementRate_choices[] = {
        _("<set by wxGlade>"),
    };
    chMovementRate = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chMovementRate_choices);
    btnMovementCreatePath = new wxButton(pnPage, wxID_ANY, _("Create path"));
    const wxString chTrigger_choices[] = {
        _("<set by wxGlade>"),
    };
    chTrigger = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chTrigger_choices);
    const wxString chPriority_choices[] = {
        _("<set by wxGlade>"),
    };
    chPriority = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chPriority_choices);
    chOverlap = new wxCheckBox(pnPage, wxID_ANY, _("Allow overlap"));
    const wxString chAnimation_choices[] = {
        _("<set by wxGlade>"),
    };
    chAnimation = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chAnimation_choices);
    const wxString chSpeed_choices[] = {
        _("<set by wxGlade>"),
    };
    chSpeed = new wxChoice(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, chSpeed_choices);
    const wxString listEvtCmd_choices[] = {
        _("<>"),
    };
    listEvtCmd = new wxListBox(pnPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, listEvtCmd_choices, wxLB_SINGLE);
    btnOK = new wxButton(this, wxID_OK, wxEmptyString);
    btnCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
    btnApply = new wxButton(this, wxID_APPLY, wxEmptyString);
    btnHelp = new wxButton(this, wxID_HELP, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


void DialogEvt::set_properties()
{
    // begin wxGlade: DialogEvt::set_properties
    SetTitle(_("Event Editor"));
    stName->SetMinSize(wxSize(50, -1));
    tcSwitchA->SetMinSize(wxSize(50, -1));
    tcSwitchB->SetMinSize(wxSize(50, -1));
    tcVariable->SetMinSize(wxSize(50, -1));
    spinVariable->SetMinSize(wxSize(50, -1));
    chObject->SetMinSize(wxSize(50, -1));
    chObject->SetSelection(0);
    chActor->SetMinSize(wxSize(50, -1));
    chActor->SetSelection(0);
    spinTimerMinutes->SetMinSize(wxSize(50, -1));
    spinTimerSeconds->SetMinSize(wxSize(50, -1));
    bmpGraphic->SetMinSize(wxSize(48, 64));
    chMovement->SetMinSize(wxSize(50, -1));
    chMovement->SetSelection(0);
    chMovementRate->SetMinSize(wxSize(50, -1));
    chMovementRate->SetSelection(0);
    chTrigger->SetMinSize(wxSize(50, -1));
    chTrigger->SetSelection(0);
    chPriority->SetMinSize(wxSize(50, -1));
    chPriority->SetSelection(0);
    chAnimation->SetMinSize(wxSize(50, -1));
    chAnimation->SetSelection(0);
    chSpeed->SetMinSize(wxSize(50, -1));
    chSpeed->SetSelection(0);
    listEvtCmd->SetSelection(0);
    btnOK->SetDefault();
    // end wxGlade
}


void DialogEvt::do_layout()
{
    // begin wxGlade: DialogEvt::do_layout
    wxBoxSizer* szEvt = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szBottom = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szPage = new wxBoxSizer(wxHORIZONTAL);
    szEvtCmd_staticbox->Lower();
    wxStaticBoxSizer* szEvtCmd = new wxStaticBoxSizer(szEvtCmd_staticbox, wxHORIZONTAL);
    wxBoxSizer* szPageLeft = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szPageLeftDown = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szPageLeftDownRight = new wxBoxSizer(wxVERTICAL);
    szSpeed_staticbox->Lower();
    wxStaticBoxSizer* szSpeed = new wxStaticBoxSizer(szSpeed_staticbox, wxHORIZONTAL);
    szAnimation_staticbox->Lower();
    wxStaticBoxSizer* szAnimation = new wxStaticBoxSizer(szAnimation_staticbox, wxHORIZONTAL);
    szPriority_staticbox->Lower();
    wxStaticBoxSizer* szPriority = new wxStaticBoxSizer(szPriority_staticbox, wxVERTICAL);
    szTrigger_staticbox->Lower();
    wxStaticBoxSizer* szTrigger = new wxStaticBoxSizer(szTrigger_staticbox, wxHORIZONTAL);
    wxBoxSizer* szPageLeftDownLeft = new wxBoxSizer(wxVERTICAL);
    szMovement_staticbox->Lower();
    wxStaticBoxSizer* szMovement = new wxStaticBoxSizer(szMovement_staticbox, wxVERTICAL);
    wxBoxSizer* szMovementRate = new wxBoxSizer(wxHORIZONTAL);
    szGraphic_staticbox->Lower();
    wxStaticBoxSizer* szGraphic = new wxStaticBoxSizer(szGraphic_staticbox, wxHORIZONTAL);
    wxBoxSizer* szGraphicOptions = new wxBoxSizer(wxVERTICAL);
    szStartingConditions_staticbox->Lower();
    wxStaticBoxSizer* szStartingConditions = new wxStaticBoxSizer(szStartingConditions_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszStartingConditions = new wxFlexGridSizer(7, 3, 0, 0);
    wxBoxSizer* szTimer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szVariable2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szVariable1 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szSwitchB = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szSwitchA = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szTop = new wxBoxSizer(wxHORIZONTAL);
    szName_staticbox->Lower();
    wxStaticBoxSizer* szName = new wxStaticBoxSizer(szName_staticbox, wxHORIZONTAL);
    szName->Add(stName, 1, 0, 0);
    szTop->Add(szName, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxRIGHT, 1);
    szTop->Add(btnNewPage, 1, wxALIGN_BOTTOM|wxALL, 1);
    szTop->Add(btnCopyPage, 1, wxALIGN_BOTTOM|wxALIGN_CENTER_VERTICAL|wxALL, 1);
    szTop->Add(btnPastePage, 1, wxALIGN_BOTTOM|wxALL, 1);
    szTop->Add(btnDeletePage, 1, wxALIGN_BOTTOM|wxALL, 1);
    szEvt->Add(szTop, 0, wxEXPAND, 0);
    gszStartingConditions->Add(chbSwitchA, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szSwitchA->Add(tcSwitchA, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    szSwitchA->Add(btnSwitchA, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    gszStartingConditions->Add(szSwitchA, 1, wxEXPAND, 0);
    gszStartingConditions->Add(stSwitchA, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT, 1);
    gszStartingConditions->Add(chbSwitchB, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szSwitchB->Add(tcSwitchB, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    szSwitchB->Add(btnSwitchB, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    gszStartingConditions->Add(szSwitchB, 1, wxEXPAND, 0);
    gszStartingConditions->Add(stSwitchB, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    gszStartingConditions->Add(chbVariable, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szVariable1->Add(tcVariable, 1, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    szVariable1->Add(btnVariable, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    gszStartingConditions->Add(szVariable1, 1, wxEXPAND, 0);
    gszStartingConditions->Add(stVariable1, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    gszStartingConditions->Add(10, 9, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    szVariable2->Add(spinVariable, 0, wxALL, 1);
    szVariable2->Add(stVariable2, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    gszStartingConditions->Add(szVariable2, 1, wxEXPAND, 0);
    gszStartingConditions->Add(10, 9, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    gszStartingConditions->Add(chbObject, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    gszStartingConditions->Add(chObject, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 1);
    gszStartingConditions->Add(stObject, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    gszStartingConditions->Add(chbActor, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    gszStartingConditions->Add(chActor, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxEXPAND, 1);
    gszStartingConditions->Add(stActor, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxLEFT|wxTOP, 1);
    gszStartingConditions->Add(chbTimer, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 1);
    szTimer->Add(spinTimerMinutes, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);
    szTimer->Add(stTimerColon, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);
    szTimer->Add(spinTimerSeconds, 1, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 1);
    gszStartingConditions->Add(szTimer, 1, wxEXPAND, 0);
    gszStartingConditions->Add(stTimer, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP, 1);
    gszStartingConditions->AddGrowableCol(1);
    szStartingConditions->Add(gszStartingConditions, 1, wxEXPAND, 0);
    szPageLeft->Add(szStartingConditions, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szGraphic->Add(bmpGraphic, 0, wxRIGHT, 1);
    szGraphicOptions->Add(chbGraphicTranslucent, 1, wxBOTTOM|wxLEFT, 1);
    szGraphicOptions->Add(btnGraphic, 0, wxLEFT|wxTOP, 1);
    szGraphic->Add(szGraphicOptions, 0, wxEXPAND, 0);
    szPageLeftDownLeft->Add(szGraphic, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szMovement->Add(chMovement, 0, wxBOTTOM|wxEXPAND, 1);
    szMovementRate->Add(stMovementRate, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxTOP, 1);
    szMovementRate->Add(chMovementRate, 1, wxBOTTOM|wxLEFT|wxTOP, 1);
    szMovement->Add(szMovementRate, 0, wxEXPAND, 0);
    szMovement->Add(btnMovementCreatePath, 0, wxEXPAND|wxTOP, 1);
    szPageLeftDownLeft->Add(szMovement, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szPageLeftDown->Add(szPageLeftDownLeft, 0, wxEXPAND, 0);
    szTrigger->Add(chTrigger, 1, 0, 0);
    szPageLeftDownRight->Add(szTrigger, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szPriority->Add(chPriority, 0, wxBOTTOM|wxEXPAND, 1);
    szPriority->Add(chOverlap, 0, wxEXPAND|wxTOP, 1);
    szPageLeftDownRight->Add(szPriority, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szAnimation->Add(chAnimation, 1, 0, 0);
    szPageLeftDownRight->Add(szAnimation, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szSpeed->Add(chSpeed, 1, 0, 0);
    szPageLeftDownRight->Add(szSpeed, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szPageLeftDown->Add(szPageLeftDownRight, 1, 0, 0);
    szPageLeft->Add(szPageLeftDown, 0, wxEXPAND, 0);
    szPage->Add(szPageLeft, 1, wxEXPAND, 0);
    szEvtCmd->Add(listEvtCmd, 1, wxEXPAND, 0);
    szPage->Add(szEvtCmd, 1, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    pnPage->SetSizer(szPage);
    nbPage->AddPage(pnPage, _("1"));
    szEvt->Add(nbPage, 1, wxALL|wxEXPAND, 1);
    szBottom->Add(btnOK, 0, wxALL, 1);
    szBottom->Add(btnCancel, 0, wxALL, 1);
    szBottom->Add(btnApply, 0, wxALL, 1);
    szBottom->Add(btnHelp, 0, wxALL, 1);
    szEvt->Add(szBottom, 0, wxALIGN_RIGHT|wxBOTTOM|wxRIGHT, 3);
    SetSizer(szEvt);
    szEvt->Fit(this);
    Layout();
    // end wxGlade
}

