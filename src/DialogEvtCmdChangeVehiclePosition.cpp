// -*- C++ -*-
//
// generated by wxGlade not found
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "DialogEvtCmdChangeVehiclePosition.h"

// begin wxGlade: ::extracode
// end wxGlade


DialogEvtCmdChangeVehiclePosition::DialogEvtCmdChangeVehiclePosition(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxMAXIMIZE_BOX|wxMINIMIZE_BOX|wxRESIZE_BORDER)
{
    // begin wxGlade: DialogEvtCmdChangeVehiclePosition::DialogEvtCmdChangeVehiclePosition
    szPosition_staticbox = new wxStaticBox(this, wxID_ANY, _("Vehicle position"));
    szPositionVariable_staticbox = new wxStaticBox(this, wxID_ANY, _("Origin variable"));
    const wxString rbVehicle_choices[] = {
        _("Small ship"),
        _("Big ship"),
        _("Aeroship"),
    };
    rbVehicle = new wxRadioBox(this, wxID_ANY, _("Vehicle"), wxDefaultPosition, wxDefaultSize, 3, rbVehicle_choices, 1, wxRA_SPECIFY_ROWS);
    rbtnPositionSpecify = new wxRadioButton(this, wxID_ANY, _("Specify"));
    tcPositionSpecify = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnPositionSpecify = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    rbtnPositionVariable = new wxRadioButton(this, wxID_ANY, _("Variable"));
    stPositionVariableMapID = new wxStaticText(this, wxID_ANY, _("Map ID:"));
    tcPositionVariableMapID = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnPositionVariableMapID = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stPositionVariableX = new wxStaticText(this, wxID_ANY, _("X ordinate:"));
    tcPositionVariableX = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnPositionVariableX = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    stPositionVariableY = new wxStaticText(this, wxID_ANY, _("Y ordinate:"));
    tcPositionVariableY = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnPositionVariableY = new wxButton(this, wxID_ANY, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    btnOK = new wxButton(this, wxID_OK, wxEmptyString);
    btnCancel = new wxButton(this, wxID_CANCEL, wxEmptyString);
    btnHelp = new wxButton(this, wxID_HELP, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


void DialogEvtCmdChangeVehiclePosition::set_properties()
{
    // begin wxGlade: DialogEvtCmdChangeVehiclePosition::set_properties
    SetTitle(_("Change vehicle position"));
    rbVehicle->SetSelection(0);
    tcPositionSpecify->SetMinSize(wxSize(50, -1));
    tcPositionVariableMapID->SetMinSize(wxSize(50, -1));
    tcPositionVariableX->SetMinSize(wxSize(50, -1));
    tcPositionVariableY->SetMinSize(wxSize(50, -1));
    btnOK->SetDefault();
    // end wxGlade
}


void DialogEvtCmdChangeVehiclePosition::do_layout()
{
    // begin wxGlade: DialogEvtCmdChangeVehiclePosition::do_layout
    wxBoxSizer* szVehiclePosition = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* szBottom = new wxBoxSizer(wxHORIZONTAL);
    szPosition_staticbox->Lower();
    wxStaticBoxSizer* szPosition = new wxStaticBoxSizer(szPosition_staticbox, wxVERTICAL);
    szPositionVariable_staticbox->Lower();
    wxStaticBoxSizer* szPositionVariable = new wxStaticBoxSizer(szPositionVariable_staticbox, wxHORIZONTAL);
    wxFlexGridSizer* gszPositionVariable = new wxFlexGridSizer(3, 2, 2, 2);
    wxBoxSizer* szPositionVariableY = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szPositionVariableX = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szPositionVariableMapID = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* szPositionSpecify = new wxBoxSizer(wxHORIZONTAL);
    szVehiclePosition->Add(rbVehicle, 0, wxEXPAND|wxLEFT|wxRIGHT, 1);
    szPosition->Add(rbtnPositionSpecify, 0, wxBOTTOM|wxEXPAND, 1);
    szPositionSpecify->Add(tcPositionSpecify, 1, wxALIGN_CENTER_VERTICAL, 0);
    szPositionSpecify->Add(btnPositionSpecify, 0, wxALIGN_CENTER_VERTICAL, 0);
    szPosition->Add(szPositionSpecify, 0, wxEXPAND, 0);
    szPosition->Add(rbtnPositionVariable, 0, wxEXPAND|wxTOP, 1);
    gszPositionVariable->Add(stPositionVariableMapID, 0, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableMapID->Add(tcPositionVariableMapID, 1, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableMapID->Add(btnPositionVariableMapID, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszPositionVariable->Add(szPositionVariableMapID, 1, wxEXPAND, 0);
    gszPositionVariable->Add(stPositionVariableX, 0, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableX->Add(tcPositionVariableX, 1, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableX->Add(btnPositionVariableX, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszPositionVariable->Add(szPositionVariableX, 1, wxEXPAND, 0);
    gszPositionVariable->Add(stPositionVariableY, 0, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableY->Add(tcPositionVariableY, 1, wxALIGN_CENTER_VERTICAL, 0);
    szPositionVariableY->Add(btnPositionVariableY, 0, wxALIGN_CENTER_VERTICAL, 0);
    gszPositionVariable->Add(szPositionVariableY, 1, wxEXPAND, 0);
    gszPositionVariable->AddGrowableCol(1);
    szPositionVariable->Add(gszPositionVariable, 1, wxEXPAND, 0);
    szPosition->Add(szPositionVariable, 0, wxEXPAND, 0);
    szVehiclePosition->Add(szPosition, 0, wxBOTTOM|wxEXPAND|wxLEFT|wxRIGHT, 1);
    szBottom->Add(btnOK, 0, wxALIGN_BOTTOM|wxALL, 1);
    szBottom->Add(btnCancel, 0, wxALIGN_BOTTOM|wxALL, 1);
    szBottom->Add(btnHelp, 0, wxALIGN_BOTTOM|wxALL, 1);
    szVehiclePosition->Add(szBottom, 1, wxALIGN_RIGHT|wxBOTTOM|wxRIGHT, 3);
    SetSizer(szVehiclePosition);
    szVehiclePosition->Fit(this);
    Layout();
    // end wxGlade
}

